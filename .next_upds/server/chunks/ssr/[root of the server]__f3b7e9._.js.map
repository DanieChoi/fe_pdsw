{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/_components/NotificationSetup.tsx"],"sourcesContent":["// src/components/NotificationSetup.tsx\r\n\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// Notification 권한 요청 및 서비스 워커 등록 컴포넌트\r\nexport const NotificationSetup = () => {\r\n  const [swRegistration, setSwRegistration] = useState<ServiceWorkerRegistration | null>(null);\r\n\r\n  useEffect(() => {\r\n    const registerSWAndRequestPermission = async () => {\r\n      if (\"serviceWorker\" in navigator && \"PushManager\" in window) {\r\n        try {\r\n          // 기존 서비스 워커 등록 해제\r\n          const registrations = await navigator.serviceWorker.getRegistrations();\r\n          for (const registration of registrations) {\r\n            await registration.unregister();\r\n            console.log(\"기존 SW 등록 해제됨\");\r\n          }\r\n\r\n          // 새 서비스 워커 등록\r\n          const registration = await navigator.serviceWorker.register(\"/sw.js\", { scope: \"/\" });\r\n          console.log(\"SW 등록 완료\", registration);\r\n\r\n          setSwRegistration(registration);\r\n\r\n          // 서비스 워커 상태 확인\r\n          if (registration.active) {\r\n            console.log(\"SW가 이미 활성화됨\");\r\n          } else if (registration.installing) {\r\n            console.log(\"SW 설치 중...\");\r\n            const installingWorker = registration.installing;\r\n            installingWorker?.addEventListener(\"statechange\", () => {\r\n              console.log(\"SW 상태 변경:\", installingWorker.state);\r\n              if (installingWorker.state === \"activated\") {\r\n                console.log(\"SW 활성화 완료!\");\r\n              }\r\n            });\r\n          } else if (registration.waiting) {\r\n            console.log(\"SW 대기 중...\");\r\n          }\r\n\r\n          // 알림 권한 요청\r\n          const permission = await Notification.requestPermission();\r\n          console.log(\"알림 권한 상태:\", permission);\r\n\r\n          if (permission !== \"granted\") {\r\n            console.warn(\"알림 권한이 필요합니다.\");\r\n          }\r\n        } catch (err) {\r\n          console.error(\"SW 등록 실패\", err);\r\n        }\r\n      } else {\r\n        console.warn(\"이 브라우저는 서비스 워커 또는 푸시 알림을 지원하지 않습니다.\");\r\n      }\r\n    };\r\n\r\n    registerSWAndRequestPermission();\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\n// 브라우저 알림 표시 함수\r\nexport const showPushNotification = async (\r\n  title: string,\r\n  body: string,\r\n  tag: string = \"campaign-event\"\r\n) => {\r\n  console.log(\"[showPushNotification] 호출됨\", { title, body, tag });\r\n\r\n  try {\r\n    // 권한 확인 및 요청\r\n    if (Notification.permission !== \"granted\") {\r\n      console.warn(\"[showPushNotification] 알림 권한이 없음\");\r\n      const permission = await Notification.requestPermission();\r\n      if (permission !== \"granted\") {\r\n        console.error(\"[showPushNotification] 알림 권한 거부됨\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 서비스 워커 등록 확인\r\n    const reg = await navigator.serviceWorker.getRegistration();\r\n    console.log(\"[showPushNotification] 서비스 워커 등록 정보:\", reg);\r\n\r\n    if (!reg) {\r\n      console.error(\"[showPushNotification] 등록된 서비스 워커가 없음\");\r\n      return;\r\n    }\r\n\r\n    // 활성화 확인\r\n    if (!reg.active) {\r\n      console.warn(\"[showPushNotification] 서비스 워커가 활성화되지 않음, 대기 중...\");\r\n      await new Promise((resolve) => setTimeout(resolve, 1500));\r\n      const updatedReg = await navigator.serviceWorker.getRegistration();\r\n      if (!updatedReg?.active) {\r\n        console.error(\"[showPushNotification] 서비스 워커 활성화 타임아웃\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 알림 표시\r\n    await reg.showNotification(title, {\r\n      body,\r\n      icon: \"/icon.png\",\r\n      tag,\r\n      vibrate: [200, 100, 200],\r\n      requireInteraction: true,\r\n    } as any); // vibrate 허용을 위해 타입 단언\r\n\r\n    console.log(\"[showPushNotification] 알림 호출 성공\");\r\n  } catch (err) {\r\n    console.error(\"[showPushNotification] 에러 발생\", err);\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA,uCAAuC;;;;;AAGvC;AAFA;;AAKO,MAAM,oBAAoB;IAC/B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoC;IAEvF,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,iCAAiC;YACrC,IAAI,mBAAmB,aAAa,iBAAiB,QAAQ;gBAC3D,IAAI;oBACF,kBAAkB;oBAClB,MAAM,gBAAgB,MAAM,UAAU,aAAa,CAAC,gBAAgB;oBACpE,KAAK,MAAM,gBAAgB,cAAe;wBACxC,MAAM,aAAa,UAAU;wBAC7B,QAAQ,GAAG,CAAC;oBACd;oBAEA,cAAc;oBACd,MAAM,eAAe,MAAM,UAAU,aAAa,CAAC,QAAQ,CAAC,UAAU;wBAAE,OAAO;oBAAI;oBACnF,QAAQ,GAAG,CAAC,YAAY;oBAExB,kBAAkB;oBAElB,eAAe;oBACf,IAAI,aAAa,MAAM,EAAE;wBACvB,QAAQ,GAAG,CAAC;oBACd,OAAO,IAAI,aAAa,UAAU,EAAE;wBAClC,QAAQ,GAAG,CAAC;wBACZ,MAAM,mBAAmB,aAAa,UAAU;wBAChD,kBAAkB,iBAAiB,eAAe;4BAChD,QAAQ,GAAG,CAAC,aAAa,iBAAiB,KAAK;4BAC/C,IAAI,iBAAiB,KAAK,KAAK,aAAa;gCAC1C,QAAQ,GAAG,CAAC;4BACd;wBACF;oBACF,OAAO,IAAI,aAAa,OAAO,EAAE;wBAC/B,QAAQ,GAAG,CAAC;oBACd;oBAEA,WAAW;oBACX,MAAM,aAAa,MAAM,aAAa,iBAAiB;oBACvD,QAAQ,GAAG,CAAC,aAAa;oBAEzB,IAAI,eAAe,WAAW;wBAC5B,QAAQ,IAAI,CAAC;oBACf;gBACF,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,YAAY;gBAC5B;YACF,OAAO;gBACL,QAAQ,IAAI,CAAC;YACf;QACF;QAEA;IACF,GAAG,EAAE;IAEL,OAAO;AACT;AAGO,MAAM,uBAAuB,OAClC,OACA,MACA,MAAc,gBAAgB;IAE9B,QAAQ,GAAG,CAAC,8BAA8B;QAAE;QAAO;QAAM;IAAI;IAE7D,IAAI;QACF,aAAa;QACb,IAAI,aAAa,UAAU,KAAK,WAAW;YACzC,QAAQ,IAAI,CAAC;YACb,MAAM,aAAa,MAAM,aAAa,iBAAiB;YACvD,IAAI,eAAe,WAAW;gBAC5B,QAAQ,KAAK,CAAC;gBACd;YACF;QACF;QAEA,eAAe;QACf,MAAM,MAAM,MAAM,UAAU,aAAa,CAAC,eAAe;QACzD,QAAQ,GAAG,CAAC,wCAAwC;QAEpD,IAAI,CAAC,KAAK;YACR,QAAQ,KAAK,CAAC;YACd;QACF;QAEA,SAAS;QACT,IAAI,CAAC,IAAI,MAAM,EAAE;YACf,QAAQ,IAAI,CAAC;YACb,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;YACnD,MAAM,aAAa,MAAM,UAAU,aAAa,CAAC,eAAe;YAChE,IAAI,CAAC,YAAY,QAAQ;gBACvB,QAAQ,KAAK,CAAC;gBACd;YACF;QACF;QAEA,QAAQ;QACR,MAAM,IAAI,gBAAgB,CAAC,OAAO;YAChC;YACA,MAAM;YACN;YACA,SAAS;gBAAC;gBAAK;gBAAK;aAAI;YACxB,oBAAoB;QACtB,IAAW,uBAAuB;QAElC,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/components/providers/ClientProvider.tsx"],"sourcesContent":["// // C:\\nproject\\fe_pdsw\\src\\components\\providers\\ClientProvider.tsx\r\n// \"use client\";\r\n\r\n// import { NotificationSetup } from \"@/app/_components/NotificationSetup\";\r\n// import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\n// import { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\r\n// import { ToastContainer } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// // ✅ QueryClient를 전역에서 관리하도록 설정\r\n// const queryClient = new QueryClient({\r\n//   defaultOptions: {\r\n//     queries: {\r\n//       staleTime: 60 * 1000,\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export default function ClientProvider({ children }: { children: React.ReactNode }) {\r\n//   return (\r\n//     <QueryClientProvider client={queryClient}>\r\n//       {children}\r\n\r\n//       {/* Toast 메시지 */}\r\n//       <ToastContainer\r\n//         position=\"top-center\"\r\n//         autoClose={2000}\r\n//         hideProgressBar={false}\r\n//         newestOnTop\r\n//         closeOnClick\r\n//         pauseOnFocusLoss\r\n//         draggable\r\n//         pauseOnHover\r\n//       /> \r\n//       <NotificationSetup />\r\n\r\n//       {/* React Query 개발자 도구 */}\r\n//       {/* <ReactQueryDevtools initialIsOpen={false} /> */}\r\n//     </QueryClientProvider>\r\n//   );\r\n// }\r\n\r\n\r\n\"use client\";\r\n\r\nimport { NotificationSetup } from \"@/app/_components/NotificationSetup\";\r\nimport { NotificationListener } from \"@/app/_components/NotificationListener\"; // 추가\r\nimport { AppNotificationSetup } from \"@/components/shared/CustomNoticePopUpForBrowser\"; // 추가\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// QueryClient를 전역에서 관리하도록 설정\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 60 * 1000,\r\n    },\r\n  },\r\n});\r\n\r\nexport default function ClientProvider({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n\r\n      {/* Toast 메시지 */}\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop\r\n        closeOnClick\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      /> \r\n      <NotificationSetup />\r\n      {/* <NotificationListener />  */}\r\n      {/* <AppNotificationSetup /> */}\r\n\r\n      {/* React Query 개발자 도구 */}\r\n      {/* <ReactQueryDevtools initialIsOpen={false} /> */}\r\n    </QueryClientProvider>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,gBAAgB;AAEhB,2EAA2E;AAC3E,4EAA4E;AAC5E,uEAAuE;AACvE,mDAAmD;AACnD,kDAAkD;AAElD,kCAAkC;AAClC,wCAAwC;AACxC,sBAAsB;AACtB,iBAAiB;AACjB,8BAA8B;AAC9B,SAAS;AACT,OAAO;AACP,MAAM;AAEN,wFAAwF;AACxF,aAAa;AACb,iDAAiD;AACjD,mBAAmB;AAEnB,0BAA0B;AAC1B,wBAAwB;AACxB,gCAAgC;AAChC,2BAA2B;AAC3B,kCAAkC;AAClC,sBAAsB;AACtB,uBAAuB;AACvB,2BAA2B;AAC3B,oBAAoB;AACpB,uBAAuB;AACvB,YAAY;AACZ,8BAA8B;AAE9B,mCAAmC;AACnC,6DAA6D;AAC7D,6BAA6B;AAC7B,OAAO;AACP,IAAI;;;;;AAKJ;AAKA;AAFA;AAAA;AALA;;;;;;AAUA,6BAA6B;AAC7B,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW,CAAC;IAClC,gBAAgB;QACd,SAAS;YACP,WAAW,KAAK;QAClB;IACF;AACF;AAEe,SAAS,eAAe,EAAE,QAAQ,EAAiC;IAChF,qBACE,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;;YAC1B;0BAGD,8OAAC,mJAAA,CAAA,iBAAc;gBACb,UAAS;gBACT,WAAW;gBACX,iBAAiB;gBACjB,WAAW;gBACX,YAAY;gBACZ,gBAAgB;gBAChB,SAAS;gBACT,YAAY;;;;;;0BAEd,8OAAC,+IAAA,CAAA,oBAAiB;;;;;;;;;;;AAQxB"}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}