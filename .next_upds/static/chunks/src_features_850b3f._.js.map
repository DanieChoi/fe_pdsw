{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/auth/api/main.ts"],"sourcesContent":["// src/features/auth/api/fetchCampaigns.ts\r\nimport { axiosInstance, axiosRedisInstance } from '@/lib/axios';\r\nimport { MainCredentials, MainResponse } from '../types/mainIndex';\r\n\r\n// 캠페인 리스트 요청\r\nexport const fetchCampaigns = async (credentials: MainCredentials): Promise<MainResponse> => {\r\n  const mainData = {\r\n    filter: {\r\n      campaign_id: {\r\n        start: 1,\r\n        end: 9999999,\r\n      },\r\n    },\r\n    sort: {\r\n      campaign_id: 0,\r\n    },\r\n    page: {\r\n      index: 1,\r\n      items: 9999999,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<MainResponse>(\r\n      '/collections/campaign', \r\n      mainData\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};\r\n\r\nexport const fetchCounselorList = async (credentials: MainCredentials): Promise<any> => {\r\n  try {\r\n    const { data } = await axiosRedisInstance.get<any>(\r\n      // `/api/v1/counselor/list?tenantId=${credentials.tenant_id}&roleId=${credentials.roleId}`\r\n      `/counselor/list?tenantId=${credentials.tenant_id}&roleId=${credentials.roleId}`\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n}"],"names":[],"mappings":"AAAA,0CAA0C;;;;;AAC1C;;AAIO,MAAM,iBAAiB,OAAO;IACnC,MAAM,WAAW;QACf,QAAQ;YACN,aAAa;gBACX,OAAO;gBACP,KAAK;YACP;QACF;QACA,MAAM;YACJ,aAAa;QACf;QACA,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,IAAI,CACvC,yBACA;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF;AAEO,MAAM,qBAAqB,OAAO;IACvC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,qBAAkB,CAAC,GAAG,CAC3C,0FAA0F;QAC1F,CAAC,yBAAyB,EAAE,YAAY,SAAS,CAAC,QAAQ,EAAE,YAAY,MAAM,EAAE;QAElF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/auth/hooks/useApiForMain.ts"],"sourcesContent":["// src/features/auth/hooks/useApiForLogin.tsx\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport { fetchCampaigns } from '../api/main';\r\nimport { toast } from 'react-toastify';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { MainCredentials, MainResponse, AuthApiError } from '../types/mainIndex';\r\n\r\nexport function useApiForMain(\r\n  options?: UseMutationOptions<MainResponse, AuthApiError, MainCredentials>\r\n) {\r\n  return useMutation({\r\n    mutationKey: ['main'],\r\n    mutationFn: fetchCampaigns,\r\n    onSuccess: (data, variables, context) => {\r\n      // console.log('API Response:', {\r\n      //   code: data.result_code,\r\n      //   message: data.result_msg,\r\n      //   count: data.result_count,\r\n      //   total: data.total_count,\r\n      //   data: data.result_data\r\n      // });\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: AuthApiError, variables: MainCredentials, context: unknown) => {\r\n      // console.error('API Error:', error);\r\n      // toast.error(error.message || '데이터 로드에 실패했습니다.');\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,6CAA6C;;;;AAE7C;AADA;;;;AAMO,SAAS,cACd,OAAyE;;IAEzE,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAAO;QACrB,YAAY,yIAAA,CAAA,iBAAc;QAC1B,SAAS;yCAAE,CAAC,MAAM,WAAW;gBAC3B,iCAAiC;gBACjC,4BAA4B;gBAC5B,8BAA8B;gBAC9B,8BAA8B;gBAC9B,6BAA6B;gBAC7B,2BAA2B;gBAC3B,MAAM;gBACN,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;yCAAE,CAAC,OAAqB,WAA4B;gBACzD,sCAAsC;gBACtC,mDAAmD;gBACnD,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GAtBgB;;QAGP,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/apiForTennants.ts"],"sourcesContent":["// // src\\features\\campaignManager\\api\\apiForTennants.ts\r\n// import { TenantApiError, TenantListResponse, TenantRequestData } from \"@/features/campaignManager/types/typeForTenant\";\r\n// import { axiosInstance } from \"@/lib/axios\";\r\n\r\n// // todo2 전달 받은 tenant_id 가 있을 경우 start end 에 설정 없을 경우 기존 설정 그대로\r\n// export const apiForGetTenantList = async (): Promise<TenantListResponse> => {\r\n//   const tenantRequestData: TenantRequestData = {\r\n//     filter: {      \r\n//       tenant_id: {\r\n//         start: 0,\r\n//         end: 9999,\r\n//       },\r\n//     },\r\n//     sort: {\r\n//       tenant_id: 0,\r\n//     },\r\n//     page: {\r\n//       index: 1,\r\n//       items: 9999999,\r\n//     },\r\n//   };\r\n\r\n//   try {\r\n//     const { data } = await axiosInstance.post<TenantListResponse>(\r\n//       '/collections/tenant', \r\n//       tenantRequestData\r\n//     );\r\n\r\n//     // 응답 데이터가 예상한 형식과 일치하는지 검증\r\n//     if (data.result_code === 0 && data.result_msg === \"Success\") {\r\n//       console.log(\"api for tenant data check : \", data);\r\n//       return data;\r\n//     } else {\r\n//       throw new Error(`API Error: ${data.result_msg}`);\r\n//     }\r\n//   } catch (error) {\r\n//     const typedError = error as TenantApiError;\r\n\r\n//     throw new Error(\r\n//       typedError.response?.data?.result_msg || '테넌트 데이터를 가져오는데 실패했습니다.'\r\n//     );\r\n//   }\r\n// };\r\n\r\n// // export const apiForGetTenantList = async (): Promise<TenantListResponse> => {\r\n\r\n// src/features/campaignManager/api/apiForTennants.ts\r\nimport { customAlertService } from \"@/components/shared/layout/utils/CustomAlertService\";\r\nimport { TenantApiError, TenantListResponse, TenantRequestData } from \"@/features/campaignManager/types/typeForTenant\";\r\nimport { axiosInstance } from \"@/lib/axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nexport const apiForGetTenantList = async (tenant_id?: number): Promise<TenantListResponse> => {\r\n  const tenantRequestData: TenantRequestData = {\r\n    ...(tenant_id !== -1 ? {\r\n      filter: \r\n      {\r\n        tenant_id: tenant_id === 0\r\n          ? { start: 0, end: 999999 }\r\n          : { start: tenant_id!, end: tenant_id! },\r\n      },\r\n    } : {}),\r\n    sort: {\r\n      tenant_id: 0,\r\n    },\r\n    page: {\r\n      index: 1,\r\n      items: 9999999,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<TenantListResponse>(\r\n      '/collections/tenant',\r\n      tenantRequestData\r\n    );\r\n\r\n    if (data.result_code === 0 && data.result_msg === \"Success\") {\r\n      return data;\r\n    } else {\r\n      throw new Error(`API Error: ${data.result_msg}`);\r\n    }\r\n  } catch (error: any) {\r\n    if (error.response?.data?.result_code === 5) {\r\n      customAlertService.error('로그인 세션이 만료되었습니다. 다시 로그인 해주세요.', '세션 만료', () => {\r\n        window.location.href = '/login';\r\n      });\r\n    }\r\n\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n"],"names":[],"mappings":"AAAA,wDAAwD;AACxD,0HAA0H;AAC1H,+CAA+C;AAE/C,kEAAkE;AAClE,gFAAgF;AAChF,mDAAmD;AACnD,sBAAsB;AACtB,qBAAqB;AACrB,oBAAoB;AACpB,qBAAqB;AACrB,WAAW;AACX,SAAS;AACT,cAAc;AACd,sBAAsB;AACtB,SAAS;AACT,cAAc;AACd,kBAAkB;AAClB,wBAAwB;AACxB,SAAS;AACT,OAAO;AAEP,UAAU;AACV,qEAAqE;AACrE,gCAAgC;AAChC,0BAA0B;AAC1B,SAAS;AAET,kCAAkC;AAClC,qEAAqE;AACrE,2DAA2D;AAC3D,qBAAqB;AACrB,eAAe;AACf,0DAA0D;AAC1D,QAAQ;AACR,sBAAsB;AACtB,kDAAkD;AAElD,uBAAuB;AACvB,0EAA0E;AAC1E,SAAS;AACT,MAAM;AACN,KAAK;AAEL,mFAAmF;AAEnF,qDAAqD;;;;AACrD;AAEA;;;AAIO,MAAM,sBAAsB,OAAO;IACxC,MAAM,oBAAuC;QAC3C,GAAI,cAAc,CAAC,IAAI;YACrB,QACA;gBACE,WAAW,cAAc,IACrB;oBAAE,OAAO;oBAAG,KAAK;gBAAO,IACxB;oBAAE,OAAO;oBAAY,KAAK;gBAAW;YAC3C;QACF,IAAI,CAAC,CAAC;QACN,MAAM;YACJ,WAAW;QACb;QACA,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,IAAI,CACvC,uBACA;QAGF,IAAI,KAAK,WAAW,KAAK,KAAK,KAAK,UAAU,KAAK,WAAW;YAC3D,OAAO;QACT,OAAO;YACL,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,KAAK,UAAU,EAAE;QACjD;IACF,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,MAAM,gBAAgB,GAAG;YAC3C,wKAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,iCAAiC,SAAS;gBACjE,OAAO,QAAQ,CAAC,IAAI,GAAG;YACzB;QACF;QAEA,MAAM;IACR;AACF"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/apiForCampaign.ts"],"sourcesContent":["// src\\features\\campaignManager\\api\\apiForCampaign.ts\r\n// 사이드바 메뉴에 표시할 캠페인 리스트를 가져오는 API 함수\r\n\r\n// src/features/campaignManager/api/apiForCampaignList.ts\r\nimport { axiosInstance } from \"@/lib/axios\";\r\nimport { CampaignApiError, CampaignListResponse, CampaignRequestData } from \"../types/typeForCampaignForSideBar\";\r\nimport { customAlertService } from \"@/components/shared/layout/utils/CustomAlertService\";\r\n\r\n\r\nexport const apiForGetCampaignList = async (): Promise<CampaignListResponse> => {\r\n    const campaignRequestData: CampaignRequestData = {\r\n        filter: {\r\n            campaign_id: {\r\n                start: 1,\r\n                end: 9999999,\r\n            },\r\n        },\r\n        sort: {\r\n            campaign_id: 0,\r\n        },\r\n        page: {\r\n            index: 1,\r\n            items: 9999999,\r\n        },\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<CampaignListResponse>(\r\n            '/collections/campaign',\r\n            campaignRequestData\r\n        );\r\n\r\n        if (data.result_code === 0 && data.result_msg === \"Success\") {\r\n            // console.log(\"api for campaign data check : \", data);\r\n            return data;\r\n        } else {\r\n            throw new Error(`API Error: ${data.result_msg}`);\r\n        }\r\n    } catch (error:any) {\r\n\r\n        if (error.response.data.result_code === 5) {\r\n            // 세션 만료 시 알럿 표시 후 로그인 페이지로 리다이렉트\r\n            customAlertService.error('로그인 세션이 만료되었습니다. 다시 로그인 해주세요.', '세션 만료', () => {\r\n              window.location.href = '/login';\r\n            });\r\n          }\r\n\r\n        const typedError = error as CampaignApiError;\r\n        throw new Error(\r\n            typedError.response?.data?.result_msg || '캠페인 목록을 가져오는데 실패했습니다.'\r\n        );\r\n    }\r\n};"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,oCAAoC;AAEpC,yDAAyD;;;;AACzD;AAEA;;;AAGO,MAAM,wBAAwB;IACjC,MAAM,sBAA2C;QAC7C,QAAQ;YACJ,aAAa;gBACT,OAAO;gBACP,KAAK;YACT;QACJ;QACA,MAAM;YACF,aAAa;QACjB;QACA,MAAM;YACF,OAAO;YACP,OAAO;QACX;IACJ;IAEA,IAAI;QACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,IAAI,CACrC,yBACA;QAGJ,IAAI,KAAK,WAAW,KAAK,KAAK,KAAK,UAAU,KAAK,WAAW;YACzD,uDAAuD;YACvD,OAAO;QACX,OAAO;YACH,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,KAAK,UAAU,EAAE;QACnD;IACJ,EAAE,OAAO,OAAW;QAEhB,IAAI,MAAM,QAAQ,CAAC,IAAI,CAAC,WAAW,KAAK,GAAG;YACvC,iCAAiC;YACjC,wKAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,iCAAiC,SAAS;gBACjE,OAAO,QAAQ,CAAC,IAAI,GAAG;YACzB;QACF;QAEF,MAAM,aAAa;QACnB,MAAM,IAAI,MACN,WAAW,QAAQ,EAAE,MAAM,cAAc;IAEjD;AACJ"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/preferences/api/apiForSkill.ts"],"sourcesContent":["import { axiosInstance } from \"@/lib/axios\";\r\nimport { CampaignListResponse, CampaignSkillListResponse, CampaignSkillUpdateRequest, CreateSkillCredentials, DeleteAgentSkillCredentials, DeleteSkillCredentials, SkillAgentListResponse, SkillCampaignListResponse, SkillListCredentials, SkillListResponse, SuccesResponse } from \"../types/SystemPreferences\";\r\n\r\n// 스킬 마스터 리스트 조회 API\r\nexport const fetchSkillList = async (credentials: SkillListCredentials): Promise<SkillListResponse> => {\r\n    const SkillListRequestData = {\r\n        filter: {\r\n            skill_id: {\r\n                start: 1,\r\n                end: 9999999\r\n            },\r\n            tenant_id: credentials.tenant_id_array\r\n        },\r\n        sort: {\r\n            skill_id: 0,\r\n            tenant_id: 0\r\n        },\r\n        page: {\r\n            index: 1,\r\n            items: 10\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<SkillListResponse>(\r\n            '/collections/skill',\r\n            SkillListRequestData\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 스킬 마스터 신규 등록 API(POST)\r\nexport const createSkill = async (credentials: CreateSkillCredentials): Promise<SuccesResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            tenant_id: credentials.tenant_id,\r\n            skill_name: credentials.skill_name,\r\n            skill_description: credentials.skill_description\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<SuccesResponse>(\r\n            'skills/' + credentials.skill_id,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 스킬 마스터 수정 API(PUT)\r\nexport const UpdateSkill = async (credentials: CreateSkillCredentials): Promise<SuccesResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            tenant_id: credentials.tenant_id,\r\n            skill_name: credentials.skill_name,\r\n            skill_description: credentials.skill_description\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.put<SuccesResponse>(\r\n            'skills/' + credentials.skill_id,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 스킬 마스터 삭제 API(delete)\r\nexport const DeleteSkill = async (credentials: DeleteSkillCredentials): Promise<SuccesResponse> => {\r\n    try {\r\n        const { data } = await axiosInstance.delete<SuccesResponse>(\r\n            `skills/${credentials.skill_id}`,\r\n            {\r\n                data: {\r\n                    request_data: {\r\n                        skill_name: credentials.skill_name\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 스킬 할당 캠페인 조회\r\nexport const fetchskillCampaignList = async() : Promise<SkillCampaignListResponse> => {\r\n    const skillCampaignListRequestData = {\r\n        filter: {\r\n            skill_id: {\r\n                \"start\": 1,\r\n                \"end\": 999999\r\n            }\r\n        },\r\n        sort: {\r\n            skill_id: 0\r\n        },\r\n        page: {\r\n            index: 1,\r\n            items: 10\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<SkillCampaignListResponse>(\r\n            '/collections/skill-campaign',\r\n            skillCampaignListRequestData\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n\r\n// 스킬 할당 상담사 조회\r\nexport const fetchSkillAgentList = async(): Promise<SkillAgentListResponse> => {\r\n    const skillAgentListRequestData = {\r\n        filter: {\r\n            skill_id: {\r\n                \"start\": 1,\r\n                \"end\": 99\r\n            }\r\n        },\r\n        sort: {\r\n            skill_id: 0\r\n        },\r\n        page: {\r\n            index: 1,\r\n            items: 10\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<SkillAgentListResponse>(\r\n            '/collections/skill-agent',\r\n            skillAgentListRequestData\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 캠페인 정보 조회 API\r\nexport const fetchCampaignList = async (): Promise<CampaignListResponse> => {\r\n    const campaignListRequestData = {\r\n        filter: {\r\n            campaign_id: {\r\n                start: 1,\r\n                end: 9999999,\r\n            },\r\n        },\r\n        sort: {\r\n            campaign_id: 0,\r\n        },\r\n        page: {\r\n            index: 1,\r\n            items: 9999999,\r\n        },\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<CampaignListResponse>(\r\n            '/collections/campaign',\r\n            campaignListRequestData\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 선택 상담사 스킬할당 해제 API(DELETE)\r\nexport const DeleteAgentSkill = async (credentials: DeleteAgentSkillCredentials): Promise<SuccesResponse> => {\r\n    try {\r\n        const { data } = await axiosInstance.delete<SuccesResponse>(\r\n            `skills/${credentials.skill_id}/agent-list`,\r\n            {\r\n                data: {\r\n                    request_data: {\r\n                        agent_id: credentials.agent_id\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    }\r\n};\r\n\r\n// 캠페인 스킬 수정 요청\r\nexport const fetchCampaignSkillUpdate = async (credentials: CampaignSkillUpdateRequest): Promise<SuccesResponse> => {\r\n    const campaignSkillListSearchRequestData = {\r\n        request_data: {      \r\n          skill_id: credentials.skill_id, \r\n        }\r\n      };\r\n    \r\n      try {\r\n        const { data } = await axiosInstance.put<SuccesResponse>(\r\n          'campaigns/'+credentials.campaign_id+'/skill', \r\n          campaignSkillListSearchRequestData\r\n        );\r\n        return data;\r\n      } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n          throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n        }\r\n        throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n      }\r\n    };\r\n\r\n// 캠페인별스킬 리스트 요청\r\nexport const fetchCampaignSkills = async (): Promise<CampaignSkillListResponse> => {\r\n  const campaignSkillListSearchRequestData = {\r\n    filter: {      \r\n      campaign_id: {\r\n        start: 1,\r\n        end: 9999999,\r\n      },    \r\n    },\r\n    sort: {\r\n      campaign_id: 0,\r\n    },\r\n    page: {\r\n      index: 1,\r\n      items: 9999999,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<CampaignSkillListResponse>(\r\n      '/collections/campaign-skill', \r\n      campaignSkillListSearchRequestData\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 508, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/apiForGetTreeMenuDataForSideMenu.ts"],"sourcesContent":["// src/features/campaignManager/api/apiForGetTreeMenuDataForSideMenu.ts\r\nimport { TabData, TreeItem } from \"@/features/campaignManager/types/typeForSidebar2\";\r\nimport { apiForGetTenantList } from \"./apiForTennants\";\r\nimport { apiForGetCampaignList } from \"./apiForCampaign\";\r\nimport { fetchCounselorList } from \"@/features/auth/api/main\";\r\nimport { MainCredentials } from \"@/features/auth/types/mainIndex\";\r\nimport { fetchskillCampaignList } from \"@/features/preferences/api/apiForSkill\";\r\n\r\nfunction getStatusFromFlags(start_flag: number): 'started' | 'pending' | 'stopped' {\r\n  if (start_flag === 1) return 'started';      // 종료된 상태\r\n  if (start_flag === 2) return 'pending';    // 대기 상태\r\n  if (start_flag === 3) return 'stopped';     // 진행중 \r\n  return 'stopped';                          // 기타 케이스는 stopped\r\n}\r\n\r\nexport async function apiForGetTreeMenuDataForSideMenu(tenant_id?: number, role_id?: string): Promise<TabData[]> {\r\n  const [tenantsData, campaignData, skillDataForCampaign] = await Promise.all([\r\n    apiForGetTenantList(tenant_id),\r\n    apiForGetCampaignList(),\r\n    fetchskillCampaignList(),\r\n  ]);\r\n  // console.log(\"skillDataForCampaign\", skillDataForCampaign);\r\n\r\n  if (!tenantsData?.result_data || !campaignData?.result_data) {\r\n    return [];\r\n  }\r\n\r\n  // 캠페인별 스킬 매핑 생성\r\n  const campaignSkillsMap: { [key: string]: any[] } = {};\r\n  skillDataForCampaign.result_data.forEach((skill: any) => {\r\n    skill.campaign_id.forEach((campaignId: string) => {\r\n      if (!campaignSkillsMap[campaignId]) {\r\n        campaignSkillsMap[campaignId] = [];\r\n      }\r\n      // 중복 체크\r\n      const exists = campaignSkillsMap[campaignId].some(s => s.skill_id === skill.skill_id);\r\n      if (!exists) {\r\n        campaignSkillsMap[campaignId].push({\r\n          skill_id: skill.skill_id,\r\n          tenant_id: skill.tenant_id\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // 중복 제거된 캠페인 목록 생성\r\n  const uniqueCampaigns = [...new Map(campaignData.result_data.map(item => \r\n    [item.campaign_id, item]\r\n  )).values()];\r\n\r\n  // 테넌트별 캠페인 그룹화\r\n  const campaignsByTenant: { [key: number]: typeof campaignData.result_data } = {};\r\n  uniqueCampaigns.forEach(campaign => {\r\n    if (!campaignsByTenant[campaign.tenant_id]) {\r\n      campaignsByTenant[campaign.tenant_id] = [];\r\n    }\r\n    campaignsByTenant[campaign.tenant_id].push(campaign);\r\n  });\r\n\r\n  // 트리 구조 생성\r\n  const items: TreeItem[] = tenantsData.result_data.map(tenant => ({\r\n    id: tenant.tenant_id.toString(),\r\n    label: tenant.tenant_name,\r\n    type: 'folder',\r\n    children: campaignsByTenant[tenant.tenant_id]?.map(campaign => {\r\n      // 각 캠페인에 대한 스킬 children 생성\r\n      const skills = campaignSkillsMap[campaign.campaign_id.toString()] || [];\r\n\r\n      return {\r\n        id: campaign.campaign_id.toString(),\r\n        label: campaign.campaign_name,\r\n        type: 'campaign',\r\n        status: getStatusFromFlags(campaign.start_flag),\r\n        direction: 'outbound',\r\n        tenantId: campaign.tenant_id.toString(),\r\n        children: skills.map(skill => ({\r\n          id: `skill-${skill.skill_id}-${campaign.campaign_id}`,\r\n          label: `Skill ${skill.skill_id}`,\r\n          type: 'skill',\r\n          skillId: skill.skill_id,\r\n          tenantId: skill.tenant_id.toString(),\r\n          campaignName: campaign.campaign_name,\r\n          visible: false\r\n        }))\r\n      };\r\n    }) || []\r\n  }));\r\n\r\n  const tabData: TabData[] = [\r\n    {\r\n      id: 'campaign',\r\n      label: '캠페인',\r\n      items: [\r\n        {\r\n          id: 'nexus',\r\n          label: 'NEXUS',\r\n          type: 'folder',\r\n          children: items\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  console.log(\"tabData !!!\", tabData);\r\n\r\n  return tabData;\r\n}\r\n\r\ninterface Counselor {\r\n  tenantId: string;\r\n  counselorId: string;\r\n  counselorname: string;\r\n  affiliationGroupName: string;\r\n  affiliationTeamName: string;\r\n}\r\n\r\nexport async function apiToFetchCounselorTreeData(credentials: MainCredentials): Promise<TabData[]> {\r\n  const [tenantsData, counselorData] = await Promise.all([\r\n    apiForGetTenantList(credentials.tenant_id),\r\n    fetchCounselorList(credentials),\r\n  ]);\r\n\r\n  if (!tenantsData?.result_data || !counselorData?.counselorList) {\r\n    return [];\r\n  }\r\n\r\n  const counselorsByTenant: { [key: string]: Counselor[] } = {};\r\n  counselorData.counselorList.forEach((counselor: Counselor) => {\r\n    if (!counselorsByTenant[counselor.tenantId]) {\r\n      counselorsByTenant[counselor.tenantId] = [];\r\n    }\r\n    counselorsByTenant[counselor.tenantId].push(counselor);\r\n  });\r\n\r\n  const items: TreeItem[] = tenantsData.result_data.map(tenant => ({\r\n    id: tenant.tenant_id.toString(),\r\n    label: tenant.tenant_name,\r\n    type: 'folder',\r\n    children: counselorsByTenant[tenant.tenant_id]?.map(counselor => ({\r\n      id: counselor.counselorId,\r\n      label: counselor.counselorname,\r\n      type: 'counselor',\r\n      tenantId: tenant.tenant_id.toString(),\r\n      affiliationGroupName: counselor.affiliationGroupName,\r\n      affiliationTeamName: counselor.affiliationTeamName\r\n    })) || []\r\n  }));\r\n\r\n  const tabData: TabData[] = [\r\n    {\r\n      id: 'agent',\r\n      label: '상담사',\r\n      items: [\r\n        {\r\n          id: 'nexus',\r\n          label: 'NEXUS',\r\n          type: 'folder', \r\n          children: items\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  return tabData;\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 660, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 666, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/auth/hooks/useApiForGetTreeMenuDataForSideMenu.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\nimport { apiForGetTreeMenuDataForSideMenu } from \"@/features/campaignManager/api/apiForGetTreeMenuDataForSideMenu\";\r\nimport { TabData } from \"@/features/campaignManager/types/typeForSidebar2\";\r\nimport { useAuthStore } from \"@/store\";\r\n\r\n/**\r\n * 사이드메뉴 트리 데이터를 한 번에 가져오는 훅\r\n */\r\n// export function useApiForGetTreeMenuDataForSideMenu() {\r\n//   const queryClient = useQueryClient();\r\n//   const { tenant_id, role_id } = useAuthStore();\r\n\r\n//   // 1) React Query로 데이터 가져오기\r\n//   const query = useQuery<TabData[], Error>({\r\n//     queryKey: [\"treeMenuDataForSideMenu\", tenant_id, role_id],\r\n//     queryFn: () => apiForGetTreeMenuDataForSideMenu(tenant_id, role_id?.toString()),\r\n//     // staleTime: 5 * 60 * 1000, // 5분 캐싱\r\n//   });\r\n\r\n//   return {\r\n//     ...query,\r\n//   };\r\n// }\r\n\r\nexport function useApiForGetTreeMenuDataForSideMenu() {\r\n  const queryClient = useQueryClient();\r\n  const { tenant_id, role_id } = useAuthStore();\r\n  \r\n  const getQueryKey = () => [\"treeMenuDataForSideMenu\", tenant_id, role_id];\r\n\r\n  const query = useQuery<TabData[], Error>({\r\n    queryKey: getQueryKey(),\r\n    queryFn: () => apiForGetTreeMenuDataForSideMenu(tenant_id, role_id?.toString()),\r\n    // 캐시 시간을 조절하여 불필요한 요청 감소\r\n    staleTime: 30 * 1000, // 30초\r\n  });\r\n  \r\n  // 서버 호출 없이 로컬 캐시만 업데이트하는 함수 추가\r\n  const updateTreeMenuData = (updater: (oldData: TabData[] | undefined) => TabData[]) => {\r\n    queryClient.setQueryData(getQueryKey(), updater);\r\n  };\r\n  \r\n  // 필요한 경우에만 완전히 무효화하는 함수\r\n  const invalidateTreeMenuData = () => {\r\n    queryClient.invalidateQueries({ queryKey: getQueryKey() });\r\n  };\r\n\r\n  return {\r\n    ...query,\r\n    updateTreeMenuData,\r\n    invalidateTreeMenuData,\r\n  };\r\n}"],"names":[],"mappings":";;;AAGA;AAEA;AAHA;AAGA;AAHA;;AAFA;;;;AA0BO,SAAS;;IACd,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IACjC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAE1C,MAAM,cAAc,IAAM;YAAC;YAA2B;YAAW;SAAQ;IAEzE,MAAM,QAAQ,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAoB;QACvC,UAAU;QACV,OAAO;mEAAE,IAAM,CAAA,GAAA,gLAAA,CAAA,mCAAgC,AAAD,EAAE,WAAW,SAAS;;QACpE,yBAAyB;QACzB,WAAW,KAAK;IAClB;IAEA,+BAA+B;IAC/B,MAAM,qBAAqB,CAAC;QAC1B,YAAY,YAAY,CAAC,eAAe;IAC1C;IAEA,wBAAwB;IACxB,MAAM,yBAAyB;QAC7B,YAAY,iBAAiB,CAAC;YAAE,UAAU;QAAc;IAC1D;IAEA,OAAO;QACL,GAAG,KAAK;QACR;QACA;IACF;AACF;GA5BgB;;QACM,yLAAA,CAAA,iBAAc;QACH,4HAAA,CAAA,eAAY;QAI7B,8KAAA,CAAA,WAAQ"}},
    {"offset": {"line": 722, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 728, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/preferences/api/apiForCampaignGroup.ts"],"sourcesContent":["// src/features/campaignManager/api/apiForCampaignGroup.ts\r\nimport { axiosInstance } from \"@/lib/axios\";\r\nimport {\r\n    AddCampaignGroupCredentials,\r\n    CampaignGroupApiResponse,\r\n    SuccessResponse,\r\n    TreeNode,\r\n    SideMenuTreeData,\r\n    CampaignGroupGampaignListApiResponse,\r\n    GetCampaignListForCampaignGroupRequest,\r\n    ExtendedCombinedData\r\n} from \"@/features/campaignManager/types/typeForCampaignGroupForSideBar\";\r\nimport { TenantListResponse } from \"@/features/campaignManager/types/typeForTenant\";\r\nimport { apiForGetTenantList } from \"@/features/campaignManager/api/apiForTennants\";\r\nimport { ApiRequest, CampaignGroupResponse } from \"@/features/campaignManager/types/typeForCampaignGroup\";\r\nimport { customAlertService } from \"@/components/shared/layout/utils/CustomAlertService\";\r\n\r\ninterface CombinedData {\r\n    tenantData: TenantListResponse;\r\n    campaignGroupData: CampaignGroupApiResponse;\r\n}\r\n\r\n\r\n/**\r\n * 테넌트 목록, 캠페인 그룹 목록, 캠페인 목록을 동시에 가져오는 API 함수\r\n * @param tenant_id 테넌트 ID (캠페인 그룹 조회에 사용)\r\n * @returns Promise<ExtendedCombinedData> 테넌트, 캠페인 그룹, 캠페인 데이터를 포함한 객체\r\n */\r\nexport const apiForCombinedTenantAndCampaignGroup = async (\r\n    tenant_id: number\r\n): Promise<ExtendedCombinedData> => {\r\n\r\n    console.log(\"tenant_id ??????????????????????????????????????????????????????????? \", tenant_id);\r\n\r\n\r\n    try {\r\n        // Promise.all을 사용하여 세 API를 병렬로 호출\r\n        // 여기서 tenant_id를 apiForGetTenantList에 전달하여 필터링\r\n        const [tenantData, campaignGroupData, campaignData] = await Promise.all([\r\n            apiForGetTenantList(tenant_id), // tenant_id 전달\r\n            apiForCampaignGroupList(tenant_id),\r\n            apiForCampaignListForCampaignGroup({\r\n                filter: {\r\n                    group_id: [],\r\n                    campaign_id: {\r\n                        start: 1,\r\n                        end: 100\r\n                    }\r\n                },\r\n                sort: {\r\n                    campaign_id: 1\r\n                },\r\n                page: {\r\n                    index: 1,\r\n                    items: 10\r\n                }\r\n            })\r\n        ]);\r\n\r\n        console.log(\"Combined API for tenant data:\", tenantData);\r\n        console.log(\"Combined API for campaign group data:\", campaignGroupData);\r\n        console.log(\"Combined API for campaign data:\", campaignData);\r\n\r\n        // 데이터 유효성 검사 및 기본값 설정\r\n        const safeData = {\r\n            tenantData: {\r\n                result_data: tenantData?.result_data || [],\r\n                result_code: tenantData?.result_code || 0,\r\n                result_msg: tenantData?.result_msg || \"No tenant data\",\r\n                result_count: tenantData?.result_count || 0,\r\n                total_count: tenantData?.total_count || 0\r\n            },\r\n            campaignGroupData: {\r\n                result_data: campaignGroupData?.result_data || [],\r\n                result_code: campaignGroupData?.result_code || 0,\r\n                result_msg: campaignGroupData?.result_msg || \"No campaign group data\",\r\n                result_count: campaignGroupData?.result_count || 0\r\n            },\r\n            campaignData: {\r\n                result_data: campaignData?.result_data || [],\r\n                result_code: campaignData?.result_code || 0,\r\n                result_msg: campaignData?.result_msg || \"No campaign data\",\r\n                result_count: campaignData?.result_count || 0\r\n            }\r\n        };\r\n\r\n        return safeData;\r\n    } catch (error: any) {\r\n\r\n        if (error.response.data.result_code === 5) {\r\n            // 세션 만료 시 알럿 표시 후 로그인 페이지로 리다이렉트\r\n            customAlertService.error('로그인 세션이 만료되었습니다. 다시 로그인 해주세요.', '세션 만료', () => {\r\n              window.location.href = '/login';\r\n            });\r\n          }\r\n\r\n        // tofix for hyunsok\r\n        console.error(\"Combined API call failed:\", error);\r\n\r\n        // 에러 객체에 custom 속성 추가\r\n        const enhancedError = new Error(\r\n            error.message || \"테넌트, 캠페인 그룹, 캠페인 데이터를 가져오는데 실패했습니다.\"\r\n        );\r\n\r\n        // 원본 에러 정보 유지\r\n        (enhancedError as any).originalError = error;\r\n\r\n        throw enhancedError;\r\n    }\r\n};\r\n\r\n/**\r\n * 캠페인 그룹에 속한 캠페인 목록을 가져오는 API\r\n * @param request 필터, 정렬, 페이징 정보가 포함된 요청 객체\r\n * @returns 캠페인 그룹별 캠페인 목록\r\n */\r\nexport const apiForCampaignListForCampaignGroup = async (\r\n    request: GetCampaignListForCampaignGroupRequest\r\n): Promise<CampaignGroupGampaignListApiResponse> => {\r\n    try {\r\n        const { data } = await axiosInstance.post<CampaignGroupGampaignListApiResponse>(\r\n            'collections/campaign-group-list',\r\n            request\r\n        );\r\n\r\n        console.log(\"Campaign list for campaign group response:\", data);\r\n\r\n        // Check if data exists and has the expected structure\r\n        // if (!data || typeof data !== 'object') {\r\n        //     console.error(\"Invalid API response format:\", data);\r\n        //     return {\r\n        //         result_data: [],\r\n        //         result_code: 0,\r\n        //         result_msg: \"Invalid response\",\r\n        //         result_count: 0\r\n        //     };\r\n        // }\r\n\r\n        // Return the data as-is if it has result_data, otherwise return empty array\r\n        return {\r\n            result_data: Array.isArray(data.result_data) ? data.result_data : [],\r\n            result_code: data.result_code || 0,\r\n            result_msg: data.result_msg || \"No data\",\r\n            result_count: data.result_count || 0\r\n        };\r\n    } catch (error: any) {\r\n        console.error(\"Error fetching campaign group list:\", error);\r\n\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '데이터 가져오기 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * API 응답 데이터를 트리 구조로 변환하는 함수\r\n * @param combinedData 통합 API 응답 데이터\r\n * @returns 트리 구조의 데이터\r\n */\r\n// src/features/campaignManager/api/apiForCampaignGroup.ts 수정\r\n\r\n/**\r\n * API 응답 데이터를 트리 구조로 변환하는 함수 (캠페인 포함)\r\n * @param combinedData 통합 API 응답 데이터\r\n * @returns 트리 구조의 데이터\r\n */\r\nexport const transformToTreeData = (combinedData: ExtendedCombinedData): TreeNode[] => {\r\n    const { tenantData, campaignGroupData, campaignData } = combinedData;\r\n\r\n    if (!tenantData?.result_data) {\r\n        return [];\r\n    }\r\n\r\n    // 테넌트별 그룹 매핑\r\n    const groupsByTenant: Record<number, typeof campaignGroupData.result_data> = {};\r\n\r\n    if (campaignGroupData?.result_data) {\r\n        campaignGroupData.result_data.forEach(group => {\r\n            if (!groupsByTenant[group.tenant_id]) {\r\n                groupsByTenant[group.tenant_id] = [];\r\n            }\r\n            groupsByTenant[group.tenant_id].push(group);\r\n        });\r\n    }\r\n\r\n    // 그룹별 캠페인 매핑\r\n    const campaignsByGroup: Record<number, typeof campaignData.result_data> = {};\r\n\r\n    if (campaignData?.result_data) {\r\n        campaignData.result_data.forEach(campaign => {\r\n            if (!campaignsByGroup[campaign.group_id]) {\r\n                campaignsByGroup[campaign.group_id] = [];\r\n            }\r\n            campaignsByGroup[campaign.group_id].push(campaign);\r\n        });\r\n    }\r\n\r\n    // 테넌트 노드 생성 (그룹과 캠페인 포함)\r\n    const tenantNodes = tenantData.result_data.map(tenant => ({\r\n        id: `tenant-${tenant.tenant_id}`,\r\n        name: `[${tenant.tenant_id}]${tenant.tenant_name}`,\r\n        type: \"tenant\" as const,\r\n        tenant_id: tenant.tenant_id,\r\n        children: (groupsByTenant[tenant.tenant_id] || []).map(group => ({\r\n            id: `group-${group.group_id}-${tenant.tenant_id}-${group.group_name}`,\r\n            name: group.group_name,\r\n            type: \"group\" as const,\r\n            tenant_id: group.tenant_id,\r\n            group_id: group.group_id,\r\n            children: (campaignsByGroup[group.group_id] || []).map(campaign => ({\r\n                id: `campaign-${campaign.campaign_id}-${group.group_id}-${campaign.campaign_name}`,\r\n                name: campaign.campaign_name,\r\n                type: \"campaign\" as const,\r\n                tenant_id: campaign.tenant_id,\r\n                group_id: campaign.group_id,\r\n                campaign_id: campaign.campaign_id,\r\n                start_flag: campaign.start_flag,\r\n            }))\r\n        }))\r\n    }));\r\n\r\n    // 최상위 NEXUS 노드에 테넌트 노드를 자식으로 추가\r\n    return [{\r\n        id: \"nexus-root\",\r\n        name: \"[1]NEXUS\",\r\n        type: \"root\" as const,\r\n        children: tenantNodes\r\n    }];\r\n};\r\n\r\n/**\r\n * 사이드 메뉴를 위한 통합 데이터 변환 함수\r\n * @param combinedData 통합 API 응답 데이터\r\n * @returns 사이드 메뉴용 트리 데이터\r\n */\r\nexport const apiForCombinedDataForSideMenu = (combinedData: ExtendedCombinedData): SideMenuTreeData => {\r\n    const treeData = transformToTreeData(combinedData);\r\n\r\n    return {\r\n        items: treeData\r\n    };\r\n};\r\n\r\n// 캠페인 그룹 목록을 가져오는 API\r\nexport const apiForCampaignGroupList = async (\r\n    tenant_id: number\r\n): Promise<CampaignGroupApiResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            tenant_id: tenant_id\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<CampaignGroupApiResponse>(\r\n            `collections/campaign-group`,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n\r\n        if (error.response.data.result_code === 5) {\r\n            // 세션 만료 시 알럿 표시 후 로그인 페이지로 리다이렉트\r\n            customAlertService.error('로그인 세션이 만료되었습니다. 다시 로그인 해주세요.', '세션 만료', () => {\r\n                window.location.href = '/login';\r\n            });\r\n        }\r\n\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '데이터 가져오기 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n// 캠페인 그룹 생성 API\r\nexport const apiForCreateCampaignGroup = async (\r\n    credentials: AddCampaignGroupCredentials\r\n): Promise<SuccessResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            tenant_id: credentials.tenant_id,\r\n            group_name: credentials.group_name,\r\n        },\r\n    };\r\n\r\n    console.log(\"Create campaign group request data:\", request_data);\r\n\r\n\r\n    try {\r\n        // group_id를 URL에 포함시킴\r\n        const { data } = await axiosInstance.post<SuccessResponse>(\r\n            `campaign-groups/${credentials.group_id}`,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n\r\n        console.log(\"error \", error);\r\n\r\n        throw error;\r\n    }\r\n};\r\n\r\n// 캠페인 그룹 소속 캠페인 목록을 가져오는 API\r\nexport const apiForCampaignGroupCampaignList = async (\r\n    group_id: number\r\n): Promise<CampaignGroupGampaignListApiResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            group_id: [group_id]\r\n        },\r\n        sort: {\r\n            campaign_id: 0\r\n        },\r\n        page: {\r\n            index: 1,\r\n            items: 99999\r\n        }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<CampaignGroupGampaignListApiResponse>(\r\n            `collections/campaign-group-list`,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '데이터 가져오기 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\nexport const apiForCampaignGroupDataForCampaignGroupAdmin = async (\r\n    group_id?: number\r\n): Promise<CampaignGroupResponse> => {\r\n\r\n    // Create request body that matches the expected API format\r\n    const requestBody: ApiRequest = {\r\n        filter: group_id ? { group_id: [group_id] } : {},\r\n        sort: { group_id: 1 },\r\n        page: { index: 1, items: 100 }\r\n    };\r\n\r\n    try {\r\n        const { data } = await axiosInstance.post<CampaignGroupResponse>(\r\n            'collections/campaign-group-list',\r\n            requestBody\r\n        );\r\n\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '데이터 가져오기 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const apiForDeleteCampaignGroup = async (\r\n    group_id: number\r\n): Promise<SuccessResponse> => {\r\n    try {\r\n        // group_id를 URL에 포함시킴\r\n        const { data } = await axiosInstance.delete<SuccessResponse>(\r\n            `campaign-groups/${group_id}`\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n\r\n        console.error(\"캠페인 그룹 삭제 실패:\", error);\r\n\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '캠페인 그룹 삭제 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n// todo:\r\n// apiForUpdateCampaignGroupName 함수 추가 필요\r\n// url: pds/campaign-groups/{gorup_id}\r\n// put\r\n\r\n// apiForCampaignGroup.ts 파일에 추가\r\n\r\n// 캠페인 그룹 이름 업데이트 API\r\nexport const apiForUpdateCampaignGroupName = async (\r\n    group_id: number,\r\n    group_name: string,\r\n    tenant_id: number\r\n): Promise<SuccessResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            tenant_id: tenant_id,\r\n            group_name: group_name\r\n        }\r\n    };\r\n\r\n    try {\r\n        // group_id를 URL에 포함시키고 PUT 메서드 사용\r\n        const { data } = await axiosInstance.put<SuccessResponse>(\r\n            `campaign-groups/${group_id}`,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n\r\n        console.error(\"캠페인 그룹 이름 업데이트 실패:\", error);\r\n\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '캠페인 그룹 이름 업데이트 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * 특정 캠페인 그룹에 캠페인을 추가하는 API\r\n * @param group_id 캠페인을 추가할 캠페인 그룹의 ID\r\n * @param campaign_ids 추가할 캠페인의 ID 배열\r\n * @param tenant_id 테넌트 ID\r\n * @returns API 응답 (성공 여부)\r\n */\r\nexport const apiForAddCampaignToSpecificCampaignGroup = async (\r\n    group_id: number,\r\n    campaign_ids: number[],\r\n    tenant_id: number\r\n): Promise<SuccessResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            campaign_id: campaign_ids,\r\n            tenant_id: tenant_id\r\n        }\r\n    };\r\n\r\n    try {\r\n        // group_id를 URL에 포함시키고 POST 메서드 사용\r\n        const { data } = await axiosInstance.post<SuccessResponse>(\r\n            `campaign-group/${group_id}/list`,\r\n            request_data\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n\r\n        console.error(\"캠페인 그룹에 캠페인 추가 실패:\", error);\r\n\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '캠페인 그룹에 캠페인 추가 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n// Add this function to src/features/preferences/api/apiForCampaignGroup.ts\r\n\r\n/**\r\n * 특정 캠페인 그룹에서 캠페인을 제거하는 API\r\n * @param group_id 캠페인 그룹 ID\r\n * @param campaign_id 제거할 캠페인 ID\r\n * @returns API 응답 (성공 여부)\r\n */\r\nexport const apiForRemoveCampaignFromCampaignGroup = async (\r\n    group_id: number,\r\n    campaign_ids: number[],\r\n    tenant_id: number\r\n): Promise<SuccessResponse> => {\r\n    const request_data = {\r\n        request_data: {\r\n            campaign_id: campaign_ids,\r\n            tenant_id: tenant_id\r\n        }\r\n    };\r\n\r\n    try {\r\n        // DELETE 요청으로 캠페인 제거 - URL 형식: /pds/campaign-group/{group_id}/list\r\n        const { data } = await axiosInstance.delete<SuccessResponse>(\r\n            `campaign-group/${group_id}/list`,\r\n            { data: request_data }\r\n        );\r\n        return data;\r\n    } catch (error: any) {\r\n        if (error.response?.status === 401) {\r\n            throw new Error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n        }\r\n\r\n        console.error(\"캠페인 그룹에서 캠페인 제거 실패:\", error);\r\n\r\n        throw new Error(\r\n            `${error.response?.data?.result_code || ''}||${error.response?.data?.result_msg || '캠페인 그룹에서 캠페인 제거 실패'}`\r\n        );\r\n    }\r\n};\r\n\r\n\r\n// 캠페인 그룹 캠페인 추가\r\n\r\n// 함수 이름:\r\n// apiForAddCampaingToSpecificCampaignGroup\r\n\r\n// pds/campaign-group/{group_id}/list\r\n// post\r\n\r\n// request 예시\r\n// {\r\n//     \"request_data\": {\r\n//         \"campaign_id\": 14,\r\n//         \"tenant_id\": 1\r\n//     }\r\n// }\r\n\r\n// response 예시\r\n// {\r\n//     \"result_code\": 0,\r\n//     \"result_msg\": \"Success\"\r\n// }"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1093, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1099, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForGetTreeDataForCampaignGroupTab.tsx"],"sourcesContent":["// import { useQuery, useQueryClient } from '@tanstack/react-query';\r\n// import { useCallback, useEffect } from 'react';\r\n// import { useSideMenuCampaignGroupTabStore } from '@/store/storeForSideMenuCampaignGroupTab';\r\n// import { apiForCombinedTenantAndCampaignGroup, transformToTreeData } from '@/features/preferences/api/apiForCampaignGroup';\r\n\r\n// /**\r\n//  * 캠페인 그룹 트리 데이터를 가져오는 커스텀 훅 (TanStack Query 사용)\r\n//  * API 호출 및 데이터 변환 로직은 TanStack Query로 관리하고, UI 상태는 Zustand 스토어로 관리\r\n//  */\r\n// export const useApiForGetTreeDataForCampaignGroupTab = (initialTenantId?: number) => {\r\n//   const queryClient = useQueryClient();\r\n  \r\n//   // Zustand 스토어에서 필요한 기능 가져오기\r\n//   const { \r\n//     setTreeData, \r\n//     setLoading, \r\n//     setError, \r\n//     setTenantId, \r\n//     setExpandedNodes,\r\n//     setSelectedNodeId,\r\n//     tenant_id: storeTenantId\r\n//   } = useSideMenuCampaignGroupTabStore();\r\n  \r\n//   // tenant_id 결정 (props로 받은 값이 우선, 없으면 스토어 값 사용)\r\n//   const tenant_id = initialTenantId !== undefined ? initialTenantId : storeTenantId;\r\n  \r\n//   // TanStack Query를 사용하여 트리 데이터 가져오기\r\n//   const query = useQuery({\r\n//     queryKey: ['campaignTreeDataForCampaignGroupTab', tenant_id],\r\n//     queryFn: async () => {\r\n//       if (tenant_id === undefined || tenant_id === null) {\r\n//         throw new Error('테넌트 ID가 없습니다');\r\n//       }\r\n      \r\n//       const combinedData = await apiForCombinedTenantAndCampaignGroup(tenant_id);\r\n//       return {\r\n//         combinedData,\r\n//         transformedData: transformToTreeData(combinedData)\r\n//       };\r\n//     },\r\n//     enabled: tenant_id !== undefined && tenant_id !== null,\r\n//     staleTime: 5 * 60 * 1000, // 5분 동안 데이터를 \"신선한\" 상태로 유지\r\n//     refetchOnWindowFocus: false // 창 포커스 시 자동 리페치 비활성화\r\n//   });\r\n  \r\n//   // 쿼리 결과에 따라 스토어 상태 업데이트\r\n//   useEffect(() => {\r\n//     // tenant_id 설정\r\n//     if (tenant_id !== undefined && tenant_id !== null) {\r\n//       setTenantId(tenant_id);\r\n//     }\r\n    \r\n//     // 로딩 상태 업데이트\r\n//     setLoading(query.isLoading || query.isFetching);\r\n    \r\n//     // 에러 상태 업데이트\r\n//     if (query.error) {\r\n//       setError(query.error instanceof Error \r\n//         ? query.error \r\n//         : new Error('Unknown error occurred'));\r\n//     } else {\r\n//       setError(null);\r\n//     }\r\n    \r\n//     // 데이터가 있으면 트리 데이터 업데이트\r\n//     if (query.data) {\r\n//       setTreeData(query.data.transformedData);\r\n      \r\n//       // 루트 노드와 테넌트 노드만 확장하도록 설정 (처음 로드할 때만)\r\n//       if (query.isSuccess) {\r\n//         const transformedData = query.data.transformedData;\r\n//         const tenantNodes = new Set<string>();\r\n        \r\n//         if (transformedData.length > 0) {\r\n//           transformedData.forEach(rootNode => {\r\n//             tenantNodes.add(rootNode.id); // 루트 노드 추가\r\n\r\n//             if (rootNode.children) {\r\n//               rootNode.children.forEach(node => {\r\n//                 if (node.type === 'tenant') {\r\n//                   tenantNodes.add(node.id);\r\n//                 }\r\n//               });\r\n//             }\r\n//           });\r\n//         }\r\n        \r\n//         setExpandedNodes(tenantNodes);\r\n//       }\r\n//     }\r\n//   }, [\r\n//     query.data, \r\n//     query.isLoading, \r\n//     query.isFetching, \r\n//     query.error, \r\n//     query.isSuccess,\r\n//     tenant_id,\r\n//     setTenantId,\r\n//     setTreeData, \r\n//     setLoading, \r\n//     setError, \r\n//     setExpandedNodes\r\n//   ]);\r\n  \r\n//   // 트리 데이터 수동 가져오기 (tenant_id 지정하여 재요청)\r\n//   const fetchTreeData = useCallback(async (tenant_id: number) => {\r\n//     setTenantId(tenant_id);\r\n//     return queryClient.fetchQuery({\r\n//       queryKey: ['campaignTreeData', tenant_id],\r\n//       queryFn: async () => {\r\n//         const combinedData = await apiForCombinedTenantAndCampaignGroup(tenant_id);\r\n//         return {\r\n//           combinedData,\r\n//           transformedData: transformToTreeData(combinedData)\r\n//         };\r\n//       }\r\n//     });\r\n//   }, [queryClient, setTenantId]);\r\n  \r\n//   // 현재 상태를 유지하면서 트리 데이터 다시 가져오기\r\n//   const refetchTreeData = useCallback(async (tenant_id?: number) => {\r\n//     const targetTenantId = tenant_id || tenant_id;\r\n    \r\n//     if (targetTenantId === undefined || targetTenantId === null) {\r\n//       console.error(\"테넌트 ID가 없습니다.\");\r\n//       return null;\r\n//     }\r\n    \r\n//     // 현재 확장 상태와 선택 상태 저장\r\n//     const store = useSideMenuCampaignGroupTabStore.getState();\r\n//     const currentExpanded = store.expandedNodes;\r\n//     const currentSelected = store.selectedNodeId;\r\n    \r\n//     try {\r\n//       // 쿼리 데이터 리페치\r\n//       const result = await queryClient.fetchQuery({\r\n//         queryKey: ['campaignTreeData', targetTenantId],\r\n//         queryFn: async () => {\r\n//           const combinedData = await apiForCombinedTenantAndCampaignGroup(targetTenantId);\r\n//           return {\r\n//             combinedData,\r\n//             transformedData: transformToTreeData(combinedData)\r\n//           };\r\n//         }\r\n//       });\r\n      \r\n//       // 이전 확장/선택 상태 유지\r\n//       setExpandedNodes(currentExpanded);\r\n//       setSelectedNodeId(currentSelected);\r\n      \r\n//       return result;\r\n//     } catch (error) {\r\n//       console.error(\"트리 데이터 다시 가져오기 오류:\", error);\r\n//       return null;\r\n//     }\r\n//   }, [tenant_id, queryClient, setExpandedNodes, setSelectedNodeId]);\r\n  \r\n//   // 훅에서 필요한 상태와 함수 반환\r\n//   return {\r\n//     fetchTreeData,\r\n//     refetchTreeData,\r\n//     isLoading: query.isLoading || query.isFetching,\r\n//     error: query.error ? \r\n//       (query.error instanceof Error ? query.error : new Error('Unknown error occurred')) \r\n//       : null,\r\n//     data: query.data?.transformedData || [],\r\n//     status: query.status,\r\n//     isFetched: query.isFetched\r\n//   };\r\n// };\r\n\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useCallback, useEffect } from 'react';\r\nimport { useSideMenuCampaignGroupTabStore } from '@/store/storeForSideMenuCampaignGroupTab';\r\nimport { apiForCombinedTenantAndCampaignGroup, transformToTreeData } from '@/features/preferences/api/apiForCampaignGroup';\r\n\r\n/**\r\n * 캠페인 그룹 트리 데이터를 가져오는 커스텀 훅 (TanStack Query 사용)\r\n * API 호출 및 데이터 변환 로직은 TanStack Query로 관리하고, UI 상태는 Zustand 스토어로 관리\r\n */\r\nexport const useApiForGetTreeDataForCampaignGroupTab = (initialTenantId?: number) => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  // Zustand 스토어에서 필요한 기능 가져오기\r\n  const { \r\n    setTreeData, \r\n    setLoading, \r\n    setError, \r\n    setTenantId, \r\n    setExpandedNodes,\r\n    setSelectedNodeId,\r\n    tenant_id: storeTenantId\r\n  } = useSideMenuCampaignGroupTabStore();\r\n  \r\n  // tenant_id 결정 (props로 받은 값이 우선, 없으면 스토어 값 사용)\r\n  // const tenant_id = initialTenantId !== undefined ? initialTenantId : storeTenantId;\r\n  const tenant_id = initialTenantId\r\n  \r\n  // 쿼리 키 생성 함수 추가 - 재사용 가능하도록\r\n  const getQueryKey = useCallback(() => \r\n    ['campaignTreeDataForCampaignGroupTab', tenant_id], \r\n    [tenant_id]\r\n  );\r\n\r\n  // TanStack Query를 사용하여 트리 데이터 가져오기\r\n  const query = useQuery({\r\n    queryKey: getQueryKey(),\r\n    queryFn: async () => {\r\n      if (tenant_id === undefined || tenant_id === null) {\r\n        throw new Error('테넌트 ID가 없습니다');\r\n      }\r\n      \r\n      console.log(\"tenant_id :::::::::::::::::::::::::: \", tenant_id);\r\n      \r\n\r\n      const combinedData = await apiForCombinedTenantAndCampaignGroup(tenant_id);\r\n      return {\r\n        combinedData,\r\n        transformedData: transformToTreeData(combinedData)\r\n      };\r\n    },\r\n    enabled: tenant_id !== undefined && tenant_id !== null,\r\n    staleTime: 30 * 1000, // 30초 동안 데이터를 \"신선한\" 상태로 유지 (사이드메뉴와 일치)\r\n    refetchOnWindowFocus: false // 창 포커스 시 자동 리페치 비활성화\r\n  });\r\n  \r\n  // 쿼리 결과에 따라 스토어 상태 업데이트\r\n  useEffect(() => {\r\n    // tenant_id 설정\r\n    if (tenant_id !== undefined && tenant_id !== null) {\r\n      setTenantId(tenant_id);\r\n    }\r\n    \r\n    // 로딩 상태 업데이트\r\n    setLoading(query.isLoading || query.isFetching);\r\n    \r\n    // 에러 상태 업데이트\r\n    if (query.error) {\r\n      setError(query.error instanceof Error \r\n        ? query.error \r\n        : new Error('Unknown error occurred'));\r\n    } else {\r\n      setError(null);\r\n    }\r\n    \r\n    // 데이터가 있으면 트리 데이터 업데이트\r\n    if (query.data) {\r\n      setTreeData(query.data.transformedData);\r\n      \r\n      // 루트 노드와 테넌트 노드만 확장하도록 설정 (처음 로드할 때만)\r\n      if (query.isSuccess) {\r\n        const transformedData = query.data.transformedData;\r\n        const tenantNodes = new Set<string>();\r\n        \r\n        if (transformedData.length > 0) {\r\n          transformedData.forEach(rootNode => {\r\n            tenantNodes.add(rootNode.id); // 루트 노드 추가\r\n\r\n            if (rootNode.children) {\r\n              rootNode.children.forEach(node => {\r\n                if (node.type === 'tenant') {\r\n                  tenantNodes.add(node.id);\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n        \r\n        setExpandedNodes(tenantNodes);\r\n      }\r\n    }\r\n  }, [\r\n    query.data, \r\n    query.isLoading, \r\n    query.isFetching, \r\n    query.error, \r\n    query.isSuccess,\r\n    tenant_id,\r\n    setTenantId,\r\n    setTreeData, \r\n    setLoading, \r\n    setError, \r\n    setExpandedNodes\r\n  ]);\r\n  \r\n  // 트리 데이터 수동 가져오기 (tenant_id 지정하여 재요청)\r\n  const fetchTreeData = useCallback(async (tenant_id: number) => {\r\n    setTenantId(tenant_id);\r\n    return queryClient.fetchQuery({\r\n      queryKey: ['campaignTreeData', tenant_id],\r\n      queryFn: async () => {\r\n        const combinedData = await apiForCombinedTenantAndCampaignGroup(tenant_id);\r\n        return {\r\n          combinedData,\r\n          transformedData: transformToTreeData(combinedData)\r\n        };\r\n      }\r\n    });\r\n  }, [queryClient, setTenantId]);\r\n  \r\n  // 현재 상태를 유지하면서 트리 데이터 다시 가져오기\r\n  const refetchTreeData = useCallback(async (tenant_id?: number) => {\r\n    const targetTenantId = tenant_id || tenant_id;\r\n    \r\n    if (targetTenantId === undefined || targetTenantId === null) {\r\n      console.error(\"테넌트 ID가 없습니다.\");\r\n      return null;\r\n    }\r\n    \r\n    // 현재 확장 상태와 선택 상태 저장\r\n    const store = useSideMenuCampaignGroupTabStore.getState();\r\n    const currentExpanded = store.expandedNodes;\r\n    const currentSelected = store.selectedNodeId;\r\n    \r\n    try {\r\n      // 쿼리 데이터 리페치\r\n      const result = await queryClient.fetchQuery({\r\n        queryKey: getQueryKey(), // 수정: 일관된 쿼리 키 사용\r\n        queryFn: async () => {\r\n          const combinedData = await apiForCombinedTenantAndCampaignGroup(targetTenantId);\r\n          return {\r\n            combinedData,\r\n            transformedData: transformToTreeData(combinedData)\r\n          };\r\n        }\r\n      });\r\n      \r\n      // 이전 확장/선택 상태 유지\r\n      setExpandedNodes(currentExpanded);\r\n      setSelectedNodeId(currentSelected);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"트리 데이터 다시 가져오기 오류:\", error);\r\n      return null;\r\n    }\r\n  }, [tenant_id, queryClient, setExpandedNodes, setSelectedNodeId, getQueryKey]);\r\n  \r\n  // 캠페인 그룹 트리 데이터 무효화 함수 추가\r\n  const invalidateCampaignGroupTreeData = useCallback(() => {\r\n    queryClient.invalidateQueries({ queryKey: getQueryKey() });\r\n  }, [queryClient, getQueryKey]);\r\n  \r\n  // 서버 호출 없이 로컬 캐시만 업데이트하는 함수 추가\r\n  const updateCampaignGroupTreeData = useCallback((\r\n    updater: (oldData: { combinedData: any, transformedData: any } | undefined) => { combinedData: any, transformedData: any }\r\n  ) => {\r\n    queryClient.setQueryData(getQueryKey(), updater);\r\n  }, [queryClient, getQueryKey]);\r\n  \r\n  // 훅에서 필요한 상태와 함수 반환\r\n  return {\r\n    fetchTreeData,\r\n    refetchTreeData,\r\n    invalidateCampaignGroupTreeData,\r\n    updateCampaignGroupTreeData,\r\n    isLoading: query.isLoading || query.isFetching,\r\n    error: query.error ? \r\n      (query.error instanceof Error ? query.error : new Error('Unknown error occurred')) \r\n      : null,\r\n    data: query.data?.transformedData || [],\r\n    status: query.status,\r\n    isFetched: query.isFetched\r\n  };\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1468, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/data/baseTabs.ts"],"sourcesContent":["// src/features/campaignManager/components/data/baseTabs.ts\r\nexport const baseTabs = [\r\n    { id: 'campaign', label: '캠페인', icon: '/tree-menu/campaign_icon_for_sidemenu.png' , iconWidth: 13, iconHeight: 13},\r\n    { id: 'agent', label: '상담사', icon: '/tree-menu/ghost_icon_for_counselor_tab.png', iconWidth: 14, iconHeight: 14 },\r\n    { id: 'campaign-group', label: '캠페인 그룹', icon: '/tree-menu/campain_group.png' , iconWidth: 12, iconHeight: 12 }\r\n  ] as const;\r\n  \r\n  export type TabId = typeof baseTabs[number]['id'];"],"names":[],"mappings":"AAAA,2DAA2D;;;;AACpD,MAAM,WAAW;IACpB;QAAE,IAAI;QAAY,OAAO;QAAO,MAAM;QAA8C,WAAW;QAAI,YAAY;IAAE;IACjH;QAAE,IAAI;QAAS,OAAO;QAAO,MAAM;QAA+C,WAAW;QAAI,YAAY;IAAG;IAChH;QAAE,IAAI;QAAkB,OAAO;QAAU,MAAM;QAAiC,WAAW;QAAI,YAAY;IAAG;CAC/G"}},
    {"offset": {"line": 1498, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1504, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/mainCampaignStatusUpdate.ts"],"sourcesContent":["// src/features/campaignManager/hooks/fetchCampaignStatusUpdate.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CampaignStatusDataRequest, CampaignStatusResponse } from '../types/campaignManagerIndex';\r\n\r\n// 캠페인 상태 변경 요청\r\nexport const fetchCampaignStatusUpdate = async (credentials: CampaignStatusDataRequest): Promise<CampaignStatusResponse> => {\r\n  const campaignStatusUpdateRequestData = {\r\n    request_data: {      \r\n      campaign_status: credentials.campaign_status\r\n    }\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.put<CampaignStatusResponse>(\r\n      'campaigns/'+credentials.campaign_id+'/status', \r\n      campaignStatusUpdateRequestData\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"AAAA,kEAAkE;;;;AAClE;;AAIO,MAAM,4BAA4B,OAAO;IAC9C,MAAM,kCAAkC;QACtC,cAAc;YACZ,iBAAiB,YAAY,eAAe;QAC9C;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,GAAG,CACtC,eAAa,YAAY,WAAW,GAAC,WACrC;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 1529, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1535, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForCampaignStatusUpdate.ts"],"sourcesContent":["import { useMutation, useQueryClient, UseMutationOptions } from '@tanstack/react-query';\r\nimport { fetchCampaignStatusUpdate } from '../api/mainCampaignStatusUpdate';\r\nimport { CampaignStatusDataRequest, CampaignStatusResponse, CampaignApiError } from '../types/campaignManagerIndex';\r\nimport { getCampaignErrorMessage2 } from '@/lib/error_message';\r\nimport { customAlertService } from '@/components/shared/layout/utils/CustomAlertService';\r\nimport { useTabStore } from '@/store/tabStore';\r\n\r\nexport function useApiForCampaignStatusUpdate(\r\n  options?: UseMutationOptions<CampaignStatusResponse, CampaignApiError, CampaignStatusDataRequest>\r\n) {\r\n  const queryClient = useQueryClient();\r\n  // TabStore에서 필요한 함수 가져오기\r\n  const { simulateHeaderMenuClick, addTabCurrentOnly, openedTabs, setActiveTab } = useTabStore();\r\n\r\n  return useMutation({\r\n    mutationKey: ['mainCampaignStatusUpdate'],\r\n    mutationFn: fetchCampaignStatusUpdate,\r\n    onSuccess: (data, variables, context) => {\r\n      if (data.result_code === 0) {\r\n        // 성공 시 성공 메시지 표시\r\n        customAlertService.success(\r\n          '캠페인 상태가 성공적으로 변경되었습니다!',\r\n          '캠페인 상태 변경 완료'\r\n        );\r\n        \r\n        // 성공 후 캠페인 관리 탭 열기 (탭 ID 2번이 캠페인 관리)\r\n        // openCampaignManagerTab();\r\n      } else {\r\n        // 실패 시 에러 메시지 표시\r\n        customAlertService.error(\r\n          getCampaignErrorMessage2(data.reason_code || 0),\r\n          \"캠페인 상태 변경 오류\"\r\n        );\r\n        \r\n        // 에러 발생 후에도 캠페인 관리 탭 열기\r\n        // openCampaignManagerTab();\r\n      }\r\n\r\n      // 상태 업데이트 성공 후 관련 쿼리 무효화\r\n      queryClient.invalidateQueries({ queryKey: ['treeMenuDataForSideMenu'] });\r\n      queryClient.invalidateQueries({ queryKey: ['mainCampaignProgressInformation'] });\r\n\r\n      // mainData 쿼리 무효화하여 캠페인 목록 새로고침\r\n      queryClient.invalidateQueries({ queryKey: ['mainData'] });\r\n\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: CampaignApiError, variables: CampaignStatusDataRequest, context: unknown) => {\r\n      console.error('API Error:', error);\r\n      // API 오류 시 에러 메시지 표시\r\n      customAlertService.error(error.message || '데이터 로드에 실패했습니다.', 'API 오류');\r\n      \r\n      // 오류 발생 후에도 캠페인 관리 탭 열기\r\n      openCampaignManagerTab();\r\n      \r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n  \r\n  // 캠페인 관리 탭을 여는 함수\r\n  function openCampaignManagerTab() {\r\n    // 1. 먼저 이미 열려있는 캠페인 관리 탭이 있는지 확인 (탭 ID 2번이 캠페인 관리)\r\n    const existingCampaignTab = openedTabs.find(tab => tab.id === 2);\r\n    \r\n    if (existingCampaignTab) {\r\n      // 이미 열려있는 탭이 있으면 해당 탭 활성화\r\n      setActiveTab(existingCampaignTab.id, existingCampaignTab.uniqueKey);\r\n    } else {\r\n      // 없으면 새 탭 생성 (2번은 캠페인 관리 메뉴 ID)\r\n      simulateHeaderMenuClick(2);\r\n    }\r\n  }\r\n}"],"names":[],"mappings":";;;AACA;AAEA;AACA;AACA;AALA;AAAA;;;;;;;AAOO,SAAS,8BACd,OAAiG;;IAEjG,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IACjC,yBAAyB;IACzB,MAAM,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;IAE3F,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAA2B;QACzC,YAAY,wKAAA,CAAA,4BAAyB;QACrC,SAAS;yDAAE,CAAC,MAAM,WAAW;gBAC3B,IAAI,KAAK,WAAW,KAAK,GAAG;oBAC1B,iBAAiB;oBACjB,wKAAA,CAAA,qBAAkB,CAAC,OAAO,CACxB,0BACA;gBAGF,qCAAqC;gBACrC,4BAA4B;gBAC9B,OAAO;oBACL,iBAAiB;oBACjB,wKAAA,CAAA,qBAAkB,CAAC,KAAK,CACtB,CAAA,GAAA,8HAAA,CAAA,2BAAwB,AAAD,EAAE,KAAK,WAAW,IAAI,IAC7C;gBAGF,wBAAwB;gBACxB,4BAA4B;gBAC9B;gBAEA,yBAAyB;gBACzB,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAA0B;gBAAC;gBACtE,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAkC;gBAAC;gBAE9E,gCAAgC;gBAChC,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAAW;gBAAC;gBAEvD,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;yDAAE,CAAC,OAAyB,WAAsC;gBACvE,QAAQ,KAAK,CAAC,cAAc;gBAC5B,qBAAqB;gBACrB,wKAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,MAAM,OAAO,IAAI,mBAAmB;gBAE7D,wBAAwB;gBACxB;gBAEA,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;;IAEA,kBAAkB;IAClB,SAAS;QACP,mDAAmD;QACnD,MAAM,sBAAsB,WAAW,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QAE9D,IAAI,qBAAqB;YACvB,0BAA0B;YAC1B,aAAa,oBAAoB,EAAE,EAAE,oBAAoB,SAAS;QACpE,OAAO;YACL,gCAAgC;YAChC,wBAAwB;QAC1B;IACF;AACF;GAjEgB;;QAGM,yLAAA,CAAA,iBAAc;QAE+C,2HAAA,CAAA,cAAW;QAErF,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 1628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1634, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/listManager/api/mainCampaignBlacklistCount.ts"],"sourcesContent":["// src/features/campaignManager/api/mainCampaignHistory.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CampaignBlacklistCountResponse } from '../types/listManagerIndex';\r\n\r\n// 캠페인 블랙 리스트 건 수 조회 요청\r\nexport const fetchCampaignBlacklistCount = async (credentials: number): Promise<CampaignBlacklistCountResponse> => {\r\n  const campaignBlacklistCountRequestData = {\r\n    request_data: {      \r\n      campaign_id: credentials\r\n    },\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<CampaignBlacklistCountResponse>(\r\n      '/collections/campaign-blacklist-count', \r\n      campaignBlacklistCountRequestData\r\n    );\r\n\r\n    console.log(\"블랙 리스트 카운트 조회 api 응답 : \", data);\r\n    \r\n\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};\r\n\r\n// 블랙 리스트 최대치 조회\r\n// pds/collections/campaign-blacklist-max\r\n// apiForGetCampaignMaximumBlacklistCount\r\n\r\n// request:\r\n// 없음\r\n\r\n// reponse:\r\n// ```\r\n// {\r\n//     \"result_code\": 0,\r\n//     \"result_msg\": \"Success\",\r\n//     \"result_data\": {\r\n//         \"max_count\": 100000\r\n//     }\r\n// }\r\n// ```"],"names":[],"mappings":"AAAA,0DAA0D;;;;AAC1D;;AAIO,MAAM,8BAA8B,OAAO;IAChD,MAAM,oCAAoC;QACxC,cAAc;YACZ,aAAa;QACf;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,IAAI,CACvC,yCACA;QAGF,QAAQ,GAAG,CAAC,2BAA2B;QAGvC,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF,GAEA,gBAAgB;CAChB,yCAAyC;CACzC,yCAAyC;CAEzC,WAAW;CACX,KAAK;CAEL,WAAW;CACX,MAAM;CACN,IAAI;CACJ,wBAAwB;CACxB,+BAA+B;CAC/B,uBAAuB;CACvB,8BAA8B;CAC9B,QAAQ;CACR,IAAI;CACJ,MAAM"}},
    {"offset": {"line": 1674, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1680, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/listManager/hooks/useApiForCampaignBlacklistCount.ts"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForCampaignBlacklistCount.ts\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport { fetchCampaignBlacklistCount } from '../api/mainCampaignBlacklistCount';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { CampaignBlacklistCountResponse, ListManagerApiError } from '../types/listManagerIndex';\r\n\r\nexport function useApiForCampaignBlacklistCount(\r\n  options?: UseMutationOptions<CampaignBlacklistCountResponse, ListManagerApiError, number>\r\n) {\r\n  return useMutation({\r\n    mutationKey: ['mainCampaignBlacklistCount'],\r\n    mutationFn: fetchCampaignBlacklistCount,\r\n    onSuccess: (data, variables, context) => {\r\n      console.log('API Response:', {\r\n        code: data.result_code,\r\n        message: data.result_msg,\r\n        data: data.result_data\r\n      });\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: ListManagerApiError, variables: number, context: unknown) => {\r\n      // console.error('API Error:', error);\r\n      // toast.error(error.message || '데이터 로드에 실패했습니다.');\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,wEAAwE;;;;AAExE;AADA;;;;AAKO,SAAS,gCACd,OAAyF;;IAEzF,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAA6B;QAC3C,YAAY,sKAAA,CAAA,8BAA2B;QACvC,SAAS;2DAAE,CAAC,MAAM,WAAW;gBAC3B,QAAQ,GAAG,CAAC,iBAAiB;oBAC3B,MAAM,KAAK,WAAW;oBACtB,SAAS,KAAK,UAAU;oBACxB,MAAM,KAAK,WAAW;gBACxB;gBACA,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;2DAAE,CAAC,OAA4B,WAAmB;gBACvD,sCAAsC;gBACtC,mDAAmD;gBACnD,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GApBgB;;QAGP,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 1723, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1729, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/listManager/api/mainCallingListDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/fetchCallingListDelete.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { DeleteResponse } from '../types/listManagerIndex';\r\n\r\ninterface DeleteRequest {\r\n  request_data: {\r\n    list_flag: \"L\";\r\n  };\r\n}\r\n\r\n// 발신리스트 업로드 취소 요청 (DELETE -> POST, body 추가)\r\nexport const fetchCallingListDelete = async (campaignId: number): Promise<DeleteResponse> => {\r\n  const requestData: DeleteRequest = {\r\n    request_data: {\r\n      list_flag: \"L\",\r\n    },\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<DeleteResponse>(\r\n      `campaigns/${campaignId}/calling-list`,\r\n      requestData, // body 추가\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(\r\n      error.response?.data?.result_code +\r\n        '||' +\r\n        error.response?.data?.result_msg || '데이터 가져오기 실패'\r\n    );\r\n  }\r\n};"],"names":[],"mappings":"AAAA,+DAA+D;;;;AAC/D;;AAUO,MAAM,yBAAyB,OAAO;IAC3C,MAAM,cAA6B;QACjC,cAAc;YACZ,WAAW;QACb;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,IAAI,CACvC,CAAC,UAAU,EAAE,WAAW,aAAa,CAAC,EACtC,aACA;YACE,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MACR,MAAM,QAAQ,EAAE,MAAM,cACpB,OACA,MAAM,QAAQ,EAAE,MAAM,cAAc;IAE1C;AACF"}},
    {"offset": {"line": 1758, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1764, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/listManager/hooks/useApiForCampaignListDelete.ts"],"sourcesContent":["// C:\\nproject\\fe_pdsw\\src\\features\\listManager\\hooks\\useApiForCampaignListDelete.ts\r\nimport { useMutation, UseMutationOptions, useQueryClient } from '@tanstack/react-query';\r\nimport { DeleteResponse, ListManagerApiError } from '../types/listManagerIndex';\r\nimport { fetchCallingListDelete } from '../api/mainCallingListDelete';\r\nimport { toast } from 'react-toastify';\r\nimport { customAlertService } from '@/components/shared/layout/utils/CustomAlertService';\r\n\r\nconst useApiForCampaignListDelete = (\r\n  options?: UseMutationOptions<DeleteResponse, ListManagerApiError, number>\r\n): ReturnType<typeof useMutation<DeleteResponse, ListManagerApiError, number>> => {\r\n  const queryClient = useQueryClient();\r\n\r\n  const mutation = useMutation({\r\n    mutationKey: ['campaignListDelete'],\r\n    mutationFn: async (campaignId: number) => {\r\n      // 삭제 전 확인 다이얼로그 표시\r\n      return new Promise<DeleteResponse>((resolve, reject) => {\r\n        customAlertService.show({\r\n          message: '발신리스트 삭제시 발신리스트와 캠페인 진행정보가 초기화 됩니다.\\n삭제된 발신리스트와 캠페인 진행정보는 복구가 불가능합니다.\\n발신리스트를 삭제하시겠습니까?',\r\n          title: '캠페인',\r\n          type: '1',\r\n          onClose: async () => {\r\n            try {\r\n              // 사용자가 확인을 누르면 실제 API 호출 실행\r\n              const result = await fetchCallingListDelete(campaignId);\r\n              resolve(result);\r\n            } catch (error) {\r\n              reject(error);\r\n            }\r\n          },\r\n          onCancle: () => {\r\n            // 사용자가 취소를 누르면 작업 취소\r\n            toast.info('캠페인 리스트 삭제가 취소되었습니다.', {\r\n              autoClose: 3000\r\n            });\r\n            // reject(new Error('사용자가 삭제를 취소했습니다.'));\r\n          }\r\n        });\r\n      });\r\n    },\r\n    onSuccess: (data, deletedCampaignId, context) => {\r\n      console.log('API Response (Delete):', {\r\n        code: data.result_code,\r\n        message: data.result_msg\r\n      });\r\n      \r\n      toast.success('캠페인 리스트 삭제 성공 check !!!!!!!!!!!');\r\n\r\n      // --- Cache Invalidation ---\r\n      // 1. Invalidate the side menu tree data\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['treeMenuDataForSideMenu']\r\n      });\r\n\r\n      // 2. Invalidate the specific campaign's progress information\r\n      const tenantIdForQueryKey = 1; // Or get dynamically if needed\r\n\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['mainCampaignProgressInformation', tenantIdForQueryKey, deletedCampaignId]\r\n      });\r\n\r\n      // 전체 진행 정보 다시 불러오기 (필요한 경우)\r\n      queryClient.refetchQueries({ \r\n        queryKey: ['mainCampaignProgressInformation'],\r\n        exact: false\r\n      });\r\n\r\n      // Call original onSuccess if provided\r\n      options?.onSuccess?.(data, deletedCampaignId, context);\r\n    },\r\n    onError: (error: ListManagerApiError, variables: number, context: unknown) => {\r\n      console.error('API Error (Delete):', error);\r\n      \r\n      // 사용자가 의도적으로 취소한 경우가 아니라면 에러 메시지 표시\r\n      if (error.message !== '사용자가 삭제를 취소했습니다.') {\r\n        customAlertService.error(\r\n          error.message || '캠페인 리스트 삭제에 실패했습니다.', \r\n          '오류'\r\n        );\r\n      }\r\n      \r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n\r\n  return mutation;\r\n};\r\n\r\nexport default useApiForCampaignListDelete;"],"names":[],"mappings":"AAAA,oFAAoF;;;;AAGpF;AACA;AACA;AAJA;AAAA;;;;;;AAMA,MAAM,8BAA8B,CAClC;;IAEA,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,MAAM,WAAW,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QAC3B,aAAa;YAAC;SAAqB;QACnC,UAAU;iEAAE,OAAO;gBACjB,mBAAmB;gBACnB,OAAO,IAAI;yEAAwB,CAAC,SAAS;wBAC3C,wKAAA,CAAA,qBAAkB,CAAC,IAAI,CAAC;4BACtB,SAAS;4BACT,OAAO;4BACP,MAAM;4BACN,OAAO;qFAAE;oCACP,IAAI;wCACF,4BAA4B;wCAC5B,MAAM,SAAS,MAAM,CAAA,GAAA,iKAAA,CAAA,yBAAsB,AAAD,EAAE;wCAC5C,QAAQ;oCACV,EAAE,OAAO,OAAO;wCACd,OAAO;oCACT;gCACF;;4BACA,QAAQ;qFAAE;oCACR,qBAAqB;oCACrB,sJAAA,CAAA,QAAK,CAAC,IAAI,CAAC,wBAAwB;wCACjC,WAAW;oCACb;gCACA,yCAAyC;gCAC3C;;wBACF;oBACF;;YACF;;QACA,SAAS;iEAAE,CAAC,MAAM,mBAAmB;gBACnC,QAAQ,GAAG,CAAC,0BAA0B;oBACpC,MAAM,KAAK,WAAW;oBACtB,SAAS,KAAK,UAAU;gBAC1B;gBAEA,sJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;gBAEd,6BAA6B;gBAC7B,wCAAwC;gBACxC,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAA0B;gBACvC;gBAEA,6DAA6D;gBAC7D,MAAM,sBAAsB,GAAG,+BAA+B;gBAE9D,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAmC;wBAAqB;qBAAkB;gBACvF;gBAEA,4BAA4B;gBAC5B,YAAY,cAAc,CAAC;oBACzB,UAAU;wBAAC;qBAAkC;oBAC7C,OAAO;gBACT;gBAEA,sCAAsC;gBACtC,SAAS,YAAY,MAAM,mBAAmB;YAChD;;QACA,OAAO;iEAAE,CAAC,OAA4B,WAAmB;gBACvD,QAAQ,KAAK,CAAC,uBAAuB;gBAErC,oCAAoC;gBACpC,IAAI,MAAM,OAAO,KAAK,oBAAoB;oBACxC,wKAAA,CAAA,qBAAkB,CAAC,KAAK,CACtB,MAAM,OAAO,IAAI,uBACjB;gBAEJ;gBAEA,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;IAEA,OAAO;AACT;GA/EM;;QAGgB,yLAAA,CAAA,iBAAc;QAEjB,iLAAA,CAAA,cAAW;;;uCA4Ef"}},
    {"offset": {"line": 1876, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1882, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/popups/BlackListCountPopup.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactNode } from 'react';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\nexport interface BlackListCountPopupProps {\r\n    campaignId?: string | number;\r\n    blackListCount?: number;\r\n    maxBlacklistCount?: number;\r\n    commonBlacklistCount?: number;\r\n    isOpen?: boolean;\r\n    onConfirm?: () => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\nconst BlackListCountPopup = ({\r\n    campaignId,\r\n    blackListCount = 0,\r\n    maxBlacklistCount = 1000000,\r\n    commonBlacklistCount = 0,\r\n    isOpen = false,\r\n    onConfirm = () => {},\r\n    onCancel\r\n}: BlackListCountPopupProps) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setIsLoading(true);\r\n            // 가짜 로딩 효과\r\n            setTimeout(() => {\r\n                setIsLoading(false);\r\n            }, 500);\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const content = (\r\n        <div \r\n            className=\"space-y-4\"\r\n            onClick={(e) => e.stopPropagation()}\r\n            onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }}\r\n        >\r\n            <div className=\"flex items-center gap-2 justify-between\">\r\n                <Label className=\"w-48\">캠페인 ID</Label>\r\n                <span>{campaignId}</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2 justify-between\">\r\n                <Label className=\"w-48\">블랙리스트 등록건수</Label>\r\n                {isLoading ? (\r\n                    <span>로딩 중...</span>\r\n                ) : (\r\n                    <span>{blackListCount.toLocaleString()}</span>\r\n                )}\r\n            </div>\r\n            <div className=\"flex items-center gap-2 justify-between\">\r\n                <Label className=\"w-48\">블랙리스트 MAX 등록 건수</Label>\r\n                {isLoading ? (\r\n                    <span>로딩 중...</span>\r\n                ) : (\r\n                    <span>{maxBlacklistCount.toLocaleString()}</span>\r\n                )}\r\n            </div>\r\n            <div className=\"flex items-center gap-2 justify-between\">\r\n                <Label className=\"w-48\">공통 적용된 블랙리스트 등록 건수</Label>\r\n                {isLoading ? (\r\n                    <span>로딩 중...</span>\r\n                ) : (\r\n                    <span>{commonBlacklistCount.toLocaleString()}</span>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n       \r\n        <CustomAlert\r\n            isOpen={isOpen}\r\n            title=\"블랙리스트 건수 조회\"\r\n            message={content}\r\n            onClose={onConfirm}\r\n            onCancle={onCancel}  // Changed from onCancel to onCancle\r\n            type=\"info\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default BlackListCountPopup;"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;AAYA,MAAM,sBAAsB,CAAC,EACzB,UAAU,EACV,iBAAiB,CAAC,EAClB,oBAAoB,OAAO,EAC3B,uBAAuB,CAAC,EACxB,SAAS,KAAK,EACd,YAAY,KAAO,CAAC,EACpB,QAAQ,EACe;;IACvB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;yCAAE;YACN,IAAI,QAAQ;gBACR,aAAa;gBACb,WAAW;gBACX;qDAAW;wBACP,aAAa;oBACjB;oDAAG;YACP;QACJ;wCAAG;QAAC;KAAO;IAEX,MAAM,wBACF,6LAAC;QACG,WAAU;QACV,SAAS,CAAC,IAAM,EAAE,eAAe;QACjC,eAAe,CAAC;YACZ,EAAE,cAAc;YAChB,EAAE,eAAe;QACrB;;0BAEA,6LAAC;gBAAI,WAAU;;kCACX,6LAAC,oIAAA,CAAA,QAAK;wBAAC,WAAU;kCAAO;;;;;;kCACxB,6LAAC;kCAAM;;;;;;;;;;;;0BAEX,6LAAC;gBAAI,WAAU;;kCACX,6LAAC,oIAAA,CAAA,QAAK;wBAAC,WAAU;kCAAO;;;;;;oBACvB,0BACG,6LAAC;kCAAK;;;;;6CAEN,6LAAC;kCAAM,eAAe,cAAc;;;;;;;;;;;;0BAG5C,6LAAC;gBAAI,WAAU;;kCACX,6LAAC,oIAAA,CAAA,QAAK;wBAAC,WAAU;kCAAO;;;;;;oBACvB,0BACG,6LAAC;kCAAK;;;;;6CAEN,6LAAC;kCAAM,kBAAkB,cAAc;;;;;;;;;;;;0BAG/C,6LAAC;gBAAI,WAAU;;kCACX,6LAAC,oIAAA,CAAA,QAAK;wBAAC,WAAU;kCAAO;;;;;;oBACvB,0BACG,6LAAC;kCAAK;;;;;6CAEN,6LAAC;kCAAM,qBAAqB,cAAc;;;;;;;;;;;;;;;;;;IAM1D,qBAEI,6LAAC,wJAAA,CAAA,UAAW;QACR,QAAQ;QACR,OAAM;QACN,SAAS;QACT,SAAS;QACT,UAAU;QACV,MAAK;;;;;;AAGjB;GAxEM;KAAA;uCA0ES"}},
    {"offset": {"line": 2061, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2067, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/mainCampaignManagerDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/fetchCampaignManagerUpdate.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CampaignInfoDeleteRequest, UpdateResponse } from '../types/campaignManagerIndex';\r\n\r\n// 캠페인 관리 삭제 요청\r\nexport const fetchCampaignManagerDelete = async (credentials: CampaignInfoDeleteRequest): Promise<UpdateResponse> => {\r\n  const campaignManagerDeleteRequestData = {\r\n    request_data: {      \r\n      tenant_id: credentials.tenant_id, \r\n      delete_dial_list: credentials.delete_dial_list\r\n    }\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.delete<UpdateResponse>(\r\n      'campaigns/'+credentials.campaign_id,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json' \r\n        },\r\n        data: campaignManagerDeleteRequestData \r\n      }\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"AAAA,mEAAmE;;;;AACnE;;AAIO,MAAM,6BAA6B,OAAO;IAC/C,MAAM,mCAAmC;QACvC,cAAc;YACZ,WAAW,YAAY,SAAS;YAChC,kBAAkB,YAAY,gBAAgB;QAChD;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,MAAM,CACzC,eAAa,YAAY,WAAW,EACpC;YACE,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM;QACR;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 2098, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2104, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForCampaignManagerDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForCampaignManagerDelete.ts\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { fetchCampaignManagerDelete } from '../api/mainCampaignManagerDelete';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { CampaignInfoDeleteRequest, UpdateResponse, CampaignApiError } from '../types/campaignManagerIndex';\r\n\r\nexport function useApiForCampaignManagerDelete(\r\n  options?: UseMutationOptions<UpdateResponse, CampaignApiError, CampaignInfoDeleteRequest>\r\n) {\r\n  const queryClient = useQueryClient();\r\n  return useMutation({\r\n    mutationKey: ['mainCampaignManagerDelete'],\r\n    mutationFn: fetchCampaignManagerDelete,\r\n    onSuccess: (data, variables, context) => {\r\n      console.log('API Response:', {\r\n        code: data.result_code,\r\n        message: data.result_msg,\r\n      });\r\n      options?.onSuccess?.(data, variables, context);\r\n\r\n    queryClient.invalidateQueries({ queryKey: [\"treeMenuDataForSideMenu\"] });\r\n\r\n    },\r\n    onError: (error: CampaignApiError, variables: CampaignInfoDeleteRequest, context: unknown) => {\r\n      // console.error('API Error:', error);\r\n      // toast.error(error.message || '데이터 로드에 실패했습니다.');\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,uEAAuE;;;;AAEvE;AADA;AAAA;;;;AAKO,SAAS,+BACd,OAAyF;;IAEzF,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IACjC,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAA4B;QAC1C,YAAY,yKAAA,CAAA,6BAA0B;QACtC,SAAS;0DAAE,CAAC,MAAM,WAAW;gBAC3B,QAAQ,GAAG,CAAC,iBAAiB;oBAC3B,MAAM,KAAK,WAAW;oBACtB,SAAS,KAAK,UAAU;gBAC1B;gBACA,SAAS,YAAY,MAAM,WAAW;gBAExC,YAAY,iBAAiB,CAAC;oBAAE,UAAU;wBAAC;qBAA0B;gBAAC;YAEtE;;QACA,OAAO;0DAAE,CAAC,OAAyB,WAAsC;gBACvE,sCAAsC;gBACtC,mDAAmD;gBACnD,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GAvBgB;;QAGM,yLAAA,CAAA,iBAAc;QAC3B,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 2154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2160, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/mainCampaignScheduleDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/fetchCampaignScheduleDelete.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CampaignInfoDeleteRequest, UpdateResponse } from '../types/campaignManagerIndex';\r\n\r\n// 캠페인 스케줄 삭제 요청\r\nexport const fetchCampaignScheduleDelete = async (credentials: CampaignInfoDeleteRequest): Promise<UpdateResponse> => {\r\n  console.log(\"tenant_id ???????????????????????????\", credentials.tenant_id);\r\n  const campaignScheduleDeleteRequestData = {\r\n    request_data: {      \r\n      tenant_id: credentials.tenant_id\r\n    }\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.delete<UpdateResponse>(\r\n      'campaigns/'+credentials.campaign_id+'/schedule', \r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json' \r\n        },\r\n        data: campaignScheduleDeleteRequestData \r\n      }\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"AAAA,oEAAoE;;;;AACpE;;AAIO,MAAM,8BAA8B,OAAO;IAChD,QAAQ,GAAG,CAAC,yCAAyC,YAAY,SAAS;IAC1E,MAAM,oCAAoC;QACxC,cAAc;YACZ,WAAW,YAAY,SAAS;QAClC;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,MAAM,CACzC,eAAa,YAAY,WAAW,GAAC,aACrC;YACE,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM;QACR;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 2191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2197, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForCampaignScheduleDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForCampaignScheduleUpdate.ts\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport { fetchCampaignScheduleDelete } from '../api/mainCampaignScheduleDelete';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { CampaignInfoDeleteRequest, UpdateResponse, CampaignApiError } from '../types/campaignManagerIndex';\r\n\r\nexport function useApiForCampaignScheduleDelete(\r\n  options?: UseMutationOptions<UpdateResponse, CampaignApiError, CampaignInfoDeleteRequest>\r\n) {\r\n  return useMutation({\r\n    mutationKey: ['mainCampaignScheduleDelete'],\r\n    mutationFn: fetchCampaignScheduleDelete,\r\n    onSuccess: (data, variables, context) => {\r\n      console.log('API Response:', {\r\n        code: data.result_code,\r\n        message: data.result_msg,\r\n      });\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: CampaignApiError, variables: CampaignInfoDeleteRequest, context: unknown) => {\r\n      // console.error('API Error:', error);\r\n      // toast.error(error.message || '데이터 로드에 실패했습니다.');\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,wEAAwE;;;;AAExE;AADA;;;;AAKO,SAAS,gCACd,OAAyF;;IAEzF,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAA6B;QAC3C,YAAY,0KAAA,CAAA,8BAA2B;QACvC,SAAS;2DAAE,CAAC,MAAM,WAAW;gBAC3B,QAAQ,GAAG,CAAC,iBAAiB;oBAC3B,MAAM,KAAK,WAAW;oBACtB,SAAS,KAAK,UAAU;gBAC1B;gBACA,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;2DAAE,CAAC,OAAyB,WAAsC;gBACvE,sCAAsC;gBACtC,mDAAmD;gBACnD,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GAnBgB;;QAGP,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 2239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2245, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/mainCampaignSkillUpdate.ts"],"sourcesContent":["// src/features/campaignManager/api/mainCampaignSkillUpdate.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CampaignSkillUpdateRequest, UpdateResponse } from '../types/campaignManagerIndex';\r\n\r\n// 캠페인 스킬 수정 요청\r\nexport const fetchCampaignSkillUpdate = async (credentials: CampaignSkillUpdateRequest): Promise<UpdateResponse> => {\r\n  const campaignSkillListSearchRequestData = {\r\n    request_data: {      \r\n      skill_id: credentials.skill_id, \r\n    }\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.put<UpdateResponse>(\r\n      'campaigns/'+credentials.campaign_id+'/skill', \r\n      campaignSkillListSearchRequestData\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"AAAA,8DAA8D;;;;AAC9D;;AAIO,MAAM,2BAA2B,OAAO;IAC7C,MAAM,qCAAqC;QACzC,cAAc;YACZ,UAAU,YAAY,QAAQ;QAChC;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,GAAG,CACtC,eAAa,YAAY,WAAW,GAAC,UACrC;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 2270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2276, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForCampaignSkillUpdate.ts"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForCampaignSkillUpdate.ts\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport { fetchCampaignSkillUpdate } from '../api/mainCampaignSkillUpdate';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { CampaignSkillUpdateRequest, UpdateResponse, CampaignApiError } from '../types/campaignManagerIndex';\r\n\r\nexport function useApiForCampaignSkillUpdate(\r\n  options?: UseMutationOptions<UpdateResponse, CampaignApiError, CampaignSkillUpdateRequest>\r\n) {\r\n  return useMutation({\r\n    mutationKey: ['mainCampaignSkillUpdate'],\r\n    mutationFn: fetchCampaignSkillUpdate,\r\n    onSuccess: (data, variables, context) => {\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: CampaignApiError, variables: CampaignSkillUpdateRequest, context: unknown) => {\r\n      // console.error('API Error:', error);\r\n      // toast.error(error.message || '데이터 로드에 실패했습니다.');\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,qEAAqE;;;;AAErE;AADA;;;;AAKO,SAAS,6BACd,OAA0F;;IAE1F,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAA0B;QACxC,YAAY,uKAAA,CAAA,2BAAwB;QACpC,SAAS;wDAAE,CAAC,MAAM,WAAW;gBAC3B,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;wDAAE,CAAC,OAAyB,WAAuC;gBACxE,sCAAsC;gBACtC,mDAAmD;gBACnD,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GAfgB;;QAGP,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 2314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2320, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/mainCallingNumberDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/fetchCallingNumberDelete.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CallingNumberListDataResponse, UpdateResponse } from '../types/campaignManagerIndex';\r\n\r\n// 캠페인 발신번호 삭제 요청\r\nexport const fetchCallingNumberDelete = async (credentials: CallingNumberListDataResponse): Promise<UpdateResponse> => {\r\n  const campaignScheduleUpdateRequestData = {\r\n    request_data: {      \r\n      calling_number: credentials.calling_number\r\n    }\r\n  };\r\n  \r\n  try {\r\n    const { data } = await axiosInstance.delete<UpdateResponse>(\r\n      'campaigns/' + credentials.campaign_id + '/calling-number',\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json' \r\n        },\r\n        data: campaignScheduleUpdateRequestData \r\n      }\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"AAAA,iEAAiE;;;;AACjE;;AAIO,MAAM,2BAA2B,OAAO;IAC7C,MAAM,oCAAoC;QACxC,cAAc;YACZ,gBAAgB,YAAY,cAAc;QAC5C;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,MAAM,CACzC,eAAe,YAAY,WAAW,GAAG,mBACzC;YACE,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM;QACR;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 2350, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2356, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/mainReservedCallDelete.ts"],"sourcesContent":["// src/features/campaignManager/hooks/fetchReservedCallDelete.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { CampaignInfoDeleteRequest, UpdateResponse } from '../types/campaignManagerIndex';\r\n\r\n// 캠페인 예약호 마스터 정보 삭제 요청\r\nexport const fetchReservedCallDelete = async (credentials: CampaignInfoDeleteRequest): Promise<UpdateResponse> => {\r\n  const campaignReservedCallDeleteRequestData = {\r\n    request_data: {      \r\n      tenant_id: credentials.tenant_id\r\n    }\r\n  };\r\n  \r\n  try {\r\n    const { data } = await axiosInstance.delete<UpdateResponse>(\r\n      'campaigns/' + credentials.campaign_id + '/reserved-call',\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json' \r\n        },\r\n        data: campaignReservedCallDeleteRequestData \r\n      }\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n  }\r\n};"],"names":[],"mappings":"AAAA,gEAAgE;;;;AAChE;;AAIO,MAAM,0BAA0B,OAAO;IAC5C,MAAM,wCAAwC;QAC5C,cAAc;YACZ,WAAW,YAAY,SAAS;QAClC;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,MAAM,CACzC,eAAe,YAAY,WAAW,GAAG,kBACzC;YACE,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM;QACR;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,MAAM,QAAQ,EAAE,MAAM,cAAc,OAAO,MAAM,QAAQ,EAAE,MAAM,cAAc;IACjG;AACF"}},
    {"offset": {"line": 2386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2392, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/IDialogButtonForCampaingDelete.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport CommonButton from '@/components/shared/CommonButton';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { useApiForCampaignManagerDelete } from '@/features/campaignManager/hooks/useApiForCampaignManagerDelete';\r\nimport { useApiForCampaignScheduleDelete } from '@/features/campaignManager/hooks/useApiForCampaignScheduleDelete';\r\nimport { useApiForCampaignSkillUpdate } from '@/features/campaignManager/hooks/useApiForCampaignSkillUpdate';\r\nimport { useAuthStore, useCampainManagerStore } from '@/store';\r\nimport { fetchCallingNumberDelete } from '@/features/campaignManager/api/mainCallingNumberDelete';\r\nimport { fetchReservedCallDelete } from '@/features/campaignManager/api/mainReservedCallDelete';\r\nimport { useSideMenuCampaignGroupTabStore } from '@/store/storeForSideMenuCampaignGroupTab';\r\nimport { toast } from 'react-toastify';\r\nimport { useTabStore } from '@/store/tabStore';\r\n\r\ninterface Props {\r\n  campaignId?: string | number;\r\n  campaignName?: string;\r\n  variant?: 'outline' | 'destructive' | 'default' | 'secondary' | 'ghost' | 'link';\r\n  size?: 'default' | 'sm' | 'lg' | 'icon';\r\n  className?: string;\r\n  buttonText?: string;\r\n  isDisabled?: boolean;\r\n  isOpen?: boolean;\r\n  tenant_id?: number;\r\n  onOpenChange?: (open: boolean) => void;\r\n}\r\n\r\nconst IDialogButtonForCampaingDelete: React.FC<Props> = ({\r\n  campaignId,\r\n  campaignName = '캠페인',\r\n  variant = 'destructive',\r\n  size = 'sm',\r\n  className = '',\r\n  buttonText = '삭제',\r\n  isDisabled = false,\r\n  isOpen: externalIsOpen,\r\n  onOpenChange,\r\n  tenant_id,\r\n}) => {\r\n  // 외부에서 isOpen prop을 전달하지 않으면 내부 상태로 관리\r\n  const [internalIsOpen, setInternalIsOpen] = useState(false);\r\n  const isDialogOpen = externalIsOpen !== undefined ? externalIsOpen : internalIsOpen;\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  // const { tenant_id } = useAuthStore();\r\n\r\n  console.log('tenant_id !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', tenant_id);\r\n  \r\n  \r\n  // 스토어 및 API 훅들\r\n  const { refetchTreeDataForCampaignGroupTab } = useSideMenuCampaignGroupTabStore();\r\n  const { callingNumbers, campaignSkills } = useCampainManagerStore();\r\n  const { activeTabKey, closeAllTabs, rows, removeTab } = useTabStore();\r\n\r\n  const { mutate: updateCampaignSkill } = useApiForCampaignSkillUpdate({\r\n    onSuccess: () => {\r\n      console.log('캠페인 스킬 할당 해제 성공');\r\n    },\r\n    onError: (error) => {\r\n      console.error('캠페인 스킬 할당 해제 실패:', error);\r\n    }\r\n  });\r\n\r\n  const { mutate: deleteCampaignSchedule } = useApiForCampaignScheduleDelete({\r\n    onSuccess: (data) => {\r\n      // 스킬 해제\r\n      const relatedSkills = campaignSkills\r\n        .filter((skill) => skill.campaign_id === Number(campaignId))\r\n        .map((data) => data.skill_id);\r\n      if (relatedSkills.length > 0) {\r\n        updateCampaignSkill({\r\n          campaign_id: Number(campaignId),\r\n          skill_id: []\r\n        });\r\n      }\r\n\r\n      // 발신번호 삭제\r\n      const relatedCallingNumbers = callingNumbers\r\n        .filter((callingNumber) => callingNumber.campaign_id === Number(campaignId))\r\n        .map((data) => data.calling_number);\r\n      if (relatedCallingNumbers.length > 0) {\r\n        fetchCallingNumberDelete({\r\n          campaign_id: Number(campaignId),\r\n          calling_number: relatedCallingNumbers.join(',')\r\n        });\r\n      }\r\n\r\n      // 예약콜 제한 삭제\r\n      fetchReservedCallDelete({\r\n        campaign_id: Number(campaignId),\r\n        tenant_id: Number(tenant_id),\r\n        delete_dial_list: 1\r\n      });\r\n\r\n      // 트리 데이터 리패치 및 탭 닫기\r\n      refetchTreeDataForCampaignGroupTab();\r\n      // closeCurrentTab();\r\n      const { rowId, sectionId } = findCurrentTabLocation();\r\n      removeTab(2,\"2\");\r\n    }\r\n  });\r\n\r\n  const { mutate: deleteCampaign, isPending } = useApiForCampaignManagerDelete({\r\n    onSuccess: (data) => {\r\n      console.log('캠페인 삭제 성공:', data);\r\n      toast.success(`'${campaignName}' 캠페인이 삭제되었습니다.`);\r\n\r\n      // 삭제 후 스케줄 삭제 등 처리\r\n      deleteCampaignSchedule({\r\n        campaign_id: Number(campaignId),\r\n        tenant_id: Number(tenant_id),\r\n        delete_dial_list: 1\r\n      });\r\n\r\n      closeDialog();\r\n      setIsDeleting(false);\r\n    },\r\n    onError: (error) => {\r\n      console.error('캠페인 삭제 실패:', error);\r\n      toast.error(`캠페인 삭제에 실패했습니다: ${error.message || '알 수 없는 오류'}`);\r\n      setIsDeleting(false);\r\n    }\r\n  });\r\n\r\n  const findCurrentTabLocation = () => {\r\n    for (const row of rows) {\r\n      for (const section of row.sections) {\r\n        if (section.tabs.some(tab => tab.uniqueKey === activeTabKey)) {\r\n          return { rowId: row.id, sectionId: section.id };\r\n        }\r\n      }\r\n    }\r\n    return { rowId: 'row-1', sectionId: 'default' };\r\n  };\r\n\r\n  const closeCurrentTab = () => {\r\n    if (!activeTabKey) return;\r\n    const { rowId, sectionId } = findCurrentTabLocation();\r\n    setTimeout(() => {\r\n      closeAllTabs(rowId, sectionId);\r\n    }, 100);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (!campaignId) {\r\n      toast.error('삭제할 캠페인 정보가 없습니다.');\r\n      return;\r\n    }\r\n    setIsDeleting(true);\r\n    deleteCampaign({\r\n      campaign_id: Number(campaignId),\r\n      tenant_id: Number(tenant_id),\r\n      delete_dial_list: 1\r\n    });\r\n\r\n    refetchTreeDataForCampaignGroupTab();\r\n  };\r\n\r\n  const openDialog = () => {\r\n    if (onOpenChange) {\r\n      onOpenChange(true);\r\n    } else {\r\n      setInternalIsOpen(true);\r\n    }\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    if (onOpenChange) {\r\n      onOpenChange(false);\r\n    } else {\r\n      setInternalIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleEscapeKey = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        closeDialog();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEscapeKey);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEscapeKey);\r\n    };\r\n  }, []);\r\n\r\n  // const alertMessage = `캠페인 아이디: ${campaignId}\\n캠페인 이름: ${campaignName}\\n삭제된 캠페인은 복구가 불가능합니다.\\n캠페인을 삭제하시겠습니까?\\n이 작업은 되돌릴 수 없습니다.`;\r\n  const alertMessage = `캠페인 아이디: ${campaignId} 캠페인 이름: ${campaignName} 삭제된 캠페인은 복구가 불가능합니다 캠페인을 삭제하시겠습니까?`;\r\n\r\n  return (\r\n    <>\r\n      <CommonButton\r\n        variant={variant}\r\n        size={size}\r\n        className={className}\r\n        onClick={openDialog}\r\n        disabled={isDisabled || isPending}\r\n      >\r\n        {buttonText}\r\n      </CommonButton>\r\n\r\n      {isDialogOpen && (\r\n        <CustomAlert\r\n          isOpen={isDialogOpen}\r\n          title=\"캠페인 삭제\"\r\n          message={alertMessage}\r\n          onClose={handleDelete}\r\n          onCancle={closeDialog}\r\n          type=\"1\"\r\n          confirmDisabled={isDeleting}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IDialogButtonForCampaingDelete;\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;;AARA;;;;;;;;;;;;;AA4BA,MAAM,iCAAkD,CAAC,EACvD,UAAU,EACV,eAAe,KAAK,EACpB,UAAU,aAAa,EACvB,OAAO,IAAI,EACX,YAAY,EAAE,EACd,aAAa,IAAI,EACjB,aAAa,KAAK,EAClB,QAAQ,cAAc,EACtB,YAAY,EACZ,SAAS,EACV;;IACC,uCAAuC;IACvC,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,eAAe,mBAAmB,YAAY,iBAAiB;IACrE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,wCAAwC;IAExC,QAAQ,GAAG,CAAC,+CAA+C;IAG3D,eAAe;IACf,MAAM,EAAE,kCAAkC,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,mCAAgC,AAAD;IAC9E,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,CAAA,GAAA,sIAAA,CAAA,yBAAsB,AAAD;IAChE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;IAElE,MAAM,EAAE,QAAQ,mBAAmB,EAAE,GAAG,CAAA,GAAA,8KAAA,CAAA,+BAA4B,AAAD,EAAE;QACnE,SAAS;2EAAE;gBACT,QAAQ,GAAG,CAAC;YACd;;QACA,OAAO;2EAAE,CAAC;gBACR,QAAQ,KAAK,CAAC,oBAAoB;YACpC;;IACF;IAEA,MAAM,EAAE,QAAQ,sBAAsB,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,kCAA+B,AAAD,EAAE;QACzE,SAAS;8EAAE,CAAC;gBACV,QAAQ;gBACR,MAAM,gBAAgB,eACnB,MAAM;oGAAC,CAAC,QAAU,MAAM,WAAW,KAAK,OAAO;mGAC/C,GAAG;oGAAC,CAAC,OAAS,KAAK,QAAQ;;gBAC9B,IAAI,cAAc,MAAM,GAAG,GAAG;oBAC5B,oBAAoB;wBAClB,aAAa,OAAO;wBACpB,UAAU,EAAE;oBACd;gBACF;gBAEA,UAAU;gBACV,MAAM,wBAAwB,eAC3B,MAAM;4GAAC,CAAC,gBAAkB,cAAc,WAAW,KAAK,OAAO;2GAC/D,GAAG;4GAAC,CAAC,OAAS,KAAK,cAAc;;gBACpC,IAAI,sBAAsB,MAAM,GAAG,GAAG;oBACpC,CAAA,GAAA,uKAAA,CAAA,2BAAwB,AAAD,EAAE;wBACvB,aAAa,OAAO;wBACpB,gBAAgB,sBAAsB,IAAI,CAAC;oBAC7C;gBACF;gBAEA,YAAY;gBACZ,CAAA,GAAA,sKAAA,CAAA,0BAAuB,AAAD,EAAE;oBACtB,aAAa,OAAO;oBACpB,WAAW,OAAO;oBAClB,kBAAkB;gBACpB;gBAEA,oBAAoB;gBACpB;gBACA,qBAAqB;gBACrB,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG;gBAC7B,UAAU,GAAE;YACd;;IACF;IAEA,MAAM,EAAE,QAAQ,cAAc,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,gLAAA,CAAA,iCAA8B,AAAD,EAAE;QAC3E,SAAS;6EAAE,CAAC;gBACV,QAAQ,GAAG,CAAC,cAAc;gBAC1B,sJAAA,CAAA,QAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,eAAe,CAAC;gBAE/C,mBAAmB;gBACnB,uBAAuB;oBACrB,aAAa,OAAO;oBACpB,WAAW,OAAO;oBAClB,kBAAkB;gBACpB;gBAEA;gBACA,cAAc;YAChB;;QACA,OAAO;6EAAE,CAAC;gBACR,QAAQ,KAAK,CAAC,cAAc;gBAC5B,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,MAAM,OAAO,IAAI,aAAa;gBAC7D,cAAc;YAChB;;IACF;IAEA,MAAM,yBAAyB;QAC7B,KAAK,MAAM,OAAO,KAAM;YACtB,KAAK,MAAM,WAAW,IAAI,QAAQ,CAAE;gBAClC,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAA,MAAO,IAAI,SAAS,KAAK,eAAe;oBAC5D,OAAO;wBAAE,OAAO,IAAI,EAAE;wBAAE,WAAW,QAAQ,EAAE;oBAAC;gBAChD;YACF;QACF;QACA,OAAO;YAAE,OAAO;YAAS,WAAW;QAAU;IAChD;IAEA,MAAM,kBAAkB;QACtB,IAAI,CAAC,cAAc;QACnB,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG;QAC7B,WAAW;YACT,aAAa,OAAO;QACtB,GAAG;IACL;IAEA,MAAM,eAAe;QACnB,IAAI,CAAC,YAAY;YACf,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ;QACF;QACA,cAAc;QACd,eAAe;YACb,aAAa,OAAO;YACpB,WAAW,OAAO;YAClB,kBAAkB;QACpB;QAEA;IACF;IAEA,MAAM,aAAa;QACjB,IAAI,cAAc;YAChB,aAAa;QACf,OAAO;YACL,kBAAkB;QACpB;IACF;IAEA,MAAM,cAAc;QAClB,IAAI,cAAc;YAChB,aAAa;QACf,OAAO;YACL,kBAAkB;QACpB;IACF;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oDAAE;YACR,MAAM;4EAAkB,CAAC;oBACvB,IAAI,MAAM,GAAG,KAAK,UAAU;wBAC1B;oBACF;gBACF;;YACA,OAAO,gBAAgB,CAAC,WAAW;YACnC;4DAAO;oBACL,OAAO,mBAAmB,CAAC,WAAW;gBACxC;;QACF;mDAAG,EAAE;IAEL,mIAAmI;IACnI,MAAM,eAAe,CAAC,SAAS,EAAE,WAAW,SAAS,EAAE,aAAa,mCAAmC,CAAC;IAExG,qBACE;;0BACE,6LAAC,wJAAA,CAAA,UAAY;gBACX,SAAS;gBACT,MAAM;gBACN,WAAW;gBACX,SAAS;gBACT,UAAU,cAAc;0BAEvB;;;;;;YAGF,8BACC,6LAAC,wJAAA,CAAA,UAAW;gBACV,QAAQ;gBACR,OAAM;gBACN,SAAS;gBACT,SAAS;gBACT,UAAU;gBACV,MAAK;gBACL,iBAAiB;;;;;;;;AAK3B;GA1LM;;QAsB2C,mJAAA,CAAA,mCAAgC;QACpC,sIAAA,CAAA,yBAAsB;QACT,2HAAA,CAAA,cAAW;QAE3B,8KAAA,CAAA,+BAA4B;QASzB,iLAAA,CAAA,kCAA+B;QAuC5B,gLAAA,CAAA,iCAA8B;;;KA1ExE;uCA4LS"}},
    {"offset": {"line": 2628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2634, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenuForCampaignForCampaignTab.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useRef, JSX, useEffect } from \"react\";\r\nimport {\r\n  ContextMenu,\r\n  ContextMenuContent,\r\n  ContextMenuItem,\r\n  ContextMenuSub,\r\n  ContextMenuSubContent,\r\n  ContextMenuSubTrigger,\r\n  ContextMenuTrigger,\r\n  ContextMenuSeparator,\r\n} from \"@/components/ui/context-menu\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { Check } from \"lucide-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport Image from \"next/image\";\r\n\r\nimport { useAvailableMenuStore } from \"@/store/useAvailableMenuStore\";\r\nimport { useMainStore } from \"@/store/mainStore\";\r\nimport { useAuthStore } from \"@/store/authStore\";\r\nimport { useApiForMain } from \"@/features/auth/hooks/useApiForMain\";\r\nimport { useApiForCampaignStatusUpdate } from \"@/features/campaignManager/hooks/useApiForCampaignStatusUpdate\";\r\nimport { useApiForCampaignBlacklistCount } from \"@/features/listManager/hooks/useApiForCampaignBlacklistCount\";\r\nimport useApiForCampaignListDelete from \"@/features/listManager/hooks/useApiForCampaignListDelete\";\r\nimport BlackListCountPopup from \"@/features/campaignManager/components/popups/BlackListCountPopup\";\r\nimport CustomAlert, { CustomAlertRequest } from \"@/components/shared/layout/CustomAlert\";\r\nimport IDialogButtonForCampaingDelete from \"./dialog/IDialogButtonForCampaingDelete\";\r\n\r\n\r\nexport type CampaignStatus = \"started\" | \"pending\" | \"stopped\";\r\n\r\nexport const getStatusIcon = (status?: string) => {\r\n  switch (status) {\r\n    case \"started\":\r\n      return \"/sidebar-menu/tree_play.svg\";\r\n    case \"pending\":\r\n      return \"/sidebar-menu/tree_pause.svg\";\r\n    case \"stopped\":\r\n      return \"/sidebar-menu/tree_stop.svg\";\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst errorMessage: CustomAlertRequest = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '캠페인',\r\n  type: '1',\r\n  onClose: () => { },\r\n  onCancle: () => { },\r\n};\r\n\r\ninterface ContextMenuForTreeNodeProps {\r\n  children: React.ReactNode;\r\n  item: {\r\n    id: string;\r\n    label: string;\r\n    type: any;\r\n    status: CampaignStatus;\r\n  };\r\n  tenantIdForCampaignTab: any;\r\n  onEdit: () => void;\r\n  onMonitor: () => void;\r\n  onHandleCampaignCopy: () => void;\r\n}\r\n\r\ninterface MenuItemDefinition {\r\n  menuId?: number;\r\n  key: string;\r\n  title?: string;\r\n  onClick?: () => void;\r\n  render?: () => JSX.Element;\r\n  type?: \"separator\";\r\n  condition?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function ContextMenuForCampaignForCampaignTab({\r\n  children,\r\n  item,\r\n  onEdit,\r\n  onMonitor,\r\n  tenantIdForCampaignTab,\r\n  onHandleCampaignCopy,\r\n}: ContextMenuForTreeNodeProps) {\r\n  const isFolder = item.type === \"folder\";\r\n  const { simulateHeaderMenuClick, setCampaignIdForUpdateFromSideMenu, addTab, addMultiTab } = useTabStore();\r\n  const [isBlacklistPopupOpen, setIsBlacklistPopupOpen] = useState(false);\r\n  const [blackListCount, setBlackListCount] = useState<number>(0);\r\n  const [maxBlacklistCount, setMaxBlacklistCount] = useState<number>(1000000);\r\n  const [commonBlacklistCount, setCommonBlacklistCount] = useState<number>(0);\r\n\r\n  const preventCloseRef = useRef(false);\r\n  const [alertState, setAlertState] = useState<CustomAlertRequest>(errorMessage);\r\n  const { availableCampaignTabCampaignContextMenuIds } = useAvailableMenuStore();\r\n\r\n  const { tenant_id, role_id, session_key } = useAuthStore();\r\n  const { campaigns, setCampaigns, selectedCampaign, setSelectedCampaign } = useMainStore();\r\n\r\n  // Get current status directly from the campaigns store to ensure we always have the latest status\r\n  const currentCampaign = campaigns?.find((c: any) => c.campaign_id === Number(item.id));\r\n  const [displayStatus, setDisplayStatus] = useState<CampaignStatus>(item.status);\r\n\r\n  // Update the displayed status whenever the item prop or campaigns state changes\r\n  useEffect(() => {\r\n    if (currentCampaign) {\r\n      const statusMap: Record<number, CampaignStatus> = {\r\n        1: \"started\",\r\n        2: \"pending\", \r\n        3: \"stopped\"\r\n      };\r\n      const updatedStatus = statusMap[currentCampaign.campaign_status] || item.status;\r\n      setDisplayStatus(updatedStatus);\r\n    } else {\r\n      setDisplayStatus(item.status);\r\n    }\r\n  }, [currentCampaign, item.status, campaigns]);\r\n\r\n  // ====== API HOOKS ======\r\n  const { mutate: fetchMain } = useApiForMain({\r\n    onSuccess: (data) => {\r\n      setCampaigns(data.result_data);\r\n      setSelectedCampaign(\r\n        data.result_data.find(\r\n          (c: any) => c.campaign_id === selectedCampaign?.campaign_id\r\n        ) || null\r\n      );\r\n    },\r\n  });\r\n\r\n  const updateCampaignStatusMutation = useApiForCampaignStatusUpdate({\r\n    onSuccess: () => {\r\n      preventCloseRef.current = true;\r\n      // Refresh campaigns data after status update\r\n      fetchMain({ session_key, tenant_id });\r\n    },\r\n    onError: (error) => {\r\n      toast.error(error.message || \"상태 변경 중 오류가 발생했습니다.\");\r\n    },\r\n  });\r\n\r\n  const { mutate: deleteCampaignList } = useApiForCampaignListDelete({});\r\n  const { mutate: fetchCampaignBlacklistCount } = useApiForCampaignBlacklistCount({\r\n    onSuccess: (data) => {\r\n      setBlackListCount(data.result_data.blacklist_count);\r\n      setMaxBlacklistCount(data.result_data.max_count);\r\n      setCommonBlacklistCount(data.result_data.common_count);\r\n      setTimeout(() => {\r\n        setIsBlacklistPopupOpen(true);\r\n      }, 100);\r\n    },\r\n  });\r\n\r\n  // ====== HELPER FUNCTIONS ======\r\n  const statusInfo = {\r\n    started: { label: \"시작\", color: \"#22c55e\" },\r\n    pending: { label: \"멈춤\", color: \"#eab308\" },\r\n    stopped: { label: \"중지\", color: \"#ef4444\" },\r\n  };\r\n\r\n  const getStatusNumber = (status: CampaignStatus): number => {\r\n    switch (status) {\r\n      case \"started\":\r\n        return 1;\r\n      case \"pending\":\r\n        return 2;\r\n      case \"stopped\":\r\n        return 3;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  const handleEditMenuClick = () => {\r\n    simulateHeaderMenuClick(2);\r\n    setCampaignIdForUpdateFromSideMenu(item.id);\r\n  };\r\n\r\n  const handleProgressInfoClick = (campaignId: any, campaignName: string) => {\r\n    const uniqueKey = `progress-info-${campaignId}-${Date.now()}`;\r\n    addMultiTab({\r\n      id: 21,\r\n      uniqueKey: uniqueKey,\r\n      title: `캠페인 진행정보 - ${campaignName}`,\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n      campaignId: campaignId,\r\n    });\r\n  };\r\n\r\n  const handleRebroadcastClick = (campaignId: any) => {\r\n    setCampaignIdForUpdateFromSideMenu(campaignId);\r\n    addTab({\r\n      id: 20,\r\n      uniqueKey: '20',\r\n      title: '재발신 설정',\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n    });\r\n  };\r\n\r\n  const handleMonitorClick = (tenantIdForCampaignTab: any, campaignId: any, campaignName: string) => {\r\n    console.log(\"tenantId 확인 at 캠페인탭 : \", tenantIdForCampaignTab);\r\n\r\n    const uniqueKey = `monitor-${Date.now()}`;\r\n    addMultiTab({\r\n      id: 22,\r\n      uniqueKey: uniqueKey,\r\n      title: `상담사 상태 모니터 - ${campaignName}`,\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n      campaignId: campaignId,\r\n      params: {\r\n        sessionKey: session_key,\r\n        campaignId: campaignId,\r\n        tenantId: tenantIdForCampaignTab,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleCampaignListDelete = (campaignId: any) => {\r\n    if (displayStatus !== \"stopped\") {\r\n      toast.error(\"캠페인이 중지 상태일 때만 리스트를 삭제할 수 있습니다.\");\r\n      return;\r\n    }\r\n    deleteCampaignList(campaignId);\r\n  };\r\n\r\n  const handleCampaingProgressUpdate = async (status: CampaignStatus) => {\r\n    if (displayStatus === status || updateCampaignStatusMutation.isPending) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      preventCloseRef.current = true;\r\n      // Set optimistic update for better UX\r\n      setDisplayStatus(status);\r\n      \r\n      await updateCampaignStatusMutation.mutateAsync({\r\n        campaign_id: Number(item.id),\r\n        campaign_status: getStatusNumber(status),\r\n      });\r\n      \r\n      // The fetchMain will be called in onSuccess callback\r\n    } catch (error) {\r\n      // Revert to the actual status if there's an error\r\n      if (currentCampaign) {\r\n        const statusMap: Record<number, CampaignStatus> = {\r\n          1: \"started\",\r\n          2: \"pending\", \r\n          3: \"stopped\"\r\n        };\r\n        setDisplayStatus(statusMap[currentCampaign.campaign_status] || item.status);\r\n      } else {\r\n        setDisplayStatus(item.status);\r\n      }\r\n      \r\n      console.error('Error changing campaign status:', {\r\n        campaignId: item.id,\r\n        campaignName: item.label,\r\n        attemptedStatus: status,\r\n        error: error,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleBlacklistCountCheckClick = () => {\r\n    fetchCampaignBlacklistCount(Number(item.id));\r\n  };\r\n\r\n  // ====== SUB MENU FOR STATUS ======\r\n  const renderStatusSubMenu = () => (\r\n    <ContextMenuSub>\r\n      <ContextMenuSubTrigger\r\n        className=\"flex items-center text-sm\"\r\n        onPointerDown={() => {\r\n          preventCloseRef.current = false;\r\n        }}\r\n      >\r\n        <span className=\"flex items-center\">\r\n          시작구분:\r\n          <span className=\"ml-1 flex items-center\">\r\n            <div className=\"w-4 h-4 mr-1\">\r\n              <Image\r\n                src={getStatusIcon(displayStatus) || ''}\r\n                alt={displayStatus}\r\n                width={16}\r\n                height={16}\r\n              />\r\n            </div>\r\n            {statusInfo[displayStatus].label}\r\n          </span>\r\n        </span>\r\n      </ContextMenuSubTrigger>\r\n      <ContextMenuSubContent\r\n        className=\"min-w-[120px] p-1\"\r\n        onPointerDownOutside={(e) => {\r\n          if (preventCloseRef.current) {\r\n            e.preventDefault();\r\n            preventCloseRef.current = false;\r\n          }\r\n        }}\r\n      >\r\n        {(Object.keys(statusInfo) as Array<CampaignStatus>).map((status) => (\r\n          <ContextMenuItem\r\n            key={status}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              handleCampaingProgressUpdate(status);\r\n              preventCloseRef.current = true;\r\n            }}\r\n            className={cn(\r\n              \"flex items-center justify-between text-sm px-2 py-1.5\",\r\n              displayStatus === status ? \"bg-gray-50\" : \"\",\r\n              updateCampaignStatusMutation.isPending ? \"opacity-70\" : \"\"\r\n            )}\r\n            disabled={updateCampaignStatusMutation.isPending}\r\n          >\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-4 h-4 mr-2\">\r\n                <Image\r\n                  src={getStatusIcon(status) || ''}\r\n                  alt={status}\r\n                  width={16}\r\n                  height={16}\r\n                />\r\n              </div>\r\n              <span>{statusInfo[status].label}</span>\r\n            </div>\r\n            {displayStatus === status && (\r\n              <Check className=\"h-4 w-4 text-green-500\" />\r\n            )}\r\n          </ContextMenuItem>\r\n        ))}\r\n      </ContextMenuSubContent>\r\n    </ContextMenuSub>\r\n  );\r\n\r\n  // ====== MAIN MENU ======\r\n  const mainMenuItems: MenuItemDefinition[] = [\r\n    {\r\n      key: \"edit\",\r\n      title: \"캠페인 수정\",\r\n      onClick: handleEditMenuClick,\r\n      menuId: 19,\r\n    },\r\n    {\r\n      key: \"status\",\r\n      render: renderStatusSubMenu,\r\n      menuId: 20,\r\n    },\r\n    {\r\n      key: \"progress\",\r\n      title: \"캠페인 진행정보\",\r\n      onClick: () => handleProgressInfoClick(item.id, item.label),\r\n      menuId: 24,\r\n    },\r\n    {\r\n      key: \"separator1\",\r\n      type: \"separator\",\r\n    },\r\n    {\r\n      key: \"rebroadcast\",\r\n      title: \"재발신\",\r\n      onClick: () => handleRebroadcastClick(item.id),\r\n      menuId: 25,\r\n    },\r\n    {\r\n      key: \"separator2\",\r\n      type: \"separator\",\r\n    },\r\n    {\r\n      key: \"copy\",\r\n      title: \"캠페인 복사\",\r\n      onClick: onHandleCampaignCopy,\r\n      menuId: 26,\r\n    },\r\n    {\r\n      key: \"delete\",\r\n      // 캠페인 삭제를 다이얼로그 버튼으로 대체\r\n      render: () => (\r\n        <div className=\"py-1\" key=\"delete\">\r\n          <IDialogButtonForCampaingDelete\r\n            campaignId={item.id}\r\n            tenant_id = {tenantIdForCampaignTab}\r\n            campaignName={item.label}\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"w-full justify-start text-left text-red-500\"\r\n            buttonText=\"캠페인 삭제\"\r\n            isDisabled={displayStatus !== 'stopped'}\r\n          />\r\n        </div>\r\n      ),\r\n      condition: !isFolder,\r\n      className: \"\",\r\n      menuId: 27,\r\n    },\r\n    {\r\n      key: \"separator3\",\r\n      type: \"separator\",\r\n    },\r\n    {\r\n      key: \"listDelete\",\r\n      title: \"캠페인 리스트 삭제\",\r\n      onClick: () => handleCampaignListDelete(item.id),\r\n      condition: displayStatus === 'stopped',\r\n      menuId: 28,\r\n    },\r\n    {\r\n      key: \"monitor\",\r\n      title: \"상담사 상태 모니터\",\r\n      onClick: () => handleMonitorClick(tenantIdForCampaignTab, item.id, item.label),\r\n      menuId: 29,\r\n    },\r\n    {\r\n      key: \"blacklist\",\r\n      title: \"블랙리스트 건수 조회\",\r\n      onClick: handleBlacklistCountCheckClick,\r\n      menuId: 30,\r\n    },\r\n  ];\r\n\r\n  const filteredMenuItems = mainMenuItems.filter((menuItem) => {\r\n    if (menuItem.type === \"separator\") return true;\r\n    if (menuItem.menuId === undefined) return true;\r\n    return availableCampaignTabCampaignContextMenuIds.includes(menuItem.menuId);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ContextMenu>\r\n        <ContextMenuTrigger asChild>{children}</ContextMenuTrigger>\r\n        <ContextMenuContent className=\"w-[150px]\">\r\n          {filteredMenuItems.map((menuItem) => {\r\n            if (menuItem.condition === false) return null;\r\n            if (menuItem.type === \"separator\") {\r\n              return (\r\n                <ContextMenuSeparator\r\n                  key={menuItem.key}\r\n                  className=\"my-1\"\r\n                />\r\n              );\r\n            }\r\n            if (menuItem.render) {\r\n              return (\r\n                <React.Fragment key={menuItem.key}>\r\n                  {menuItem.render()}\r\n                </React.Fragment>\r\n              );\r\n            }\r\n            return (\r\n              <ContextMenuItem\r\n                key={menuItem.key}\r\n                onClick={menuItem.onClick}\r\n                className={cn(\"flex items-center text-sm\", menuItem.className)}\r\n              >\r\n                {menuItem.title}\r\n              </ContextMenuItem>\r\n            );\r\n          })}\r\n        </ContextMenuContent>\r\n      </ContextMenu>\r\n\r\n      {isBlacklistPopupOpen && (\r\n        <BlackListCountPopup\r\n          campaignId={item.id}\r\n          blackListCount={blackListCount}\r\n          maxBlacklistCount={maxBlacklistCount}\r\n          commonBlacklistCount={commonBlacklistCount}\r\n          isOpen={isBlacklistPopupOpen}\r\n          onConfirm={() => setIsBlacklistPopupOpen(false)}\r\n          onCancel={() => setIsBlacklistPopupOpen(false)}\r\n        />\r\n      )}\r\n\r\n      <CustomAlert\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        isOpen={alertState.isOpen}\r\n        onClose={() => {\r\n          alertState.onClose();\r\n        }}\r\n        onCancle={() => setAlertState((prev) => ({ ...prev, isOpen: false }))}\r\n      />\r\n    </>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3222, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/FolderContextMenuForTreeNode.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  ContextMenuContent,\r\n  ContextMenuItem,\r\n} from \"@/components/ui/context-menu\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { CustomCheckbox } from \"@/components/shared/CustomCheckbox\";\r\nimport { useTreeMenuStore } from \"@/store/storeForSsideMenuCampaignTab\";\r\nimport { useAvailableMenuStore } from \"@/store/useAvailableMenuStore\";\r\nimport { useAuthStore } from \"@/store\";\r\n\r\nexport interface FolderContextMenuProps {\r\n  item: {\r\n    id: string;\r\n    label: string;\r\n  };\r\n}\r\n\r\nexport const FolderContextMenu = ({ item }: FolderContextMenuProps) => {\r\n  const { addTab, openedTabs, setActiveTab , removeExistingTabsByTabId} = useTabStore();\r\n  const { selectedMenus, toggleMenu , } = useTreeMenuStore(); // 통합 스토어 사용\r\n  const { availableCampaignTenantContextMenuIds } = useAvailableMenuStore(); // 권한 있는 메뉴 ID 가져오기\r\n\r\n\r\n  const { tenant_id, role_id, session_key } = useAuthStore();\r\n  \r\n\r\n  // addTab({\r\n  //   id: 700,\r\n  //   title: 캠페인 그룹 일괄 수정: ${node.name},\r\n  //   uniqueKey: groupBulkUpdate_${node.id},\r\n  //   params: {\r\n  //     groupId: node.id,\r\n  //     groupName: node.name\r\n  //   }\r\n  // });\r\n\r\n  const menuItems = [\r\n    {\r\n      id: 13,\r\n      menuId: 15,\r\n      title: \"새 캠페인\",\r\n      handler: () => {\r\n        const tenantId = item.id;\r\n        const newKey = `13-${Date.now()}`;\r\n    \r\n        // 💡 새로 추가한 메서드 사용!\r\n        removeExistingTabsByTabId(13);\r\n    \r\n        addTab({\r\n          id: 13,\r\n          uniqueKey: newKey,\r\n          title: \"새 캠페인\",\r\n          icon: \"\",\r\n          href: \"\",\r\n          content: null,\r\n          params: { tenantId },\r\n        });\r\n    \r\n        setActiveTab(13, newKey);\r\n      },\r\n    },\r\n      \r\n    {\r\n      id: 22,\r\n      menuId: 16,\r\n      title: \"상담사 상태 모니터\",\r\n      handler: () => {\r\n        addTab({\r\n          id: 22,\r\n          uniqueKey: `22-${Date.now()}`,\r\n          title: \"상담사 상태 모니터\",\r\n          icon: \"\",\r\n          href: \"\",\r\n          content: null,\r\n          params: {\r\n            sessionKey: session_key,\r\n            campaignId: 0,\r\n            tenantId: item.id,\r\n          }\r\n\r\n        });\r\n      },\r\n    },\r\n  ];\r\n\r\n  // 사용자가 접근 권한이 있는 메뉴 아이템만 필터링\r\n  const filteredMenuItems = menuItems.filter((menuItem) =>\r\n    availableCampaignTenantContextMenuIds.includes(menuItem.menuId)\r\n  );\r\n  // console.log(\"availableCampaignTenantContextMenuIds : \", availableCampaignTenantContextMenuIds);\r\n  // console.log(\"filteredMenuItems : \", filteredMenuItems);  \r\n\r\n  return (\r\n    <ContextMenuContent>\r\n      {filteredMenuItems.map((menuItem) => (\r\n        <ContextMenuItem\r\n          key={menuItem.id}\r\n          onClick={menuItem.handler}\r\n          className=\"cursor-pointer hover:bg-[#F4F6F9] focus:bg-[#F4F6F9] flex items-center text-[#333] px-[6px] py-[4px]\"\r\n        >\r\n          <span>{menuItem.title}</span>\r\n        </ContextMenuItem>\r\n      ))}\r\n    </ContextMenuContent>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAIA;AAEA;AACA;AACA;AAAA;;;AAVA;;;;;;AAmBO,MAAM,oBAAoB,CAAC,EAAE,IAAI,EAA0B;;IAChE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAG,yBAAyB,EAAC,GAAG,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;IAClF,MAAM,EAAE,aAAa,EAAE,UAAU,EAAI,GAAG,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,KAAK,YAAY;IACxE,MAAM,EAAE,qCAAqC,EAAE,GAAG,CAAA,GAAA,wIAAA,CAAA,wBAAqB,AAAD,KAAK,mBAAmB;IAG9F,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAGvD,WAAW;IACX,aAAa;IACb,uCAAuC;IACvC,2CAA2C;IAC3C,cAAc;IACd,wBAAwB;IACxB,2BAA2B;IAC3B,MAAM;IACN,MAAM;IAEN,MAAM,YAAY;QAChB;YACE,IAAI;YACJ,QAAQ;YACR,OAAO;YACP,SAAS;gBACP,MAAM,WAAW,KAAK,EAAE;gBACxB,MAAM,SAAS,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI;gBAEjC,oBAAoB;gBACpB,0BAA0B;gBAE1B,OAAO;oBACL,IAAI;oBACJ,WAAW;oBACX,OAAO;oBACP,MAAM;oBACN,MAAM;oBACN,SAAS;oBACT,QAAQ;wBAAE;oBAAS;gBACrB;gBAEA,aAAa,IAAI;YACnB;QACF;QAEA;YACE,IAAI;YACJ,QAAQ;YACR,OAAO;YACP,SAAS;gBACP,OAAO;oBACL,IAAI;oBACJ,WAAW,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI;oBAC7B,OAAO;oBACP,MAAM;oBACN,MAAM;oBACN,SAAS;oBACT,QAAQ;wBACN,YAAY;wBACZ,YAAY;wBACZ,UAAU,KAAK,EAAE;oBACnB;gBAEF;YACF;QACF;KACD;IAED,6BAA6B;IAC7B,MAAM,oBAAoB,UAAU,MAAM,CAAC,CAAC,WAC1C,sCAAsC,QAAQ,CAAC,SAAS,MAAM;IAEhE,kGAAkG;IAClG,4DAA4D;IAE5D,qBACE,6LAAC,8IAAA,CAAA,qBAAkB;kBAChB,kBAAkB,GAAG,CAAC,CAAC,yBACtB,6LAAC,8IAAA,CAAA,kBAAe;gBAEd,SAAS,SAAS,OAAO;gBACzB,WAAU;0BAEV,cAAA,6LAAC;8BAAM,SAAS,KAAK;;;;;;eAJhB,SAAS,EAAE;;;;;;;;;;AAS1B;GAxFa;;QAC6D,2HAAA,CAAA,cAAW;QAC3C,+IAAA,CAAA,mBAAgB;QACN,wIAAA,CAAA,wBAAqB;QAG3B,4HAAA,CAAA,eAAY;;;KAN7C"}},
    {"offset": {"line": 3340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3346, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenus/ICampaignTabRootNodeContextMenu.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useCallback } from \"react\";\r\nimport {\r\n  ContextMenuContent,\r\n  ContextMenuItem,\r\n  ContextMenuSeparator,\r\n} from \"@/components/ui/context-menu\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { TreeItem } from \"@/features/campaignManager/types/typeForSidebar2\";\r\nimport { useAuthStore } from \"@/store\";\r\n\r\ninterface RootNodeContextMenuProps {\r\n  item: TreeItem;\r\n}\r\n\r\nexport function IRootNodeContextMenu({ item }: RootNodeContextMenuProps) {\r\n  const { addTab } = useTabStore();\r\n  const { session_key } = useAuthStore();\r\n\r\n  const handleExpandAll = useCallback(() => {\r\n    // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n    if (typeof window.expandAllNodes === 'function') {\r\n      // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n      window.expandAllNodes();\r\n    }\r\n  }, []);\r\n\r\n  const handleCollapseAll = useCallback(() => {\r\n    // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n    if (typeof window.expandTenantsOnly === 'function') {\r\n      // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n      window.expandTenantsOnly();\r\n    }\r\n  }, []);\r\n\r\n  const handleAgentStatusMonitor = useCallback(() => {\r\n    addTab({\r\n      id: 22,\r\n      uniqueKey: `22-${Date.now()}`,\r\n      title: \"상담사 상태 모니터\",\r\n      icon: \"\",\r\n      href: \"\",\r\n      content: null,\r\n      params: {\r\n        sessionKey: session_key,\r\n        campaignId: 0,\r\n        tenantId: 0,\r\n      }\r\n    });\r\n  }, [addTab, session_key]);\r\n\r\n  return (\r\n    <ContextMenuContent className=\"w-48\">\r\n      <ContextMenuItem onSelect={handleAgentStatusMonitor}>\r\n        상담사 상태 모니터\r\n      </ContextMenuItem>\r\n\r\n      \r\n    </ContextMenuContent>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAKA;AAEA;AAAA;;;AAVA;;;;;AAgBO,SAAS,qBAAqB,EAAE,IAAI,EAA4B;;IACrE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;IAC7B,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAEnC,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;6DAAE;YAClC,0DAA0D;YAC1D,IAAI,OAAO,OAAO,cAAc,KAAK,YAAY;gBAC/C,0DAA0D;gBAC1D,OAAO,cAAc;YACvB;QACF;4DAAG,EAAE;IAEL,MAAM,oBAAoB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;+DAAE;YACpC,0DAA0D;YAC1D,IAAI,OAAO,OAAO,iBAAiB,KAAK,YAAY;gBAClD,0DAA0D;gBAC1D,OAAO,iBAAiB;YAC1B;QACF;8DAAG,EAAE;IAEL,MAAM,2BAA2B,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;sEAAE;YAC3C,OAAO;gBACL,IAAI;gBACJ,WAAW,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI;gBAC7B,OAAO;gBACP,MAAM;gBACN,MAAM;gBACN,SAAS;gBACT,QAAQ;oBACN,YAAY;oBACZ,YAAY;oBACZ,UAAU;gBACZ;YACF;QACF;qEAAG;QAAC;QAAQ;KAAY;IAExB,qBACE,6LAAC,8IAAA,CAAA,qBAAkB;QAAC,WAAU;kBAC5B,cAAA,6LAAC,8IAAA,CAAA,kBAAe;YAAC,UAAU;sBAA0B;;;;;;;;;;;AAO3D;GA7CgB;;QACK,2HAAA,CAAA,cAAW;QACN,4HAAA,CAAA,eAAY;;;KAFtB"}},
    {"offset": {"line": 3432, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3438, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/TreeNodeForCampaignTab.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import { TreeNodeProps } from \"@/components/shared/layout/SidebarPresenter\";\r\n// import { ContextMenuForCampaignForCampaignTab } from \"./ContextMenuForCampaignForCampaignTab\";\r\n// import { FileText } from \"lucide-react\";\r\n// import { useTabStore } from \"@/store/tabStore\";\r\n// import { useCallback } from \"react\";\r\n// import { ContextMenu, ContextMenuTrigger } from \"@/components/ui/context-menu\";\r\n// import { FolderContextMenu } from \"./FolderContextMenuForTreeNode\";\r\n// import Image from \"next/image\";\r\n// import clsx from \"clsx\";\r\n// import { useTreeMenuStore } from \"@/store/storeForSsideMenuCampaignTab\";\r\n// import { useMainStore } from \"@/store/mainStore\";\r\n\r\n// export function TreeNodeForCampaignTab({\r\n//   item,\r\n//   level,\r\n//   expandedNodes,\r\n//   selectedNodeId,\r\n//   getStatusIcon,\r\n//   onNodeToggle,\r\n//   onNodeSelect,\r\n//   compact = false, // 컴팩트 모드 기본값 추가\r\n// }: TreeNodeProps) {\r\n//   const { skilIdsForCampaignTreeMenu, viewMode } = useTreeMenuStore(); // 통합 스토어 사용\r\n//   const { campaigns } = useMainStore(); // Get campaigns from MainStore for real-time status\r\n//   const {\r\n//     simulateHeaderMenuClick,\r\n//     setCampaignIdForUpdateFromSideMenu,\r\n//     setCampaignIdForCopyCampaign,\r\n//     addTab,\r\n//   } = useTabStore();\r\n\r\n//   // Get the most current status from the campaigns store\r\n//   const currentCampaign = campaigns?.find((c: any) => c.campaign_id === Number(item.id));\r\n//   const isTenantFolder = item.type === \"folder\" && level === 1;\r\n\r\n//   const currentStatus = currentCampaign ?\r\n//     (() => {\r\n//       switch (currentCampaign.campaign_status) {\r\n//         case 1: return \"started\";\r\n//         case 2: return \"pending\";\r\n//         case 3: return \"stopped\";\r\n//         default: return item.status;\r\n//       }\r\n//     })() :\r\n//     item.status;\r\n\r\n//   // Update the item with the current status to ensure it's passed to the ContextMenu\r\n//   const updatedItem = {\r\n//     ...item,\r\n//     status: currentStatus\r\n//   };\r\n\r\n//   // 캠페인 타입이더라도 실제 자식이 있으면 hasChildren을 true로 설정\r\n//   const hasChildren = item.children && item.children.length > 0;\r\n//   const isExpanded = expandedNodes.has(item.id);\r\n//   const isSelected = selectedNodeId === item.id;\r\n//   const statusIcon = item.type === \"campaign\" ? getStatusIcon(currentStatus) : null;\r\n\r\n//   const handleClick = useCallback(() => {\r\n//     onNodeSelect(item.id);\r\n//     if (hasChildren) {\r\n//       onNodeToggle(item.id);\r\n//     }\r\n//   }, [item.id, hasChildren, onNodeSelect, onNodeToggle]);\r\n\r\n//   // 우클릭 시 노드 선택을 처리하는 함수 추가\r\n//   const handleContextMenu = useCallback(() => {\r\n//     onNodeSelect(item.id);\r\n//   }, [item.id, onNodeSelect]);\r\n\r\n//   const handleDoubleClick = useCallback(() => {\r\n//     if (item.type !== \"campaign\") return;\r\n//     simulateHeaderMenuClick(2);\r\n//     setCampaignIdForUpdateFromSideMenu(item.id);\r\n//   }, [item, simulateHeaderMenuClick, setCampaignIdForUpdateFromSideMenu]);\r\n\r\n//   const handleEdit = useCallback(() => {\r\n//     console.log(\"Edit clicked:\", { id: item.id, label: item.label, type: item.type });\r\n//   }, [item.id, item.label, item.type]);\r\n\r\n//   const handleMonitor = useCallback(() => {\r\n//     console.log(\"Monitor clicked:\", { id: item.id, label: item.label, type: item.type });\r\n//   }, [item.id, item.label, item.type]);\r\n\r\n//   const onHandleCampaignCopy = useCallback(() => {\r\n//     console.log(\"Copy clicked:\", { id: item.id, label: item.label, type: item.type });\r\n//     setCampaignIdForUpdateFromSideMenu(item.id);\r\n//     setCampaignIdForCopyCampaign(item.id);\r\n//     addTab({\r\n//       id: 130,\r\n//       uniqueKey: \"130\",\r\n//       title: \"캠페인 복사\",\r\n//       icon: \"\",\r\n//       href: \"\",\r\n//       content: null,\r\n//     });\r\n//   }, [item, setCampaignIdForUpdateFromSideMenu, setCampaignIdForCopyCampaign, addTab]);\r\n\r\n//   // 뷰 모드가 'tenant'이고 item.type이 'campaign'인 경우에 숨김 처리는 삭제\r\n//   // 모든 노드 타입이 항상 표시되도록 함\r\n\r\n//   if (item.visible === false) {\r\n//     return null;\r\n//   }\r\n\r\n//   // 아이콘 크기 조정 (컴팩트 모드일 경우 더 작게)\r\n//   const iconSize = compact ? 10 : 14;\r\n//   const expandIconSize = compact ? 10 : 12;\r\n\r\n//   // 노드 아이콘 가져오기\r\n//   const getNodeIcon = () => {\r\n//     if (item.type === \"folder\") {\r\n//       return level === 0 ? (\r\n//         <Image\r\n//           src=\"/tree-menu/organization.png\"\r\n//           alt=\"조직\"\r\n//           width={14}\r\n//           height={12}\r\n//           className=\"flex-shrink-0\"\r\n//         />\r\n//       ) : (\r\n//         <Image\r\n//           src=\"/tree-menu/folder.png\"\r\n//           alt=\"그룹\"\r\n//           width={14}\r\n//           height={12}\r\n//           className=\"flex-shrink-0\"\r\n//         />\r\n//       );\r\n//     }\r\n\r\n//     if (item.type === \"campaign\") {\r\n//       return statusIcon ? (\r\n//         <Image src={statusIcon} alt=\"status\" width={12} height={12} className=\"flex-shrink-0\" />\r\n//       ) : (\r\n//         <FileText className={`${compact ? 'h-4 w-4' : 'h-4 w-4'} text-gray-400 flex-shrink-0`} />\r\n//       );\r\n//     }\r\n\r\n//     return <FileText className={`${compact ? 'h-4 w-4' : 'h-4 w-4'} text-gray-400 flex-shrink-0`} />;\r\n//   };\r\n\r\n//   // 노드 클래스 - 컴팩트 모드일 경우 더 작은 패딩 적용\r\n//   const nodeStyle = clsx(\r\n//     \"flex items-center hover:bg-[#FFFAEE] cursor-pointer transition-colors duration-150\",\r\n//     {\r\n//       \"bg-[#FFFAEE]\": isSelected,\r\n//       \"px-2 py-0.5\": !compact, // 기본 패딩\r\n//       \"px-1 py-0.5\": compact,  // 컴팩트 모드 패딩\r\n//     },\r\n//     item.type === \"folder\" ? \"folder-node\" : \"campaign-node\",\r\n//     \"tree-item\"\r\n//   );\r\n\r\n//   // 텍스트 스타일 - 컴팩트 모드일 경우 더 작은 폰트\r\n//   const textStyle = clsx(\r\n//     \"text-555 truncate\",\r\n//     {\r\n//       \"font-medium\": isSelected,\r\n//       \"text-lg\": !compact,\r\n//       \"text-sm\": compact\r\n//     },\r\n//   );\r\n\r\n//   // 공통된 노드 내용 컴포넌트\r\n//   // nodeContent 부분을 다음과 같이 수정합니다\r\n//   const nodeContent = (\r\n//     <div className=\"flex items-center w-full gap-1\">\r\n//       {/* 폴더 타입이고 자식이 있는 경우에만 확장 아이콘 표시 */}\r\n//       {item.type === \"folder\" && hasChildren ? (\r\n//         isExpanded ? (\r\n//           <Image\r\n//             src=\"/tree-menu/minus_for_tree.png\"\r\n//             alt=\"접기\"\r\n//             width={12}\r\n//             height={12}\r\n//             className=\"flex-shrink-0\"\r\n//             onClick={(e) => {\r\n//               e.stopPropagation();\r\n//               onNodeToggle(item.id);\r\n//             }}\r\n//           />\r\n//         ) : (\r\n//           <Image\r\n//             src=\"/tree-menu/plus_icon_for_tree.png\"\r\n//             alt=\"펼치기\"\r\n//             width={12}\r\n//             height={12}\r\n//             className=\"flex-shrink-0\"\r\n//             onClick={(e) => {\r\n//               e.stopPropagation();\r\n//               onNodeToggle(item.id);\r\n//             }}\r\n//           />\r\n//         )\r\n//       ) : (\r\n//         <span className=\"w-3\" />\r\n//       )}\r\n//       {getNodeIcon()}\r\n//       <span className={textStyle}>\r\n//         {(isTenantFolder || item.type === \"campaign\") && ` [${item.id}]`}\r\n//         {item.label}\r\n//       </span>\r\n//     </div>\r\n//   );\r\n\r\n//   // 레벨 인덴트 계산 - 컴팩트 모드일 경우 더 작은 인덴트\r\n//   const indentSize = compact ? 12 : 16;\r\n//   const paddingLeft = `${level * indentSize + (compact ? 6 : 8)}px`;\r\n\r\n//   return (\r\n//     <div className=\"select-none\">\r\n//       {/* todo: item.label 이 nexus 인 경우 ContextMenuForNexus */}\r\n      \r\n//       {item.type === \"folder\" ? (\r\n//         <ContextMenu>\r\n//           <ContextMenuTrigger>\r\n//             <div\r\n//               className={nodeStyle}\r\n//               onClick={handleClick}\r\n//               onContextMenu={handleContextMenu}\r\n//               style={{ paddingLeft }}\r\n//             >\r\n//               {nodeContent}\r\n//             </div>\r\n//           </ContextMenuTrigger>\r\n//           <FolderContextMenu item={item} />\r\n//         </ContextMenu>\r\n//       ) : (\r\n//         <ContextMenuForCampaignForCampaignTab\r\n//           item={updatedItem}\r\n//           onEdit={handleEdit}\r\n//           onMonitor={handleMonitor}\r\n//           onHandleCampaignCopy={onHandleCampaignCopy}\r\n\r\n//           // tofix 0409 tenantId 가 전달 안되고 있어 \r\n//           tenantIdForCampaignTab={item.tenantId}\r\n//         >\r\n//           <div\r\n//             className={nodeStyle}\r\n//             onClick={handleClick}\r\n//             onDoubleClick={handleDoubleClick}\r\n//             onContextMenu={handleContextMenu}\r\n//             style={{ paddingLeft }}\r\n//           >\r\n//             {nodeContent}\r\n//           </div>\r\n//         </ContextMenuForCampaignForCampaignTab>\r\n//       )}\r\n\r\n//       {hasChildren && isExpanded && (\r\n//         <div className=\"space-y-0.5\">\r\n//           {item.children?.map((child: typeof item) => (\r\n//             <TreeNodeForCampaignTab\r\n//               key={child.id}\r\n//               item={child}\r\n//               level={level + 1}\r\n//               expandedNodes={expandedNodes}\r\n//               selectedNodeId={selectedNodeId}\r\n//               getStatusIcon={getStatusIcon}\r\n//               onNodeToggle={onNodeToggle}\r\n//               onNodeSelect={onNodeSelect}\r\n//               compact={compact}\r\n//             />\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\n\r\nimport { TreeNodeProps } from \"@/components/shared/layout/SidebarPresenter\";\r\nimport { ContextMenuForCampaignForCampaignTab } from \"./ContextMenuForCampaignForCampaignTab\";\r\nimport { FileText } from \"lucide-react\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { useCallback } from \"react\";\r\nimport { ContextMenu, ContextMenuTrigger } from \"@/components/ui/context-menu\";\r\nimport { FolderContextMenu } from \"./FolderContextMenuForTreeNode\";\r\nimport Image from \"next/image\";\r\nimport clsx from \"clsx\";\r\nimport { useTreeMenuStore } from \"@/store/storeForSsideMenuCampaignTab\";\r\nimport { useMainStore } from \"@/store/mainStore\";\r\nimport { IRootNodeContextMenu } from \"./ContextMenus/ICampaignTabRootNodeContextMenu\";\r\n\r\nexport function TreeNodeForCampaignTab({\r\n  item,\r\n  level,\r\n  expandedNodes,\r\n  selectedNodeId,\r\n  getStatusIcon,\r\n  onNodeToggle,\r\n  onNodeSelect,\r\n  compact = false, // 컴팩트 모드 기본값 추가\r\n}: TreeNodeProps) {\r\n  const { skilIdsForCampaignTreeMenu, viewMode } = useTreeMenuStore(); // 통합 스토어 사용\r\n  const { campaigns } = useMainStore(); // Get campaigns from MainStore for real-time status\r\n  const {\r\n    simulateHeaderMenuClick,\r\n    setCampaignIdForUpdateFromSideMenu,\r\n    setCampaignIdForCopyCampaign,\r\n    addTab,\r\n    addTabCurrentOnly\r\n  } = useTabStore();\r\n\r\n  // Get the most current status from the campaigns store\r\n  const currentCampaign = campaigns?.find((c: any) => c.campaign_id === Number(item.id));\r\n  const isTenantFolder = item.type === \"folder\" && level === 1;\r\n  const isRootNode = item.label.toLowerCase() === \"nexus\"; // Check if this is the root node\r\n\r\n  const currentStatus = currentCampaign ?\r\n    (() => {\r\n      switch (currentCampaign.campaign_status) {\r\n        case 1: return \"started\";\r\n        case 2: return \"pending\";\r\n        case 3: return \"stopped\";\r\n        default: return item.status;\r\n      }\r\n    })() :\r\n    item.status;\r\n\r\n  // Update the item with the current status to ensure it's passed to the ContextMenu\r\n  const updatedItem = {\r\n    ...item,\r\n    status: currentStatus\r\n  };\r\n\r\n  // 캠페인 타입이더라도 실제 자식이 있으면 hasChildren을 true로 설정\r\n  const hasChildren = item.children && item.children.length > 0;\r\n  const isExpanded = expandedNodes.has(item.id);\r\n  const isSelected = selectedNodeId === item.id;\r\n  const statusIcon = item.type === \"campaign\" ? getStatusIcon(currentStatus) : null;\r\n\r\n  const handleClick = useCallback(() => {\r\n    onNodeSelect(item.id);\r\n    if (hasChildren) {\r\n      onNodeToggle(item.id);\r\n    }\r\n  }, [item.id, hasChildren, onNodeSelect, onNodeToggle]);\r\n\r\n  // 우클릭 시 노드 선택을 처리하는 함수 추가\r\n  const handleContextMenu = useCallback(() => {\r\n    onNodeSelect(item.id);\r\n  }, [item.id, onNodeSelect]);\r\n\r\n  const handleDoubleClick = useCallback(() => {\r\n    if (item.type !== \"campaign\") return;\r\n    // simulateHeaderMenuClick(2);\r\n\r\n    addTabCurrentOnly({\r\n      id: 2,\r\n      uniqueKey: \"2\",\r\n      title: `캠페인 관리 ${item.id}`,\r\n      // icon: \"\",\r\n      // href: \"\",\r\n      content: null,\r\n      params: {\r\n        campaignId: item.id,\r\n        campaignName: item.label,\r\n        campaignType: item.type,\r\n      },\r\n    });\r\n\r\n    setCampaignIdForUpdateFromSideMenu(item.id);\r\n  }, [item, simulateHeaderMenuClick, setCampaignIdForUpdateFromSideMenu]);\r\n\r\n  const handleEdit = useCallback(() => {\r\n    console.log(\"Edit clicked:\", { id: item.id, label: item.label, type: item.type });\r\n  }, [item.id, item.label, item.type]);\r\n\r\n  const handleMonitor = useCallback(() => {\r\n    console.log(\"Monitor clicked:\", { id: item.id, label: item.label, type: item.type });\r\n  }, [item.id, item.label, item.type]);\r\n\r\n  const onHandleCampaignCopy = useCallback(() => {\r\n    console.log(\"Copy clicked:\", { id: item.id, label: item.label, type: item.type });\r\n    setCampaignIdForUpdateFromSideMenu(item.id);\r\n    setCampaignIdForCopyCampaign(item.id);\r\n    addTab({\r\n      id: 130,\r\n      uniqueKey: \"130\",\r\n      title: \"캠페인 복사\",\r\n      icon: \"\",\r\n      href: \"\",\r\n      content: null,\r\n    });\r\n  }, [item, setCampaignIdForUpdateFromSideMenu, setCampaignIdForCopyCampaign, addTab]);\r\n\r\n  if (item.visible === false) {\r\n    return null;\r\n  }\r\n\r\n  // 아이콘 크기 조정 (컴팩트 모드일 경우 더 작게)\r\n  const iconSize = compact ? 10 : 14;\r\n  const expandIconSize = compact ? 10 : 12;\r\n\r\n  // 노드 아이콘 가져오기\r\n  const getNodeIcon = () => {\r\n    if (item.type === \"folder\") {\r\n      return level === 0 ? (\r\n        <Image\r\n          src=\"/tree-menu/organization.png\"\r\n          alt=\"조직\"\r\n          width={14}\r\n          height={12}\r\n          className=\"flex-shrink-0\"\r\n        />\r\n      ) : (\r\n        <Image\r\n          src=\"/tree-menu/folder.png\"\r\n          alt=\"그룹\"\r\n          width={14}\r\n          height={12}\r\n          className=\"flex-shrink-0\"\r\n        />\r\n      );\r\n    }\r\n\r\n    if (item.type === \"campaign\") {\r\n      return statusIcon ? (\r\n        <Image src={statusIcon} alt=\"status\" width={12} height={12} className=\"flex-shrink-0\" />\r\n      ) : (\r\n        <FileText className={`${compact ? 'h-4 w-4' : 'h-4 w-4'} text-gray-400 flex-shrink-0`} />\r\n      );\r\n    }\r\n\r\n    return <FileText className={`${compact ? 'h-4 w-4' : 'h-4 w-4'} text-gray-400 flex-shrink-0`} />;\r\n  };\r\n\r\n  // 노드 클래스 - 컴팩트 모드일 경우 더 작은 패딩 적용\r\n  const nodeStyle = clsx(\r\n    \"flex items-center hover:bg-[#FFFAEE] cursor-pointer transition-colors duration-150\",\r\n    {\r\n      \"bg-[#FFFAEE]\": isSelected,\r\n      \"px-2 py-0.5\": !compact, // 기본 패딩\r\n      \"px-1 py-0.5\": compact,  // 컴팩트 모드 패딩\r\n    },\r\n    item.type === \"folder\" ? \"folder-node\" : \"campaign-node\",\r\n    \"tree-item\"\r\n  );\r\n\r\n  // 텍스트 스타일 - 컴팩트 모드일 경우 더 작은 폰트\r\n  const textStyle = clsx(\r\n    \"text-555 truncate\",\r\n    {\r\n      \"font-medium\": isSelected,\r\n      \"text-lg\": !compact,\r\n      \"text-sm\": compact\r\n    },\r\n  );\r\n\r\n  // 공통된 노드 내용 컴포넌트\r\n  const nodeContent = (\r\n    <div className=\"flex items-center w-full gap-1\">\r\n      {/* 폴더 타입이고 자식이 있는 경우에만 확장 아이콘 표시 */}\r\n      {item.type === \"folder\" && hasChildren ? (\r\n        isExpanded ? (\r\n          <Image\r\n            src=\"/tree-menu/minus_for_tree.png\"\r\n            alt=\"접기\"\r\n            width={12}\r\n            height={12}\r\n            className=\"flex-shrink-0\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onNodeToggle(item.id);\r\n            }}\r\n          />\r\n        ) : (\r\n          <Image\r\n            src=\"/tree-menu/plus_icon_for_tree.png\"\r\n            alt=\"펼치기\"\r\n            width={12}\r\n            height={12}\r\n            className=\"flex-shrink-0\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onNodeToggle(item.id);\r\n            }}\r\n          />\r\n        )\r\n      ) : (\r\n        <span className=\"w-3\" />\r\n      )}\r\n      {getNodeIcon()}\r\n      <span className={textStyle}>\r\n        {(isTenantFolder || item.type === \"campaign\") && ` [${item.id}]`}\r\n        {item.label}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  // 레벨 인덴트 계산 - 컴팩트 모드일 경우 더 작은 인덴트\r\n  const indentSize = compact ? 12 : 16;\r\n  const paddingLeft = `${level * indentSize + (compact ? 6 : 8)}px`;\r\n\r\n  // 각 노드 유형에 맞는 컨텍스트 메뉴 선택\r\n  const renderContextMenu = () => {\r\n    if (isRootNode) {\r\n      return (\r\n        <ContextMenu>\r\n          <ContextMenuTrigger>\r\n            <div\r\n              className={nodeStyle}\r\n              onClick={handleClick}\r\n              onContextMenu={handleContextMenu}\r\n              style={{ paddingLeft }}\r\n            >\r\n              {nodeContent}\r\n            </div>\r\n          </ContextMenuTrigger>\r\n          <IRootNodeContextMenu item={updatedItem} />\r\n        </ContextMenu>\r\n      );\r\n    } else if (item.type === \"folder\") {\r\n      return (\r\n        <ContextMenu>\r\n          <ContextMenuTrigger>\r\n            <div\r\n              className={nodeStyle}\r\n              onClick={handleClick}\r\n              onContextMenu={handleContextMenu}\r\n              style={{ paddingLeft }}\r\n            >\r\n              {nodeContent}\r\n            </div>\r\n          </ContextMenuTrigger>\r\n          <FolderContextMenu item={updatedItem} />\r\n        </ContextMenu>\r\n      );\r\n    } else {\r\n      return (\r\n        <ContextMenuForCampaignForCampaignTab\r\n          item={updatedItem}\r\n          onEdit={handleEdit}\r\n          onMonitor={handleMonitor}\r\n          onHandleCampaignCopy={onHandleCampaignCopy}\r\n          tenantIdForCampaignTab={item.tenantId}\r\n        >\r\n          <div\r\n            className={nodeStyle}\r\n            onClick={handleClick}\r\n            onDoubleClick={handleDoubleClick}\r\n            onContextMenu={handleContextMenu}\r\n            style={{ paddingLeft }}\r\n          >\r\n            {nodeContent}\r\n          </div>\r\n        </ContextMenuForCampaignForCampaignTab>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"select-none\">\r\n      {renderContextMenu()}\r\n\r\n      {hasChildren && isExpanded && (\r\n        <div className=\"space-y-0.5\">\r\n          {item.children?.map((child: typeof item) => (\r\n            <TreeNodeForCampaignTab\r\n              key={child.id}\r\n              item={child}\r\n              level={level + 1}\r\n              expandedNodes={expandedNodes}\r\n              selectedNodeId={selectedNodeId}\r\n              getStatusIcon={getStatusIcon}\r\n              onNodeToggle={onNodeToggle}\r\n              onNodeSelect={onNodeSelect}\r\n              compact={compact}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4121, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/TreeMenusForCampaigns.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import { useEffect, useRef, useState, useMemo } from \"react\";\r\n// import { create } from \"zustand\";\r\n// import { TreeItem } from \"@/features/campaignManager/types/typeForSidebar2\";\r\n// import { TreeNodeForCampaignTab } from \"./TreeNodeForCampaignTab\";\r\n// import { useApiForGetTreeMenuDataForSideMenu } from \"@/features/auth/hooks/useApiForGetTreeMenuDataForSideMenu\";\r\n// import { getStatusIcon } from \"@/components/shared/layout/utils/utils\";\r\n// import { useSidebarWidthStore } from \"@/store/useSidebarWidthStore\";\r\n// import { useAuthStore } from \"@/store\";\r\n// import { useTreeMenuStore, ViewMode } from \"@/store/storeForSsideMenuCampaignTab\";\r\n\r\n// // 트리 노드 선택/확장 상태 관리\r\n// interface TreeState {\r\n//   selectedNodeId: string | undefined;\r\n//   expandedNodes: Set<string>;\r\n//   previousExpandedState: Set<string>; // 이전 확장 상태 저장\r\n//   setSelectedNodeId: (nodeId: string) => void;\r\n//   toggleNode: (nodeId: string) => void;\r\n//   expandNodes: (nodes: Set<string>) => void;\r\n//   savePreviousState: () => void; // 현재 확장 상태를 저장\r\n//   restorePreviousState: () => void; // 이전 확장 상태 복원\r\n// }\r\n\r\n// const useTreeStore = create<TreeState>((set, get) => ({\r\n//   selectedNodeId: undefined,\r\n//   expandedNodes: new Set<string>(),\r\n//   previousExpandedState: new Set<string>(),\r\n//   setSelectedNodeId: (nodeId) => set({ selectedNodeId: nodeId }),\r\n//   toggleNode: (nodeId) =>\r\n//     set((state) => {\r\n//       console.log(`노드 토글: ${nodeId}`);\r\n//       const newExpanded = new Set(state.expandedNodes);\r\n//       if (newExpanded.has(nodeId)) {\r\n//         newExpanded.delete(nodeId);\r\n//       } else {\r\n//         newExpanded.add(nodeId);\r\n//       }\r\n//       console.log(`확장된 노드 수: ${newExpanded.size}`);\r\n//       return { expandedNodes: newExpanded };\r\n//     }),\r\n//   expandNodes: (nodes) => set({ expandedNodes: nodes }),\r\n//   savePreviousState: () => set((state) => ({\r\n//     previousExpandedState: new Set(state.expandedNodes)\r\n//   })),\r\n//   restorePreviousState: () => set((state) => ({\r\n//     expandedNodes: new Set(state.previousExpandedState)\r\n//   }))\r\n// }));\r\n\r\n// export function TreeMenusForCampaigns() {\r\n//   // UI 강제 업데이트용 상태\r\n//   const [forceUpdate, setForceUpdate] = useState(0);\r\n//   const [lastViewMode, setLastViewMode] = useState<ViewMode | null>(null);\r\n\r\n//   // 인증 스토어에서 테넌트 ID 가져오기\r\n//   const { tenant_id } = useAuthStore();\r\n\r\n//   // 트리 데이터 API 호출\r\n//   const { data: treeData, isLoading, error } = useApiForGetTreeMenuDataForSideMenu();\r\n\r\n//   // 트리 노드 선택/확장 상태 관리\r\n//   const { \r\n//     selectedNodeId, \r\n//     expandedNodes, \r\n//     setSelectedNodeId, \r\n//     toggleNode, \r\n//     expandNodes,\r\n//     savePreviousState,\r\n//     restorePreviousState \r\n//   } = useTreeStore();\r\n\r\n//   // 원본 아이템을 useMemo로 감싸서 의존성 배열 변경 방지\r\n//   const originalItems = useMemo(() => {\r\n//     return treeData?.[0]?.items || [];\r\n//   }, [treeData]);\r\n\r\n//   // expandNodes 함수와 원본 아이템을 전역으로 사용할 수 있도록 저장\r\n//   useEffect(() => {\r\n//     // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n//     window.treeExpandNodes = expandNodes;\r\n//     // @ts-expect-error - 전역 객체에 원본 아이템 추가 (window 타입에 정의되지 않은 속성)\r\n//     window.originalTreeItems = originalItems;\r\n//     // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n//     window.treeSavePreviousState = savePreviousState;\r\n//     // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n//     window.treeRestorePreviousState = restorePreviousState;\r\n//   }, [expandNodes, originalItems, savePreviousState, restorePreviousState]);\r\n\r\n//   // 통합 스토어에서 정렬 및 필터링 상태 가져오기\r\n//   const {\r\n//     campaignSort,\r\n//     skilIdsForCampaignTreeMenu,\r\n//     filterMode,\r\n//     viewMode,\r\n//     selectedNodeType\r\n//   } = useTreeMenuStore();\r\n\r\n//   // 사이드바 너비 설정\r\n//   const setTabWidth = useSidebarWidthStore?.((state) => state.setTabWidth);\r\n\r\n//   // 너비 측정용 ref\r\n//   const containerRef = useRef<HTMLDivElement>(null);\r\n//   const widthTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n//   // 선택된 스킬 ID 배열 변환\r\n//   const selectedSkillIds = Array.isArray(skilIdsForCampaignTreeMenu)\r\n//     ? skilIdsForCampaignTreeMenu.map(id => Number(id))\r\n//     : [];\r\n\r\n//   // 필터링 로직\r\n//   function filterTreeItems(items: TreeItem[]): TreeItem[] {\r\n//     // 필터 모드가 'all'이면 필터링 없이 모든 항목 반환\r\n//     if (filterMode === \"all\") {\r\n//       return items;\r\n//     }\r\n\r\n//     // 스킬 기반 필터링 (filterMode가 'skill' 또는 'filter'인 경우)\r\n//     const filteredItems = items.reduce((acc: TreeItem[], node: TreeItem) => {\r\n//       if (node.type === \"campaign\") {\r\n//         const campaignSkillIds = Array.isArray(node.children)\r\n//           ? node.children\r\n//             .filter(child => child.type === \"skill\")\r\n//             .map(child => Number(child.skillId))\r\n//           : [];\r\n//         const hasIntersection = selectedSkillIds.some(id => campaignSkillIds.includes(id));\r\n//         if (hasIntersection) {\r\n//           acc.push(node);\r\n//         }\r\n//       } else if (node.type === \"folder\") {\r\n//         const filteredChildren = node.children ? filterTreeItems(node.children) : [];\r\n//         if (node.id === \"nexus\" || filteredChildren.length > 0) {\r\n//           acc.push({ ...node, children: filteredChildren });\r\n//         }\r\n//       }\r\n//       return acc;\r\n//     }, []);\r\n\r\n//     return filteredItems;\r\n//   }\r\n\r\n//   // 수정된 트리 아이템 정렬 함수\r\n//   function sortTreeItems(items: TreeItem[]): TreeItem[] {\r\n//     // 정렬 파라미터 가져오기\r\n//     const { type: sortType, direction } = campaignSort;\r\n//     const sortFactor = direction === 'asc' ? 1 : -1;\r\n//     const nodeType = selectedNodeType; // 'all', 'tenant', 'campaign'\r\n\r\n//     return items.map(item => {\r\n//       // NEXUS 루트 노드 처리\r\n//       if (item.id === \"nexus\" && item.children) {\r\n//         // 테넌트 폴더와 기타 아이템 분리\r\n//         const tenantFolders = item.children.filter(child => child.type === \"folder\");\r\n//         const otherItems = item.children.filter(child => child.type !== \"folder\");\r\n\r\n//         // 테넌트 폴더 정렬 - 노드 타입이 'all' 또는 'tenant'인 경우에만 \r\n//         let sortedTenantFolders = [...tenantFolders];\r\n\r\n//         if (nodeType === 'all' || nodeType === 'tenant') {\r\n//           // 테넌트 정렬 로직 적용\r\n//           if (sortType === \"name\") {\r\n//             sortedTenantFolders = sortedTenantFolders.sort((a, b) =>\r\n//               sortFactor * a.label.localeCompare(b.label, 'ko')\r\n//             );\r\n//           } else if (sortType === \"id\") {\r\n//             sortedTenantFolders = sortedTenantFolders.sort((a, b) => {\r\n//               const aId = parseInt(a.id, 10) || 0;\r\n//               const bId = parseInt(b.id, 10) || 0;\r\n//               return sortFactor * (aId - bId);\r\n//             });\r\n//           }\r\n//         }\r\n\r\n//         // 테넌트 폴더의 자식들 처리\r\n//         const processedTenantFolders = sortedTenantFolders.map(tenant => {\r\n//           if (tenant.children) {\r\n//             // 캠페인과 기타 자식 분리\r\n//             const campaignChildren = tenant.children.filter(child => child.type === \"campaign\");\r\n//             const otherChildren = tenant.children.filter(child => child.type !== \"campaign\");\r\n\r\n//             // 캠페인 정렬 - 노드 타입이 'all' 또는 'campaign'인 경우에만\r\n//             let sortedCampaigns = [...campaignChildren];\r\n\r\n//             if (nodeType === 'all' || nodeType === 'campaign') {\r\n//               // 캠페인 정렬 로직 적용\r\n//               if (sortType === \"name\") {\r\n//                 sortedCampaigns = sortedCampaigns.sort((a, b) =>\r\n//                   sortFactor * a.label.localeCompare(b.label, 'ko')\r\n//                 );\r\n//               } else if (sortType === \"id\") {\r\n//                 sortedCampaigns = sortedCampaigns.sort((a, b) => {\r\n//                   const aId = parseInt(a.id, 10) || 0;\r\n//                   const bId = parseInt(b.id, 10) || 0;\r\n//                   return sortFactor * (aId - bId);\r\n//                 });\r\n//               }\r\n//             }\r\n\r\n//             // 기타 자식 정렬 (재귀적으로)\r\n//             const sortedOtherChildren = sortTreeItems(otherChildren);\r\n\r\n//             return {\r\n//               ...tenant,\r\n//               children: [...sortedCampaigns, ...sortedOtherChildren]\r\n//             };\r\n//           }\r\n//           return tenant;\r\n//         });\r\n\r\n//         return {\r\n//           ...item,\r\n//           children: [...processedTenantFolders, ...otherItems]\r\n//         };\r\n//       }\r\n//       // 일반 폴더 아이템 처리\r\n//       else if (item.type === \"folder\" && item.children) {\r\n//         // 폴더 내의 캠페인 항목 정렬\r\n//         const campaignChildren = item.children.filter(child => child.type === \"campaign\");\r\n//         const otherChildren = item.children.filter(child => child.type !== \"campaign\");\r\n\r\n//         // 캠페인 정렬 - 노드 타입이 'all' 또는 'campaign'인 경우에만\r\n//         let sortedCampaigns = [...campaignChildren];\r\n\r\n//         if (nodeType === 'all' || nodeType === 'campaign') {\r\n//           // 캠페인 정렬 로직 적용\r\n//           if (sortType === \"name\") {\r\n//             sortedCampaigns = sortedCampaigns.sort((a, b) =>\r\n//               sortFactor * a.label.localeCompare(b.label, 'ko')\r\n//             );\r\n//           } else if (sortType === \"id\") {\r\n//             sortedCampaigns = sortedCampaigns.sort((a, b) => {\r\n//               const aId = parseInt(a.id, 10) || 0;\r\n//               const bId = parseInt(b.id, 10) || 0;\r\n//               return sortFactor * (aId - bId);\r\n//             });\r\n//           }\r\n//         }\r\n\r\n//         // 기타 자식 정렬\r\n//         const sortedOtherChildren = sortTreeItems(otherChildren);\r\n\r\n//         return {\r\n//           ...item,\r\n//           children: [...sortedCampaigns, ...sortedOtherChildren]\r\n//         };\r\n//       }\r\n\r\n//       // 기타 타입은 그대로 반환\r\n//       return item;\r\n//     });\r\n//   }\r\n\r\n//   // 정렬 상태가 변경될 때마다 UI 업데이트 강제\r\n//   useEffect(() => {\r\n//     console.log(\"정렬 상태 변경 감지:\", {\r\n//       type: campaignSort.type,\r\n//       direction: campaignSort.direction,\r\n//       nodeType: selectedNodeType\r\n//     });\r\n//     setForceUpdate(prev => prev + 1);\r\n//   }, [campaignSort.type, campaignSort.direction, selectedNodeType]);\r\n\r\n//   // 트리 너비 측정 함수\r\n//   const measureTreeWidth = () => {\r\n//     if (!containerRef.current || !setTabWidth) return;\r\n\r\n//     // 이전 타이머 정리\r\n//     if (widthTimeoutRef.current) {\r\n//       clearTimeout(widthTimeoutRef.current);\r\n//     }\r\n\r\n//     // DOM 업데이트 후 측정하도록 지연\r\n//     widthTimeoutRef.current = setTimeout(() => {\r\n//       if (!containerRef.current) return;\r\n\r\n//       // 캠페인 노드의 최대 너비 측정\r\n//       let campaignMaxWidth = 0;\r\n//       const campaignNodes = containerRef.current.querySelectorAll('.campaign-node');\r\n//       if (campaignNodes.length > 0) {\r\n//         campaignNodes.forEach((node) => {\r\n//           const nodeWidth = (node as HTMLElement).scrollWidth;\r\n//           campaignMaxWidth = Math.max(campaignMaxWidth, nodeWidth);\r\n//         });\r\n//       }\r\n\r\n//       // 폴더 노드의 최대 너비 측정\r\n//       let folderMaxWidth = 0;\r\n//       const folderNodes = containerRef.current.querySelectorAll('.folder-node');\r\n//       if (folderNodes.length > 0) {\r\n//         folderNodes.forEach((node) => {\r\n//           const nodeWidth = (node as HTMLElement).scrollWidth;\r\n//           folderMaxWidth = Math.max(folderMaxWidth, nodeWidth);\r\n//         });\r\n//       }\r\n\r\n//       // 전체 트리 아이템의 최대 너비\r\n//       let treeMaxWidth = 0;\r\n//       const treeItems = containerRef.current.querySelectorAll('.tree-item');\r\n//       if (treeItems.length > 0) {\r\n//         treeItems.forEach((item) => {\r\n//           const itemWidth = (item as HTMLElement).scrollWidth;\r\n//           treeMaxWidth = Math.max(treeMaxWidth, itemWidth);\r\n//         });\r\n//       }\r\n\r\n//       // 측정된 너비 중 가장 큰 값 사용\r\n//       let maxContentWidth = Math.max(campaignMaxWidth, folderMaxWidth, treeMaxWidth);\r\n\r\n//       // 최소값 설정\r\n//       maxContentWidth = Math.max(maxContentWidth, 200);\r\n\r\n//       // 여백 추가 (항상 캠페인 여백 사용)\r\n//       const idealWidth = maxContentWidth + 25;\r\n\r\n//       // 캠페인 탭 너비 설정\r\n//       //setTabWidth(\"campaign\", idealWidth);\r\n//     }, 300);\r\n//   };\r\n\r\n//   // 필터링/정렬 적용\r\n//   const filteredItems = filterTreeItems(originalItems);\r\n//   const sortedItems = sortTreeItems(filteredItems);\r\n\r\n//   // 데이터나 필터, 정렬 변경 시 너비 재측정\r\n//   useEffect(() => {\r\n//     if (!isLoading && !error && sortedItems.length > 0) {\r\n//       const timer = setTimeout(() => {\r\n//         measureTreeWidth();\r\n//       }, 500);\r\n\r\n//       return () => clearTimeout(timer);\r\n//     }\r\n//   }, [\r\n//     isLoading,\r\n//     error,\r\n//     sortedItems.length,\r\n//     campaignSort.type,\r\n//     campaignSort.direction,\r\n//     filterMode,\r\n//     selectedSkillIds.length,\r\n//     viewMode,\r\n//     selectedNodeType,\r\n//     forceUpdate,\r\n//     measureTreeWidth\r\n//   ]);\r\n\r\n//   // 컴포넌트 언마운트 시 타이머 정리\r\n//   useEffect(() => {\r\n//     return () => {\r\n//       if (widthTimeoutRef.current) {\r\n//         clearTimeout(widthTimeoutRef.current);\r\n//       }\r\n//     };\r\n//   }, []);\r\n\r\n//   // 뷰 모드 변경 감지\r\n//   useEffect(() => {\r\n//     // 뷰 모드가 변경될 때마다 현재 확장 상태를 저장\r\n//     if (lastViewMode !== null && lastViewMode !== viewMode) {\r\n//       // 테넌트 모드에서 캠페인 모드로 전환하는 경우, 테넌트 모드의 상태를 저장\r\n//       if (lastViewMode === 'tenant' && viewMode === 'campaign') {\r\n//         savePreviousState();\r\n//         console.log('테넌트 뷰 상태 저장됨', expandedNodes.size);\r\n//       }\r\n//     }\r\n\r\n//     setLastViewMode(viewMode);\r\n//   }, [viewMode, lastViewMode, expandedNodes, savePreviousState]);\r\n\r\n//   // 노드 확장 헬퍼 함수들 - 전역 함수로 등록\r\n//   useEffect(() => {\r\n//     if (!isLoading && !error && treeData && treeData.length > 0) {\r\n//       const items = originalItems;\r\n\r\n//       // NEXUS와 테넌트 노드까지만 확장하는 함수\r\n//       const expandTenantsOnly = () => {\r\n//         // 이전에 테넌트 뷰에서 사용자가 직접 확장/축소한 상태가 있는지 확인\r\n//         const hasCustomTenantState = useTreeStore.getState().previousExpandedState.size > 0;\r\n\r\n//         // 사용자가 직접 조작한 테넌트 뷰 상태가 있으면 복원\r\n//         if (hasCustomTenantState && viewMode === 'tenant') {\r\n//           restorePreviousState();\r\n//           console.log('테넌트 뷰의 사용자 정의 상태 복원됨', useTreeStore.getState().expandedNodes.size);\r\n//           return;\r\n//         }\r\n\r\n//         // 그렇지 않으면 기본 테넌트 확장 상태 생성\r\n//         const newExpanded = new Set<string>();\r\n\r\n//         const expandUpToLevel = (nodes: TreeItem[], currentLevel: number, maxLevel: number) => {\r\n//           for (const node of nodes) {\r\n//             if (currentLevel <= maxLevel) {\r\n//               newExpanded.add(node.id);\r\n//             }\r\n\r\n//             // 중요: 테넌트 모드에서도 캠페인 노드에 확장 버튼이 보이도록 \r\n//             // 캠페인 노드의 자식들도 처리 (스킬 등)\r\n//             if (node.children) {\r\n//               if (currentLevel < maxLevel || node.type === 'campaign') {\r\n//                 expandUpToLevel(node.children, currentLevel + 1, maxLevel);\r\n//               }\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // 루트(0)와 테넌트(1) 레벨까지만 확장 (캠페인 자식은 예외)\r\n//         expandUpToLevel(items, 0, 1);\r\n//         expandNodes(newExpanded);\r\n//         console.log(\"테넌트만 확장: 노드 수\", newExpanded.size);\r\n//       };\r\n\r\n//       // 모든 노드 확장 함수\r\n//       const expandAllNodes = () => {\r\n//         const newExpanded = new Set<string>();\r\n\r\n//         const expandAll = (nodes: TreeItem[]) => {\r\n//           for (const node of nodes) {\r\n//             newExpanded.add(node.id);\r\n//             if (node.children) {\r\n//               expandAll(node.children);\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         expandAll(items);\r\n//         expandNodes(newExpanded);\r\n//         console.log(\"모든 노드 확장: 노드 수\", newExpanded.size);\r\n//       };\r\n\r\n//       // 초기 확장 상태 설정\r\n//       if (selectedNodeType === 'tenant') {\r\n//         expandTenantsOnly();\r\n//       } else {\r\n//         expandAllNodes();\r\n//       }\r\n\r\n//       // 함수를 전역 객체에 등록\r\n//       // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n//       window.expandTenantsOnly = expandTenantsOnly;\r\n//       // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n//       window.expandAllNodes = expandAllNodes;\r\n//     }\r\n//   }, [isLoading, error, treeData, expandNodes, originalItems, selectedNodeType, viewMode, restorePreviousState]);\r\n\r\n//   // 로딩 상태\r\n//   if (isLoading) {\r\n//     return <div className=\"p-2 flex-1 min-h-[calc(100%-148px)] text-sm\">Loading...</div>;\r\n//   }\r\n\r\n//   // 에러 상태\r\n//   if (error) {\r\n//     return <div className=\"p-2 text-red-600 flex-1 min-h-[calc(100%-148px)] text-sm\">{(error as Error).message}</div>;\r\n//   }\r\n\r\n//   // 트리 렌더링\r\n//   return (\r\n//     <div className=\"flex-1 overflow-auto tree-node text-sm\" ref={containerRef}>\r\n//       {sortedItems.map((item: TreeItem) => (\r\n//         <TreeNodeForCampaignTab\r\n//           key={`${item.id}-${forceUpdate}`}\r\n//           item={item}\r\n//           level={0}\r\n//           expandedNodes={expandedNodes}\r\n//           selectedNodeId={selectedNodeId}\r\n//           getStatusIcon={getStatusIcon}\r\n//           onNodeToggle={toggleNode}\r\n//           onNodeSelect={setSelectedNodeId}\r\n//           compact={true}\r\n//         />\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\n\r\nimport { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport { create } from \"zustand\";\r\nimport { TreeItem } from \"@/features/campaignManager/types/typeForSidebar2\";\r\nimport { TreeNodeForCampaignTab } from \"./TreeNodeForCampaignTab\";\r\nimport { useApiForGetTreeMenuDataForSideMenu } from \"@/features/auth/hooks/useApiForGetTreeMenuDataForSideMenu\";\r\nimport { getStatusIcon } from \"@/components/shared/layout/utils/utils\";\r\nimport { useSidebarWidthStore } from \"@/store/useSidebarWidthStore\";\r\nimport { useAuthStore } from \"@/store\";\r\nimport { useTreeMenuStore, ViewMode } from \"@/store/storeForSsideMenuCampaignTab\";\r\n\r\n// 트리 노드 선택/확장 상태 관리\r\ninterface TreeState {\r\n  selectedNodeId: string | undefined;\r\n  expandedNodes: Set<string>;\r\n  previousExpandedState: Set<string>; // 이전 확장 상태 저장\r\n  setSelectedNodeId: (nodeId: string) => void;\r\n  toggleNode: (nodeId: string) => void;\r\n  expandNodes: (nodes: Set<string>) => void;\r\n  savePreviousState: () => void; // 현재 확장 상태를 저장\r\n  restorePreviousState: () => void; // 이전 확장 상태 복원\r\n}\r\n\r\nconst useTreeStore = create<TreeState>((set, get) => ({\r\n  selectedNodeId: undefined,\r\n  expandedNodes: new Set<string>(),\r\n  previousExpandedState: new Set<string>(),\r\n  setSelectedNodeId: (nodeId) => set({ selectedNodeId: nodeId }),\r\n  toggleNode: (nodeId) =>\r\n    set((state) => {\r\n      console.log(`노드 토글: ${nodeId}`);\r\n      const newExpanded = new Set(state.expandedNodes);\r\n      if (newExpanded.has(nodeId)) {\r\n        newExpanded.delete(nodeId);\r\n      } else {\r\n        newExpanded.add(nodeId);\r\n      }\r\n      console.log(`확장된 노드 수: ${newExpanded.size}`);\r\n      return { expandedNodes: newExpanded };\r\n    }),\r\n  expandNodes: (nodes) => set({ expandedNodes: nodes }),\r\n  savePreviousState: () => set((state) => ({\r\n    previousExpandedState: new Set(state.expandedNodes)\r\n  })),\r\n  restorePreviousState: () => set((state) => ({\r\n    expandedNodes: new Set(state.previousExpandedState)\r\n  }))\r\n}));\r\n\r\nexport function TreeMenusForCampaigns() {\r\n  // UI 강제 업데이트용 상태\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n  const [lastViewMode, setLastViewMode] = useState<ViewMode | null>(null);\r\n\r\n  // 인증 스토어에서 테넌트 ID 가져오기\r\n  const { tenant_id } = useAuthStore();\r\n\r\n  // 트리 데이터 API 호출\r\n  const { data: treeData, isLoading, error } = useApiForGetTreeMenuDataForSideMenu();\r\n\r\n  console.log(\"트리 데이터 at 캠페인탭:\", treeData);\r\n  \r\n\r\n  // 트리 노드 선택/확장 상태 관리\r\n  const {\r\n    selectedNodeId,\r\n    expandedNodes,\r\n    setSelectedNodeId,\r\n    toggleNode,\r\n    expandNodes,\r\n    savePreviousState,\r\n    restorePreviousState\r\n  } = useTreeStore();\r\n\r\n  // 원본 아이템을 useMemo로 감싸서 의존성 배열 변경 방지\r\n  const originalItems = useMemo(() => {\r\n    return treeData?.[0]?.items || [];\r\n  }, [treeData]);\r\n\r\n  // expandNodes 함수와 원본 아이템을 전역으로 사용할 수 있도록 저장\r\n  useEffect(() => {\r\n    // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n    window.treeExpandNodes = expandNodes;\r\n    // @ts-expect-error - 전역 객체에 원본 아이템 추가 (window 타입에 정의되지 않은 속성)\r\n    window.originalTreeItems = originalItems;\r\n    // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n    window.treeSavePreviousState = savePreviousState;\r\n    // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n    window.treeRestorePreviousState = restorePreviousState;\r\n  }, [expandNodes, originalItems, savePreviousState, restorePreviousState]);\r\n\r\n  // 통합 스토어에서 정렬 및 필터링 상태 가져오기\r\n  const {\r\n    campaignSort,\r\n    skilIdsForCampaignTreeMenu,\r\n    filterMode,\r\n    viewMode,\r\n    selectedNodeType\r\n  } = useTreeMenuStore();\r\n\r\n  // 사이드바 너비 설정\r\n  const setTabWidth = useSidebarWidthStore?.((state) => state.setTabWidth);\r\n\r\n  // 너비 측정용 ref\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const widthTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // 선택된 스킬 ID 배열 변환\r\n  const selectedSkillIds = Array.isArray(skilIdsForCampaignTreeMenu)\r\n    ? skilIdsForCampaignTreeMenu.map(id => Number(id))\r\n    : [];\r\n\r\n  // 필터링 로직\r\n  function filterTreeItems(items: TreeItem[]): TreeItem[] {\r\n    // 필터 모드가 'all'이면 필터링 없이 모든 항목 반환\r\n    if (filterMode === \"all\") {\r\n      return items;\r\n    }\r\n\r\n    // 스킬 기반 필터링 (filterMode가 'skill' 또는 'filter'인 경우)\r\n    const filteredItems = items.reduce((acc: TreeItem[], node: TreeItem) => {\r\n      if (node.type === \"campaign\") {\r\n        const campaignSkillIds = Array.isArray(node.children)\r\n          ? node.children\r\n            .filter(child => child.type === \"skill\")\r\n            .map(child => Number(child.skillId))\r\n          : [];\r\n        const hasIntersection = selectedSkillIds.some(id => campaignSkillIds.includes(id));\r\n        if (hasIntersection) {\r\n          acc.push(node);\r\n        }\r\n      } else if (node.type === \"folder\") {\r\n        const filteredChildren = node.children ? filterTreeItems(node.children) : [];\r\n        if (node.id === \"nexus\" || filteredChildren.length > 0) {\r\n          acc.push({ ...node, children: filteredChildren });\r\n        }\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    return filteredItems;\r\n  }\r\n\r\n  // 수정된 트리 아이템 정렬 함수\r\n  function sortTreeItems(items: TreeItem[]): TreeItem[] {\r\n    // 정렬 파라미터 가져오기\r\n    const { type: sortType, direction } = campaignSort;\r\n    const sortFactor = direction === 'asc' ? 1 : -1;\r\n    const nodeType = selectedNodeType; // 'all', 'tenant', 'campaign'\r\n\r\n    return items.map(item => {\r\n      // NEXUS 루트 노드 처리\r\n      if (item.id === \"nexus\" && item.children) {\r\n        // 테넌트 폴더와 기타 아이템 분리\r\n        const tenantFolders = item.children.filter(child => child.type === \"folder\");\r\n        const otherItems = item.children.filter(child => child.type !== \"folder\");\r\n\r\n        // 테넌트 폴더 정렬 - 노드 타입이 'all' 또는 'tenant'인 경우에만 \r\n        let sortedTenantFolders = [...tenantFolders];\r\n\r\n        if (nodeType === 'all' || nodeType === 'tenant') {\r\n          // 테넌트 정렬 로직 적용\r\n          if (sortType === \"name\") {\r\n            sortedTenantFolders = sortedTenantFolders.sort((a, b) =>\r\n              sortFactor * a.label.localeCompare(b.label, 'ko')\r\n            );\r\n          } else if (sortType === \"id\") {\r\n            sortedTenantFolders = sortedTenantFolders.sort((a, b) => {\r\n              const aId = parseInt(a.id, 10) || 0;\r\n              const bId = parseInt(b.id, 10) || 0;\r\n              return sortFactor * (aId - bId);\r\n            });\r\n          }\r\n        }\r\n\r\n        // 테넌트 폴더의 자식들 처리\r\n        const processedTenantFolders = sortedTenantFolders.map(tenant => {\r\n          if (tenant.children) {\r\n            // 캠페인과 기타 자식 분리\r\n            const campaignChildren = tenant.children.filter(child => child.type === \"campaign\");\r\n            const otherChildren = tenant.children.filter(child => child.type !== \"campaign\");\r\n\r\n            // 캠페인 정렬 - 노드 타입이 'all' 또는 'campaign'인 경우에만\r\n            let sortedCampaigns = [...campaignChildren];\r\n\r\n            if (nodeType === 'all' || nodeType === 'campaign') {\r\n              // 캠페인 정렬 로직 적용\r\n              if (sortType === \"name\") {\r\n                sortedCampaigns = sortedCampaigns.sort((a, b) =>\r\n                  sortFactor * a.label.localeCompare(b.label, 'ko')\r\n                );\r\n              } else if (sortType === \"id\") {\r\n                sortedCampaigns = sortedCampaigns.sort((a, b) => {\r\n                  const aId = parseInt(a.id, 10) || 0;\r\n                  const bId = parseInt(b.id, 10) || 0;\r\n                  return sortFactor * (aId - bId);\r\n                });\r\n              }\r\n            }\r\n\r\n            // 기타 자식 정렬 (재귀적으로)\r\n            const sortedOtherChildren = sortTreeItems(otherChildren);\r\n\r\n            return {\r\n              ...tenant,\r\n              children: [...sortedCampaigns, ...sortedOtherChildren]\r\n            };\r\n          }\r\n          return tenant;\r\n        });\r\n\r\n        return {\r\n          ...item,\r\n          children: [...processedTenantFolders, ...otherItems]\r\n        };\r\n      }\r\n      // 일반 폴더 아이템 처리\r\n      else if (item.type === \"folder\" && item.children) {\r\n        // 폴더 내의 캠페인 항목 정렬\r\n        const campaignChildren = item.children.filter(child => child.type === \"campaign\");\r\n        const otherChildren = item.children.filter(child => child.type !== \"campaign\");\r\n\r\n        // 캠페인 정렬 - 노드 타입이 'all' 또는 'campaign'인 경우에만\r\n        let sortedCampaigns = [...campaignChildren];\r\n\r\n        if (nodeType === 'all' || nodeType === 'campaign') {\r\n          // 캠페인 정렬 로직 적용\r\n          if (sortType === \"name\") {\r\n            sortedCampaigns = sortedCampaigns.sort((a, b) =>\r\n              sortFactor * a.label.localeCompare(b.label, 'ko')\r\n            );\r\n          } else if (sortType === \"id\") {\r\n            sortedCampaigns = sortedCampaigns.sort((a, b) => {\r\n              const aId = parseInt(a.id, 10) || 0;\r\n              const bId = parseInt(b.id, 10) || 0;\r\n              return sortFactor * (aId - bId);\r\n            });\r\n          }\r\n        }\r\n\r\n        // 기타 자식 정렬\r\n        const sortedOtherChildren = sortTreeItems(otherChildren);\r\n\r\n        return {\r\n          ...item,\r\n          children: [...sortedCampaigns, ...sortedOtherChildren]\r\n        };\r\n      }\r\n\r\n      // 기타 타입은 그대로 반환\r\n      return item;\r\n    });\r\n  }\r\n\r\n  // 정렬 상태가 변경될 때마다 UI 업데이트 강제\r\n  useEffect(() => {\r\n    console.log(\"정렬 상태 변경 감지:\", {\r\n      type: campaignSort.type,\r\n      direction: campaignSort.direction,\r\n      nodeType: selectedNodeType\r\n    });\r\n    setForceUpdate(prev => prev + 1);\r\n  }, [campaignSort.type, campaignSort.direction, selectedNodeType]);\r\n\r\n  // 트리 너비 측정 함수\r\n  const measureTreeWidth = () => {\r\n    if (!containerRef.current || !setTabWidth) return;\r\n\r\n    // 이전 타이머 정리\r\n    if (widthTimeoutRef.current) {\r\n      clearTimeout(widthTimeoutRef.current);\r\n    }\r\n\r\n    // DOM 업데이트 후 측정하도록 지연\r\n    widthTimeoutRef.current = setTimeout(() => {\r\n      if (!containerRef.current) return;\r\n\r\n      // 캠페인 노드의 최대 너비 측정\r\n      let campaignMaxWidth = 0;\r\n      const campaignNodes = containerRef.current.querySelectorAll('.campaign-node');\r\n      if (campaignNodes.length > 0) {\r\n        campaignNodes.forEach((node) => {\r\n          const nodeWidth = (node as HTMLElement).scrollWidth;\r\n          campaignMaxWidth = Math.max(campaignMaxWidth, nodeWidth);\r\n        });\r\n      }\r\n\r\n      // 폴더 노드의 최대 너비 측정\r\n      let folderMaxWidth = 0;\r\n      const folderNodes = containerRef.current.querySelectorAll('.folder-node');\r\n      if (folderNodes.length > 0) {\r\n        folderNodes.forEach((node) => {\r\n          const nodeWidth = (node as HTMLElement).scrollWidth;\r\n          folderMaxWidth = Math.max(folderMaxWidth, nodeWidth);\r\n        });\r\n      }\r\n\r\n      // 전체 트리 아이템의 최대 너비\r\n      let treeMaxWidth = 0;\r\n      const treeItems = containerRef.current.querySelectorAll('.tree-item');\r\n      if (treeItems.length > 0) {\r\n        treeItems.forEach((item) => {\r\n          const itemWidth = (item as HTMLElement).scrollWidth;\r\n          treeMaxWidth = Math.max(treeMaxWidth, itemWidth);\r\n        });\r\n      }\r\n\r\n      // 측정된 너비 중 가장 큰 값 사용\r\n      let maxContentWidth = Math.max(campaignMaxWidth, folderMaxWidth, treeMaxWidth);\r\n\r\n      // 최소값 설정\r\n      maxContentWidth = Math.max(maxContentWidth, 200);\r\n\r\n      // 여백 추가 (항상 캠페인 여백 사용)\r\n      const idealWidth = maxContentWidth + 25;\r\n\r\n      // 캠페인 탭 너비 설정\r\n      //setTabWidth(\"campaign\", idealWidth);\r\n    }, 300);\r\n  };\r\n\r\n  // 필터링/정렬 적용\r\n  const filteredItems = filterTreeItems(originalItems);\r\n  const sortedItems = sortTreeItems(filteredItems);\r\n\r\n  // 데이터나 필터, 정렬 변경 시 너비 재측정\r\n  useEffect(() => {\r\n    if (!isLoading && !error && sortedItems.length > 0) {\r\n      const timer = setTimeout(() => {\r\n        measureTreeWidth();\r\n      }, 500);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [\r\n    isLoading,\r\n    error,\r\n    sortedItems.length,\r\n    campaignSort.type,\r\n    campaignSort.direction,\r\n    filterMode,\r\n    selectedSkillIds.length,\r\n    viewMode,\r\n    selectedNodeType,\r\n    forceUpdate,\r\n    measureTreeWidth\r\n  ]);\r\n\r\n  // 컴포넌트 언마운트 시 타이머 정리\r\n  useEffect(() => {\r\n    return () => {\r\n      if (widthTimeoutRef.current) {\r\n        clearTimeout(widthTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 뷰 모드 변경 감지\r\n  useEffect(() => {\r\n    // 뷰 모드가 변경될 때마다 현재 확장 상태를 저장\r\n    if (lastViewMode !== null && lastViewMode !== viewMode) {\r\n      // 테넌트 모드에서 캠페인 모드로 전환하는 경우, 테넌트 모드의 상태를 저장\r\n      if (lastViewMode === 'tenant' && viewMode === 'campaign') {\r\n        savePreviousState();\r\n        console.log('테넌트 뷰 상태 저장됨', expandedNodes.size);\r\n      }\r\n    }\r\n\r\n    setLastViewMode(viewMode);\r\n  }, [viewMode, lastViewMode, expandedNodes, savePreviousState]);\r\n\r\n  // 노드 확장 헬퍼 함수들 - 전역 함수로 등록\r\n  useEffect(() => {\r\n    if (!isLoading && !error && treeData && treeData.length > 0) {\r\n      const items = originalItems;\r\n\r\n      // NEXUS와 테넌트 노드까지만 확장하는 함수\r\n      // NEXUS와 테넌트 노드까지만 확장하는 함수\r\n      const expandTenantsOnly = () => {\r\n        // 이전에 테넌트 뷰에서 사용자가 직접 확장/축소한 상태가 있는지 확인\r\n        const hasCustomTenantState = useTreeStore.getState().previousExpandedState.size > 0;\r\n\r\n        // 사용자가 직접 조작한 테넌트 뷰 상태가 있으면 복원\r\n        if (hasCustomTenantState && viewMode === 'tenant') {\r\n          restorePreviousState();\r\n          console.log('테넌트 뷰의 사용자 정의 상태 복원됨', useTreeStore.getState().expandedNodes.size);\r\n          return;\r\n        }\r\n\r\n        // 그렇지 않으면 기본 테넌트 확장 상태 생성 - 루트 노드만 확장\r\n        const newExpanded = new Set<string>();\r\n\r\n        // 루트 노드(NEXUS)만 확장\r\n        const rootNode = items.find(item => item.id.toLowerCase() === \"nexus\");\r\n        if (rootNode) {\r\n          newExpanded.add(rootNode.id);\r\n\r\n          // 루트 노드의 직계 자식(테넌트)은 접힌 상태로 시작\r\n          // 테넌트 노드의 ID를 추가하지 않음 (접힌 상태로 유지)\r\n        }\r\n\r\n        expandNodes(newExpanded);\r\n        console.log(\"테넌트 뷰: 루트만 확장, 테넌트 폴더는 접힘 상태\", newExpanded.size);\r\n      };\r\n\r\n      // 모든 노드 확장 함수\r\n      // const expandAllNodes = () => {\r\n      //   // 루트 노드만 확장하는 초기 상태\r\n      //   const newExpanded = new Set<string>();\r\n\r\n      //   // 루트 노드(NEXUS)만 확장하고 나머지는 접힌 상태로 시작\r\n      //   const rootNode = items.find(item => item.id.toLowerCase() === \"nexus\");\r\n      //   if (rootNode) {\r\n      //     newExpanded.add(rootNode.id);\r\n\r\n      //     // 루트 노드의 직계 자식(테넌트)은 접힌 상태로 시작\r\n      //     // 테넌트 노드의 ID를 추가하지 않음 (접힌 상태로 유지)\r\n      //   }\r\n\r\n      //   expandNodes(newExpanded);\r\n      //   console.log(\"캠페인 뷰: 루트만 확장, 필요시 수동으로 확장 가능\", newExpanded.size);\r\n      // };\r\n\r\n      const expandAllNodes = () => {\r\n        const newExpanded = new Set<string>();\r\n\r\n        const expandAll = (nodes: TreeItem[]) => {\r\n          for (const node of nodes) {\r\n            // 자식 노드가 있는 경우에만 expanded 상태에 추가\r\n            if (node.children && node.children.length > 0) {\r\n              newExpanded.add(node.id);\r\n              expandAll(node.children);\r\n            }\r\n          }\r\n        };\r\n\r\n        expandAll(items);\r\n        expandNodes(newExpanded);\r\n        console.log(\"캠페인 뷰: 자식이 있는 노드만 확장됨\", newExpanded.size);\r\n      };\r\n\r\n      // 초기 확장 상태 설정\r\n      if (selectedNodeType === 'tenant') {\r\n        expandTenantsOnly();\r\n      } else {\r\n        expandAllNodes();\r\n      }\r\n\r\n      // 함수를 전역 객체에 등록\r\n      // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n      window.expandTenantsOnly = expandTenantsOnly;\r\n      // @ts-expect-error - 전역 객체에 함수 추가 (window 타입에 정의되지 않은 속성)\r\n      window.expandAllNodes = expandAllNodes;\r\n    }\r\n  }, [isLoading, error, treeData, expandNodes, originalItems, selectedNodeType, viewMode, restorePreviousState]);\r\n\r\n  // 로딩 상태\r\n  if (isLoading) {\r\n    return <div className=\"p-2 flex-1 min-h-[calc(100%-148px)] text-sm\">Loading...</div>;\r\n  }\r\n\r\n  // 에러 상태\r\n  if (error) {\r\n    return <div className=\"p-2 text-red-600 flex-1 min-h-[calc(100%-148px)] text-sm\">{(error as Error).message}</div>;\r\n  }\r\n\r\n  // 트리 렌더링\r\n  return (\r\n    <div className=\"flex-1 overflow-auto tree-node text-sm\" ref={containerRef}>\r\n      {sortedItems.map((item: TreeItem) => (\r\n        <TreeNodeForCampaignTab\r\n          key={`${item.id}-${forceUpdate}`}\r\n          item={item}\r\n          level={0}\r\n          expandedNodes={expandedNodes}\r\n          selectedNodeId={selectedNodeId}\r\n          getStatusIcon={getStatusIcon}\r\n          onNodeToggle={toggleNode}\r\n          onNodeSelect={setSelectedNodeId}\r\n          compact={true}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5035, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5041, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/apiForSidebarCounselorTab.ts"],"sourcesContent":["// C:\\Users\\terec\\fe_pdsw\\src\\features\\campaignManager\\api\\apiForSidebarCounselorTab.ts\r\nimport { MainCredentials2 } from \"@/features/auth/types/mainIndex\";\r\nimport { axiosInstance, axiosRedisInstance } from \"@/lib/axios\";\r\nimport { Counselor, CounselorNode, GroupNode, TabData, TeamNode, TenantNode } from \"../types/typeForSideBarCounselorTab\";\r\nimport { IParmaterForFetchCounsolorList } from \"../types/typeForSideBarCounselorTab2\";\r\n\r\nexport async function apiToFetchCounselorListForSideBar({\r\n  tenant_id,\r\n  roleId\r\n}: IParmaterForFetchCounsolorList) {\r\n  const response = await axiosRedisInstance.get(\r\n    // `/counselor/list?tenantId=${tenant_id}&roleId=${roleId}`\r\n    `/counselor/list?tenantId=${tenant_id}`\r\n  );\r\n  \r\n  console.log(\"response.data at 상담사 api 함수 ! : \", response.data);\r\n  \r\n\r\n  return response.data;\r\n}"],"names":[],"mappings":"AAAA,uFAAuF;;;;AAEvF;;AAIO,eAAe,kCAAkC,EACtD,SAAS,EACT,MAAM,EACyB;IAC/B,MAAM,WAAW,MAAM,sHAAA,CAAA,qBAAkB,CAAC,GAAG,CAC3C,2DAA2D;IAC3D,CAAC,yBAAyB,EAAE,WAAW;IAGzC,QAAQ,GAAG,CAAC,oCAAoC,SAAS,IAAI;IAG7D,OAAO,SAAS,IAAI;AACtB"}},
    {"offset": {"line": 5056, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5062, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForGetDataForSidebarCounselorTab.tsx"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForGetDataForSidebarCounselorTab.tsx\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { apiToFetchCounselorListForSideBar } from '../api/apiForSidebarCounselorTab';\r\nimport { IResponseTypeForApiForGetCounselorList } from '../types/typeForSideBarCounselorTab2';\r\n\r\nexport function useApiForSidebarCounselor(tenant_id: string, role_id: string) {\r\n  return useQuery<IResponseTypeForApiForGetCounselorList, Error>({\r\n    queryKey: ['counselorList', tenant_id, role_id],\r\n    queryFn: () => apiToFetchCounselorListForSideBar({ tenant_id, roleId: role_id }),\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n}"],"names":[],"mappings":"AAAA,gFAAgF;;;;AAEhF;AADA;;;;AAIO,SAAS,0BAA0B,SAAiB,EAAE,OAAe;;IAC1E,OAAO,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAiD;QAC7D,UAAU;YAAC;YAAiB;YAAW;SAAQ;QAC/C,OAAO;kDAAE,IAAM,CAAA,GAAA,yKAAA,CAAA,oCAAiC,AAAD,EAAE;oBAAE;oBAAW,QAAQ;gBAAQ;;QAC9E,WAAW,IAAI,KAAK;IACtB;AACF;GANgB;;QACP,8KAAA,CAAA,WAAQ"}},
    {"offset": {"line": 5096, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5102, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenus/IContextMenuForTennantForCounselorTreeMenu.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import {\r\n//   ContextMenu,\r\n//   ContextMenuContent,\r\n//   ContextMenuItem,\r\n//   ContextMenuTrigger,\r\n//   ContextMenuSub,\r\n//   ContextMenuSubTrigger,\r\n//   ContextMenuSubContent,\r\n// } from \"@/components/ui/context-menu\";\r\n// import { Users, History, Check } from \"lucide-react\";\r\n// import { useCounselorFilterStore } from \"@/store/storeForSideMenuCounselorTab\";\r\n// import Image from \"next/image\";\r\n\r\n// interface IContextMenuForTennantForCounselorTreeMenuProps {\r\n//   children: React.ReactNode;\r\n//   onViewHistory?: () => void;\r\n// }\r\n\r\n// export function IContextMenuForTennantForCounselorTreeMenu({\r\n//   children,\r\n//   onViewHistory,\r\n// }: IContextMenuForTennantForCounselorTreeMenuProps) {\r\n//   const { selectedBlendKind, setSelectedBlendKind, resetFilter } = useCounselorFilterStore();\r\n\r\n//   return (\r\n//     <ContextMenu>\r\n//       <ContextMenuTrigger>{children}</ContextMenuTrigger>\r\n//       <ContextMenuContent className=\"w-[150px]\">\r\n//         <ContextMenuSub>\r\n//           <ContextMenuSubTrigger>\r\n//             {/* <Users className=\"mr-2 h-4 w-4\" /> */}\r\n//             상담사 보기\r\n//           </ContextMenuSubTrigger>\r\n//           <ContextMenuSubContent className=\"w-[150px]\">\r\n//             <ContextMenuItem onClick={() => {\r\n//               resetFilter();\r\n//               onViewHistory?.();\r\n//             }}>\r\n//               <History className=\"mr-2 h-4 w-4\" />\r\n//               <span className=\"flex-1\">전체 보기</span>\r\n//               {selectedBlendKind === null && <Check className=\"h-4 w-4 text-green-600\" />}\r\n//             </ContextMenuItem>\r\n//             <ContextMenuItem onClick={() => setSelectedBlendKind(1)}>\r\n//               <Image src=\"/tree-menu/inbound_counselor.png\" alt=\"인바운드\" width={15} height={12} className=\"mr-2\"/>\r\n//               <span className=\"flex-1\">인바운드</span>\r\n//               {selectedBlendKind === 1 && <Check className=\"h-4 w-4 text-green-600\" />}\r\n//             </ContextMenuItem>\r\n//             <ContextMenuItem onClick={() => setSelectedBlendKind(2)}>\r\n//               <Image src=\"/tree-menu/outbound_counselor.png\" alt=\"아웃바운드\" width={15} height={12} className=\"mr-2\" />\r\n//               <span className=\"flex-1\">아웃바운드</span>\r\n//               {selectedBlendKind === 2 && <Check className=\"h-4 w-4 text-green-600\" />}\r\n//             </ContextMenuItem>\r\n//             {/* <ContextMenuItem onClick={() => setSelectedBlendKind(3)}>\r\n//               <Image src=\"/tree-menu/inbound_outbound_mix.png\" alt=\"블렌드\" width={15} height={12} className=\"mr-2\"/>\r\n//               <span className=\"flex-1\">블렌드</span>\r\n//               {selectedBlendKind === 3 && <Check className=\"h-4 w-4 text-green-600\" />}\r\n//             </ContextMenuItem> */}\r\n//           </ContextMenuSubContent>\r\n//         </ContextMenuSub>\r\n//       </ContextMenuContent>\r\n//     </ContextMenu>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\n\r\nimport {\r\n  ContextMenu,\r\n  ContextMenuContent,\r\n  ContextMenuItem,\r\n  ContextMenuTrigger,\r\n  ContextMenuSub,\r\n  ContextMenuSubTrigger,\r\n  ContextMenuSubContent,\r\n} from \"@/components/ui/context-menu\";\r\nimport { Users, History, Check } from \"lucide-react\";\r\nimport { useCounselorFilterStore } from \"@/store/storeForSideMenuCounselorTab\";\r\nimport Image from \"next/image\";\r\n\r\ninterface IContextMenuForTennantForCounselorTreeMenuProps {\r\n  children: React.ReactNode;\r\n  onViewHistory?: () => void;\r\n}\r\n\r\nexport function IContextMenuForTennantForCounselorTreeMenu({\r\n  children,\r\n  onViewHistory,\r\n}: IContextMenuForTennantForCounselorTreeMenuProps) {\r\n  const { selectedBlendKind, setSelectedBlendKind, resetFilter } = useCounselorFilterStore();\r\n\r\n  return (\r\n    <ContextMenu>\r\n      <ContextMenuTrigger>{children}</ContextMenuTrigger>\r\n      <ContextMenuContent className=\"w-[150px]\">\r\n        <ContextMenuSub>\r\n          <ContextMenuSubTrigger>\r\n            {/* <Users className=\"mr-2 h-4 w-4\" /> */}\r\n            상담사 보기\r\n          </ContextMenuSubTrigger>\r\n          <ContextMenuSubContent className=\"w-[150px]\">\r\n            <ContextMenuItem onClick={() => {\r\n              resetFilter();\r\n              onViewHistory?.();\r\n            }}>\r\n              <History className=\"mr-2 h-4 w-4\" />\r\n              <span className=\"flex-1\">전체 보기</span>\r\n              {selectedBlendKind === null && <Check className=\"h-4 w-4 text-green-600\" />}\r\n            </ContextMenuItem>\r\n            <ContextMenuItem onClick={() => setSelectedBlendKind(1)}>\r\n              <Image src=\"/tree-menu/inbound_counselor.png\" alt=\"인바운드\" width={15} height={12} className=\"mr-2\"/>\r\n              <span className=\"flex-1\">인바운드</span>\r\n              {selectedBlendKind === 1 && <Check className=\"h-4 w-4 text-green-600\" />}\r\n            </ContextMenuItem>\r\n            <ContextMenuItem onClick={() => setSelectedBlendKind(2)}>\r\n              <Image src=\"/tree-menu/outbound_counselor.png\" alt=\"아웃바운드\" width={15} height={12} className=\"mr-2\" />\r\n              <span className=\"flex-1\">아웃바운드</span>\r\n              {selectedBlendKind === 2 && <Check className=\"h-4 w-4 text-green-600\" />}\r\n            </ContextMenuItem>\r\n            {/* <ContextMenuItem onClick={() => setSelectedBlendKind(3)}>\r\n              <Image src=\"/tree-menu/inbound_outbound_mix.png\" alt=\"블렌드\" width={15} height={12} className=\"mr-2\"/>\r\n              <span className=\"flex-1\">블렌드</span>\r\n              {selectedBlendKind === 3 && <Check className=\"h-4 w-4 text-green-600\" />}\r\n            </ContextMenuItem> */}\r\n          </ContextMenuSubContent>\r\n        </ContextMenuSub>\r\n      </ContextMenuContent>\r\n    </ContextMenu>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB,WAAW;AACX,iBAAiB;AACjB,wBAAwB;AACxB,qBAAqB;AACrB,wBAAwB;AACxB,oBAAoB;AACpB,2BAA2B;AAC3B,2BAA2B;AAC3B,yCAAyC;AACzC,wDAAwD;AACxD,kFAAkF;AAClF,kCAAkC;AAElC,8DAA8D;AAC9D,+BAA+B;AAC/B,gCAAgC;AAChC,IAAI;AAEJ,+DAA+D;AAC/D,cAAc;AACd,mBAAmB;AACnB,wDAAwD;AACxD,gGAAgG;AAEhG,aAAa;AACb,oBAAoB;AACpB,4DAA4D;AAC5D,mDAAmD;AACnD,2BAA2B;AAC3B,oCAAoC;AACpC,yDAAyD;AACzD,qBAAqB;AACrB,qCAAqC;AACrC,0DAA0D;AAC1D,gDAAgD;AAChD,+BAA+B;AAC/B,mCAAmC;AACnC,kBAAkB;AAClB,qDAAqD;AACrD,sDAAsD;AACtD,6FAA6F;AAC7F,iCAAiC;AACjC,wEAAwE;AACxE,mHAAmH;AACnH,qDAAqD;AACrD,0FAA0F;AAC1F,iCAAiC;AACjC,wEAAwE;AACxE,sHAAsH;AACtH,sDAAsD;AACtD,0FAA0F;AAC1F,iCAAiC;AACjC,4EAA4E;AAC5E,qHAAqH;AACrH,oDAAoD;AACpD,0FAA0F;AAC1F,qCAAqC;AACrC,qCAAqC;AACrC,4BAA4B;AAC5B,8BAA8B;AAC9B,qBAAqB;AACrB,OAAO;AACP,IAAI;;;;;AAIJ;AAUA;AACA;AAFA;AAAA;;;AAXA;;;;;AAoBO,SAAS,2CAA2C,EACzD,QAAQ,EACR,aAAa,EACmC;;IAChD,MAAM,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD;IAEvF,qBACE,6LAAC,8IAAA,CAAA,cAAW;;0BACV,6LAAC,8IAAA,CAAA,qBAAkB;0BAAE;;;;;;0BACrB,6LAAC,8IAAA,CAAA,qBAAkB;gBAAC,WAAU;0BAC5B,cAAA,6LAAC,8IAAA,CAAA,iBAAc;;sCACb,6LAAC,8IAAA,CAAA,wBAAqB;sCACsB;;;;;;sCAG5C,6LAAC,8IAAA,CAAA,wBAAqB;4BAAC,WAAU;;8CAC/B,6LAAC,8IAAA,CAAA,kBAAe;oCAAC,SAAS;wCACxB;wCACA;oCACF;;sDACE,6LAAC,2MAAA,CAAA,UAAO;4CAAC,WAAU;;;;;;sDACnB,6LAAC;4CAAK,WAAU;sDAAS;;;;;;wCACxB,sBAAsB,sBAAQ,6LAAC,uMAAA,CAAA,QAAK;4CAAC,WAAU;;;;;;;;;;;;8CAElD,6LAAC,8IAAA,CAAA,kBAAe;oCAAC,SAAS,IAAM,qBAAqB;;sDACnD,6LAAC,gIAAA,CAAA,UAAK;4CAAC,KAAI;4CAAmC,KAAI;4CAAO,OAAO;4CAAI,QAAQ;4CAAI,WAAU;;;;;;sDAC1F,6LAAC;4CAAK,WAAU;sDAAS;;;;;;wCACxB,sBAAsB,mBAAK,6LAAC,uMAAA,CAAA,QAAK;4CAAC,WAAU;;;;;;;;;;;;8CAE/C,6LAAC,8IAAA,CAAA,kBAAe;oCAAC,SAAS,IAAM,qBAAqB;;sDACnD,6LAAC,gIAAA,CAAA,UAAK;4CAAC,KAAI;4CAAoC,KAAI;4CAAQ,OAAO;4CAAI,QAAQ;4CAAI,WAAU;;;;;;sDAC5F,6LAAC;4CAAK,WAAU;sDAAS;;;;;;wCACxB,sBAAsB,mBAAK,6LAAC,uMAAA,CAAA,QAAK;4CAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAY3D;GA5CgB;;QAImD,+IAAA,CAAA,0BAAuB;;;KAJ1E"}},
    {"offset": {"line": 5344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5350, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/api/apiForCounselorSkil.ts"],"sourcesContent":["// src/features/campaignManager/api/apiForCounselorSkill.ts\r\nimport { axiosInstance } from \"@/lib/axios\";\r\nimport {\r\n  CounselorSkillApiError,\r\n  CounselorSkillAssignmentRequest,\r\n  CounselorSkillAssignmentResponse,\r\n  CounselorSkillListResponse,\r\n  CounselorSkillRequestData\r\n} from \"../types/typeForCounselorSkill\";\r\nimport { customAlertService } from \"@/components/shared/layout/utils/CustomAlertService\";\r\n\r\n/**\r\n * 상담사에게 선택한 스킬들을 할당하는 API\r\n * @param counselorIds 상담사 ID 배열 (여러 명 가능)\r\n * @param selectedSkills 선택한 스킬 ID 배열\r\n * @returns 각 요청의 응답 결과 배열\r\n */\r\nexport async function assignSkillsToCounselor(\r\n  counselorIds: string[],\r\n  selectedSkills: number[]\r\n): Promise<CounselorSkillAssignmentResponse[]> {\r\n  console.log(\"✅ 상담사 스킬 할당 API 호출!\");\r\n  console.log(\"🎯 상담사 목록:\", counselorIds);\r\n  console.log(\"🔗 할당할 스킬 목록:\", selectedSkills);\r\n\r\n  const requests = selectedSkills.map((skillId) =>\r\n    axiosInstance.put<CounselorSkillAssignmentResponse>(\r\n      `skills/${skillId}/agent-list`,\r\n      {\r\n        request_data: {\r\n          agent_id: counselorIds,\r\n        } as CounselorSkillAssignmentRequest[\"request_data\"],\r\n      }\r\n    ).then((response) => response.data)\r\n  );\r\n\r\n  return Promise.all(requests);\r\n}\r\n\r\n/**\r\n * 상담사에게 할당 가능한 스킬 목록을 조회하는 API\r\n * @param tenantId 테넌트 ID\r\n * @returns 할당 가능한 스킬 목록\r\n */\r\nexport const getAssignableSkillsForCounselor = async (tenantId: number): Promise<CounselorSkillListResponse> => {\r\n\r\n  // console.log(\"📌 상담사 할당 가능 스킬 목록 조회 시작:\", tenantId);\r\n  // console.log(\"🔗 테넌트 ID 타입:\", typeof tenantId);\r\n  // console.log(\"🔗 테넌트 ID for 캠페인 탭 헤더 :\", tenantId);\r\n\r\n  const skillRequestData: CounselorSkillRequestData = {\r\n    filter: {\r\n      skill_id: { start: 1, end: 9999 },\r\n      // tenant_id: [tenantId],\r\n      tenant_id: tenantId !== 0 ? [tenantId] : undefined,\r\n    },\r\n    // sort: {\r\n    //   skill_id: 0,\r\n    //   tenant_id: 0,\r\n    // },\r\n    page: {\r\n      index: 1,\r\n      items: 10\r\n    },\r\n    sort: {\r\n      skill_id: 1,\r\n      tenant_id: 10\r\n    }\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<CounselorSkillListResponse>(\r\n      \"collections/skill\",\r\n      skillRequestData\r\n    );\r\n    // console.log(\"✅ 상담사 할당 가능 스킬 목록 조회 성공 ???????????????????????????? \", data);\r\n\r\n    return data;\r\n\r\n    // if (data.result_code === 0 && data.result_msg === \"Success\") {\r\n    //   console.log(\"✅ 상담사 할당 가능 스킬 목록 조회 성공:\", data);\r\n    //   return data;\r\n    // } else {\r\n    //   throw new Error(`API Error: ${data.result_msg}`);\r\n    // }\r\n  } catch (error) {\r\n    const typedError = error as CounselorSkillApiError;\r\n    throw new Error(\r\n      typedError.response?.data?.result_msg || \"상담사 스킬 목록을 가져오는 데 실패했습니다.\"\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * 상담사가 보유한 스킬 목록을 조회하는 API\r\n * @param counselorId 상담사 ID\r\n * @returns 상담사가 현재 보유한 스킬 목록\r\n */\r\nexport const getAssignedSkillsForCounselor = async (\r\n  counselorId: string\r\n): Promise<CounselorSkillListResponse> => {\r\n  // console.log(\"📌 상담사 스킬 데이터 조회 시작:\", counselorId);\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<CounselorSkillListResponse>(\r\n      \"/collections/agent-skill\",\r\n      {\r\n        filter: { agent_id: [counselorId] },\r\n        sort: {},\r\n        page: { index: 1, items: 10 },\r\n      }\r\n    );\r\n\r\n    // console.log(\"✅ 상담사가 보유한 스킬 목록 조회 성공:\", data);\r\n    return data;\r\n  } catch (error) {\r\n    const typedError = error as CounselorSkillApiError;\r\n    console.error(\"❌ 상담사 스킬 목록 조회 실패:\", error);\r\n    throw new Error(\r\n      typedError.response?.data?.result_msg || \"상담사의 스킬 목록을 가져오는 데 실패했습니다.\"\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * 상담사가 보유한 스킬과 할당 가능한 스킬을 동시에 가져오는 API\r\n * @param counselorId 상담사 ID\r\n * @param tenantId 테넌트 ID\r\n * @returns 상담사가 보유한 스킬 목록과 할당 가능한 스킬 목록\r\n */\r\nexport const apiForGetRelatedInfoForAssignSkilToCounselor = async (\r\n  counselorId: string,\r\n  tenantId: number\r\n): Promise<{ assignedSkills: CounselorSkillListResponse; assignableSkills: CounselorSkillListResponse }> => {\r\n  // console.log(\"📌 상담사 스킬 데이터 조회 시작:\", counselorId, tenantId);\r\n\r\n  try {\r\n    const [assignedSkills, assignableSkills] = await Promise.all([\r\n      getAssignedSkillsForCounselor(counselorId), // 상담사가 보유한 스킬\r\n      getAssignableSkillsForCounselor(tenantId), // 할당 가능한 스킬 목록\r\n    ]);\r\n\r\n    // console.log(\"✅ 상담사가 보유한 스킬 목록:\", assignedSkills);\r\n    // console.log(\"✅ 상담사에게 할당 가능한 스킬 목록:\", assignableSkills);\r\n\r\n    return { assignedSkills, assignableSkills };\r\n  } catch (error) {\r\n    console.error(\"❌ 상담사 스킬 조회 실패:\", error);\r\n    throw new Error(\"스킬 데이터를 가져오는 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n\r\n// 스킬을 가진 상담사 리스트에서 특정 상담사를 제외하는 api 요청 함수\r\n// skills/{skill_id}/agent-lis , apiForDeleteCounselorsForSpecificSkil\r\n/**\r\n * 특정 스킬을 가진 상담사 목록에서 지정된 상담사들을 제외하는 API\r\n * @param skillId 스킬 ID\r\n * @param counselorIds 제외할 상담사 ID 배열\r\n * @returns API 응답 결과\r\n */\r\nexport const apiForDeleteCounselorsForSpecificSkill = async (\r\n  skillId: number,\r\n  counselorIds: string[]\r\n): Promise<CounselorSkillAssignmentResponse> => {\r\n  console.log(\"📌 스킬에서 상담사 해제 시작\");\r\n  console.log(\"🎯 대상 스킬 ID:\", skillId);\r\n  console.log(\"🔗 해제할 상담사 목록:\", counselorIds);\r\n\r\n  try {\r\n    // API 엔드포인트가 정확하지 않을 수 있으므로 실제 API에 맞게 수정 필요\r\n    const { data } = await axiosInstance.delete<CounselorSkillAssignmentResponse>(\r\n      `skills/${skillId}/agent-list`,\r\n      {\r\n        data: {\r\n          request_data: {\r\n            agent_id: counselorIds\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log(\"✅ 스킬을 가진 상담사 목록에서 특정 상담사들 해제 성공:\", data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"❌ 스킬에서 상담사 해제 실패:\", error);\r\n    const typedError = error as CounselorSkillApiError;\r\n    throw new Error(\r\n      typedError.response?.data?.result_msg || \"스킬에서 상담사 해제 중 오류가 발생했습니다.\"\r\n    );\r\n  }\r\n};\r\n\r\n// apiForDeleteCounselorsForSpecificSkill 를 post 로 바꾸면 된다 to apiForAddCounselorsForSpecificSkills\r\n// 특정 스킬에 대한 상담사 목록에 대한 추가 api 이다 apiForDeleteCounselorsForSpecificSkill 와 url 같고 http method 만 post 야 구현해줘 copilot 아래에 구현 해줘\r\nexport const apiForAddCounselorsForSpecificSkill = async (\r\n  skillId: number,\r\n  counselorIds: string[]\r\n): Promise<CounselorSkillAssignmentResponse> => {\r\n  console.log(\"📌 스킬에 상담사 추가 시작\");\r\n  console.log(\"🎯 대상 스킬 ID:\", skillId);\r\n  console.log(\"🔗 추가할 상담사 목록:\", counselorIds);\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<CounselorSkillAssignmentResponse>(\r\n      `skills/${skillId}/agent-list`,\r\n      {\r\n        request_data: {\r\n          agent_id: counselorIds\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log(\"✅ 스킬을 가진 상담사 목록에 특정 상담사들 추가 성공:\", data);\r\n    return data;\r\n  } catch (error:any) {\r\n\r\n    if (error.response.data.result_code === 5) {\r\n      // 세션 만료 시 알럿 표시 후 로그인 페이지로 리다이렉트\r\n      customAlertService.error('로그인 세션이 만료되었습니다. 다시 로그인 해주세요.', '세션 만료', () => {\r\n        window.location.href = '/login';\r\n      });\r\n    }\r\n\r\n    console.error(\"❌ 스킬에 상담사 추가 실패:\", error);\r\n    const typedError = error as CounselorSkillApiError;\r\n    throw new Error(\r\n      typedError.response?.data?.result_msg || \"스킬에 상담사 추가 중 오류가 발생했습니다.\"\r\n    );\r\n  }\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5512, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/preferences/hooks/useApiForGetRelatedInfoForAssignSkilToCounselor.tsx"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForGetRelatedInfoForAssignSkilToCounselor.ts\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { CounselorSkillListResponse } from \"@/features/campaignManager/types/typeForCounselorSkill\";\r\nimport { apiForGetRelatedInfoForAssignSkilToCounselor } from \"@/features/campaignManager/api/apiForCounselorSkil\";\r\n\r\n/**\r\n * 상담사의 보유 스킬 및 할당 가능한 스킬을 가져오는 커스텀 훅\r\n * @param counselorId 상담사 ID (null 가능)\r\n * @param tenantId 테넌트 ID\r\n * @returns 상담사가 보유한 스킬과 할당 가능한 스킬 목록, 로딩 상태, 에러 정보\r\n */\r\nexport const useApiForGetRelatedInfoForAssignSkilToCounselor = (\r\n    counselorId: string | null,\r\n    tenantId: number\r\n) => {\r\n    console.log(\"📌 useApiForGetRelatedInfoForAssignSkilToCounselor 실행:\", counselorId, tenantId);\r\n\r\n    // 상태 관리\r\n    const [assignedSkills, setAssignedSkills] = useState<CounselorSkillListResponse | null>(null);\r\n    const [assignableSkills, setAssignableSkills] = useState<CounselorSkillListResponse | null>(null);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!counselorId) return;\r\n\r\n            setIsLoading(true);\r\n            setError(null);\r\n\r\n            try {\r\n                const { assignedSkills, assignableSkills } = await apiForGetRelatedInfoForAssignSkilToCounselor(\r\n                    counselorId,\r\n                    tenantId\r\n                );\r\n\r\n                // console.log(\"✅ 상담사가 보유한 스킬:\", assignedSkills);\r\n                console.log(\"✅ 상담사에게 할당 가능한 스킬:\", assignableSkills);\r\n\r\n                setAssignedSkills(assignedSkills);\r\n                setAssignableSkills(assignableSkills);\r\n            } catch (err) {\r\n                console.error(\"❌ 상담사 스킬 데이터 불러오기 실패:\", err);\r\n                setError(\"스킬 데이터를 불러오는 중 오류가 발생했습니다.\");\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [counselorId, tenantId]);\r\n\r\n    return { assignedSkills, assignableSkills, isLoading, error };\r\n};\r\n"],"names":[],"mappings":"AAAA,wFAAwF;;;;AAExF;AAEA;;;;AAQO,MAAM,kDAAkD,CAC3D,aACA;;IAEA,QAAQ,GAAG,CAAC,0DAA0D,aAAa;IAEnF,QAAQ;IACR,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAqC;IACxF,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAqC;IAC5F,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qEAAE;YACN,MAAM;uFAAY;oBACd,IAAI,CAAC,aAAa;oBAElB,aAAa;oBACb,SAAS;oBAET,IAAI;wBACA,MAAM,EAAE,cAAc,EAAE,gBAAgB,EAAE,GAAG,MAAM,CAAA,GAAA,mKAAA,CAAA,+CAA4C,AAAD,EAC1F,aACA;wBAGJ,iDAAiD;wBACjD,QAAQ,GAAG,CAAC,sBAAsB;wBAElC,kBAAkB;wBAClB,oBAAoB;oBACxB,EAAE,OAAO,KAAK;wBACV,QAAQ,KAAK,CAAC,yBAAyB;wBACvC,SAAS;oBACb,SAAU;wBACN,aAAa;oBACjB;gBACJ;;YAEA;QACJ;oEAAG;QAAC;QAAa;KAAS;IAE1B,OAAO;QAAE;QAAgB;QAAkB;QAAW;IAAM;AAChE;GA1Ca"}},
    {"offset": {"line": 5567, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5573, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiDeleteCounselorsFromSkills.ts"],"sourcesContent":["// src/features/campaignManager/hooks/useApiDeleteCounselorsFromSkills.ts\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { CounselorSkillAssignmentResponse, CounselorSkillApiError } from '../types/typeForCounselorSkill';\r\nimport { apiForDeleteCounselorsForSpecificSkill } from '../api/apiForCounselorSkil';\r\n\r\ninterface DeleteCounselorsFromSkillsParams {\r\n  skillIds: number[];\r\n  counselorIds: string[];\r\n  tenantId: string;\r\n  concurrentLimit?: number;\r\n}\r\n\r\ninterface BatchDeleteResult {\r\n  success: boolean;\r\n  successCount: number;\r\n  failedSkills: number[];\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * 여러 스킬에서 여러 상담사을 한 번에 해제하는 커스텀 훅\r\n */\r\nexport function useApiDeleteCounselorsFromSkills(tenantId: string) {\r\n  const queryClient = useQueryClient();\r\n\r\n  // 배치 처리 유틸리티 함수\r\n  const processBatchDeletion = async ({\r\n    skillIds,\r\n    counselorIds,\r\n    concurrentLimit = 3\r\n  }: Omit<DeleteCounselorsFromSkillsParams, 'tenantId'>) => {\r\n    // 결과 추적용 객체\r\n    const result: BatchDeleteResult = {\r\n      success: true,\r\n      successCount: 0,\r\n      failedSkills: []\r\n    };\r\n\r\n    try {\r\n      // 여러 스킬을 동시에 처리하되 concurrentLimit 만큼씩 분할 처리\r\n      for (let i = 0; i < skillIds.length; i += concurrentLimit) {\r\n        const batch = skillIds.slice(i, i + concurrentLimit);\r\n        \r\n        // 현재 배치의 요청들을 병렬로 처리\r\n        const promises = batch.map(skillId => \r\n          apiForDeleteCounselorsForSpecificSkill(skillId, counselorIds)\r\n            .then(() => {\r\n              result.successCount++;\r\n              return true;\r\n            })\r\n            .catch(error => {\r\n              console.error(`스킬 ID ${skillId} 해제 실패:`, error);\r\n              result.failedSkills.push(skillId);\r\n              result.success = false;\r\n              return false;\r\n            })\r\n        );\r\n        \r\n        // 현재 배치의 모든 요청 완료 대기\r\n        await Promise.all(promises);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error(\"배치 스킬 해제 중 오류 발생:\", error);\r\n      result.success = false;\r\n      result.error = error instanceof Error ? error : new Error(String(error));\r\n      return result;\r\n    }\r\n  };\r\n\r\n  return useMutation<BatchDeleteResult, Error, DeleteCounselorsFromSkillsParams>({\r\n    mutationKey: ['deleteCounselorsFromSkills', tenantId],\r\n    mutationFn: async (params) => {\r\n      return processBatchDeletion({\r\n        skillIds: params.skillIds,\r\n        counselorIds: params.counselorIds,\r\n        concurrentLimit: params.concurrentLimit\r\n      });\r\n    },\r\n    onSuccess: () => {\r\n      // 스킬 관련 쿼리 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['counselorSkills', tenantId]\r\n      });\r\n      \r\n      // 상담사 관련 쿼리 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['counselorList', tenantId]\r\n      });\r\n      \r\n      // 할당된 스킬 목록 쿼리 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['assignedSkills', tenantId]\r\n      });\r\n    }\r\n  });\r\n}"],"names":[],"mappings":"AAAA,yEAAyE;;;;AAGzE;AAFA;AAAA;;;;AAqBO,SAAS,iCAAiC,QAAgB;;IAC/D,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,gBAAgB;IAChB,MAAM,uBAAuB,OAAO,EAClC,QAAQ,EACR,YAAY,EACZ,kBAAkB,CAAC,EACgC;QACnD,YAAY;QACZ,MAAM,SAA4B;YAChC,SAAS;YACT,cAAc;YACd,cAAc,EAAE;QAClB;QAEA,IAAI;YACF,4CAA4C;YAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,KAAK,gBAAiB;gBACzD,MAAM,QAAQ,SAAS,KAAK,CAAC,GAAG,IAAI;gBAEpC,qBAAqB;gBACrB,MAAM,WAAW,MAAM,GAAG,CAAC,CAAA,UACzB,CAAA,GAAA,mKAAA,CAAA,yCAAsC,AAAD,EAAE,SAAS,cAC7C,IAAI,CAAC;wBACJ,OAAO,YAAY;wBACnB,OAAO;oBACT,GACC,KAAK,CAAC,CAAA;wBACL,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,QAAQ,OAAO,CAAC,EAAE;wBACzC,OAAO,YAAY,CAAC,IAAI,CAAC;wBACzB,OAAO,OAAO,GAAG;wBACjB,OAAO;oBACT;gBAGJ,qBAAqB;gBACrB,MAAM,QAAQ,GAAG,CAAC;YACpB;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,OAAO,GAAG;YACjB,OAAO,KAAK,GAAG,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO;YACjE,OAAO;QACT;IACF;IAEA,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAA8D;QAC7E,aAAa;YAAC;YAA8B;SAAS;QACrD,UAAU;4DAAE,OAAO;gBACjB,OAAO,qBAAqB;oBAC1B,UAAU,OAAO,QAAQ;oBACzB,cAAc,OAAO,YAAY;oBACjC,iBAAiB,OAAO,eAAe;gBACzC;YACF;;QACA,SAAS;4DAAE;gBACT,kBAAkB;gBAClB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAmB;qBAAS;gBACzC;gBAEA,mBAAmB;gBACnB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAiB;qBAAS;gBACvC;gBAEA,sBAAsB;gBACtB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAkB;qBAAS;gBACxC;YACF;;IACF;AACF;GA3EgB;;QACM,yLAAA,CAAA,iBAAc;QAgD3B,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 5669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5675, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiBatchSkillAssignment.ts"],"sourcesContent":["// src/features/campaignManager/hooks/useApiBatchSkillAssignment.ts\r\nimport { useMutation, UseMutationResult, useQueryClient } from '@tanstack/react-query';\r\nimport { CounselorSkillAssignmentResponse, CounselorSkillApiError } from '../types/typeForCounselorSkill';\r\nimport { apiForAddCounselorsForSpecificSkill } from '../api/apiForCounselorSkil';\r\nimport { apiForDeleteCounselorsForSpecificSkill } from '../api/apiForCounselorSkil';\r\n\r\ninterface BatchSkillAssignmentParams {\r\n  skillIds: number[];\r\n  counselorIds: string[];\r\n  isUnassignment: boolean;\r\n  tenantId: string;\r\n  concurrentLimit?: number;\r\n}\r\n\r\ninterface BatchSkillResult {\r\n  success: boolean;\r\n  successCount: number;\r\n  failedSkills: number[];\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * 여러 스킬을 여러 상담사에게 한 번에 할당/해제하는 커스텀 훅\r\n */\r\nexport function useApiBatchSkillAssignment(tenantId: string) {\r\n  const queryClient = useQueryClient();\r\n\r\n  // 배치 처리 유틸리티 함수\r\n  const processBatchSkillAssignment = async ({\r\n    skillIds,\r\n    counselorIds,\r\n    isUnassignment,\r\n    concurrentLimit = 3\r\n  }: Omit<BatchSkillAssignmentParams, 'tenantId'>) => {\r\n    // 결과 추적용 객체\r\n    const result: BatchSkillResult = {\r\n      success: true,\r\n      successCount: 0,\r\n      failedSkills: []\r\n    };\r\n\r\n    try {\r\n      // 여러 스킬을 동시에 처리하되 concurrentLimit 만큼씩 분할 처리\r\n      for (let i = 0; i < skillIds.length; i += concurrentLimit) {\r\n        const batch = skillIds.slice(i, i + concurrentLimit);\r\n        \r\n        // 현재 배치의 요청들을 병렬로 처리\r\n        const promises = batch.map(skillId => {\r\n          const apiCall = isUnassignment\r\n            ? apiForDeleteCounselorsForSpecificSkill(skillId, counselorIds)\r\n            : apiForAddCounselorsForSpecificSkill(skillId, counselorIds);\r\n            \r\n          return apiCall\r\n            .then(() => {\r\n              result.successCount++;\r\n              return true;\r\n            })\r\n            .catch(error => {\r\n              console.error(`스킬 ID ${skillId} ${isUnassignment ? '해제' : '할당'} 실패:`, error);\r\n              result.failedSkills.push(skillId);\r\n              result.success = false;\r\n              return false;\r\n            });\r\n        });\r\n        \r\n        // 현재 배치의 모든 요청 완료 대기\r\n        await Promise.all(promises);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error(`배치 스킬 ${isUnassignment ? '해제' : '할당'} 중 오류 발생:`, error);\r\n      result.success = false;\r\n      result.error = error instanceof Error ? error : new Error(String(error));\r\n      return result;\r\n    }\r\n  };\r\n\r\n  return useMutation<BatchSkillResult, Error, BatchSkillAssignmentParams>({\r\n    mutationKey: ['batchSkillAssignment', tenantId],\r\n    mutationFn: async (params) => {\r\n      return processBatchSkillAssignment({\r\n        skillIds: params.skillIds,\r\n        counselorIds: params.counselorIds,\r\n        isUnassignment: params.isUnassignment,\r\n        concurrentLimit: params.concurrentLimit\r\n      });\r\n    },\r\n    onSuccess: () => {\r\n      // 스킬 관련 쿼리 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['counselorSkills', tenantId]\r\n      });\r\n      \r\n      // 상담사 관련 쿼리 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['counselorList', tenantId]\r\n      });\r\n    }\r\n  });\r\n}"],"names":[],"mappings":"AAAA,mEAAmE;;;;AAGnE;AAFA;AAAA;;;;;AAuBO,SAAS,2BAA2B,QAAgB;;IACzD,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,gBAAgB;IAChB,MAAM,8BAA8B,OAAO,EACzC,QAAQ,EACR,YAAY,EACZ,cAAc,EACd,kBAAkB,CAAC,EAC0B;QAC7C,YAAY;QACZ,MAAM,SAA2B;YAC/B,SAAS;YACT,cAAc;YACd,cAAc,EAAE;QAClB;QAEA,IAAI;YACF,4CAA4C;YAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,KAAK,gBAAiB;gBACzD,MAAM,QAAQ,SAAS,KAAK,CAAC,GAAG,IAAI;gBAEpC,qBAAqB;gBACrB,MAAM,WAAW,MAAM,GAAG,CAAC,CAAA;oBACzB,MAAM,UAAU,iBACZ,CAAA,GAAA,mKAAA,CAAA,yCAAsC,AAAD,EAAE,SAAS,gBAChD,CAAA,GAAA,mKAAA,CAAA,sCAAmC,AAAD,EAAE,SAAS;oBAEjD,OAAO,QACJ,IAAI,CAAC;wBACJ,OAAO,YAAY;wBACnB,OAAO;oBACT,GACC,KAAK,CAAC,CAAA;wBACL,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,iBAAiB,OAAO,KAAK,IAAI,CAAC,EAAE;wBACtE,OAAO,YAAY,CAAC,IAAI,CAAC;wBACzB,OAAO,OAAO,GAAG;wBACjB,OAAO;oBACT;gBACJ;gBAEA,qBAAqB;gBACrB,MAAM,QAAQ,GAAG,CAAC;YACpB;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,iBAAiB,OAAO,KAAK,SAAS,CAAC,EAAE;YAChE,OAAO,OAAO,GAAG;YACjB,OAAO,KAAK,GAAG,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO;YACjE,OAAO;QACT;IACF;IAEA,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAuD;QACtE,aAAa;YAAC;YAAwB;SAAS;QAC/C,UAAU;sDAAE,OAAO;gBACjB,OAAO,4BAA4B;oBACjC,UAAU,OAAO,QAAQ;oBACzB,cAAc,OAAO,YAAY;oBACjC,gBAAgB,OAAO,cAAc;oBACrC,iBAAiB,OAAO,eAAe;gBACzC;YACF;;QACA,SAAS;sDAAE;gBACT,kBAAkB;gBAClB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAmB;qBAAS;gBACzC;gBAEA,mBAAmB;gBACnB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAiB;qBAAS;gBACvC;YACF;;IACF;AACF;GA5EgB;;QACM,yLAAA,CAAA,iBAAc;QAqD3B,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 5769, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5775, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/IDialogForSkilAssignmentForCounselor.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { CustomCheckbox } from \"@/components/shared/CustomCheckbox\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { CounselorSkill } from \"@/features/campaignManager/types/typeForCounselorSkill\";\r\nimport { useApiForGetRelatedInfoForAssignSkilToCounselor } from \"@/features/preferences/hooks/useApiForGetRelatedInfoForAssignSkilToCounselor\";\r\nimport { useApiDeleteCounselorsFromSkills } from \"@/features/campaignManager/hooks/useApiDeleteCounselorsFromSkills\";\r\nimport { useApiBatchSkillAssignment } from \"@/features/campaignManager/hooks/useApiBatchSkillAssignment\";\r\nimport CustomAlert from \"@/components/shared/layout/CustomAlert\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\ninterface IDialogForSkilAssignmentForCounselorProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  counselorId: string;\r\n  counselorName: string;\r\n  tenantId: string;\r\n  isUnassignment?: boolean;\r\n  dialogTitle?: string;\r\n}\r\n\r\nexport function IDialogForSkilAssignmentForCounselor({\r\n  isOpen,\r\n  onClose,\r\n  counselorId,\r\n  counselorName,\r\n  tenantId,\r\n  isUnassignment = false,\r\n  dialogTitle,\r\n}: IDialogForSkilAssignmentForCounselorProps) {\r\n  const [selectedSkills, setSelectedSkills] = useState<number[]>([]);\r\n  const [initialSkills, setInitialSkills] = useState<number[]>([]);\r\n  const [isUnassignMode, setIsUnassignMode] = useState(false);\r\n  const [pendingChanges, setPendingChanges] = useState<{\r\n    added: number[];\r\n    removed: number[];\r\n  }>({ added: [], removed: [] });\r\n\r\n  // isUnassignment prop 변경 시 모드 업데이트\r\n  useEffect(() => {\r\n    setIsUnassignMode(isUnassignment);\r\n  }, [isUnassignment]);\r\n\r\n  const { assignedSkills, assignableSkills, isLoading, error } =\r\n    useApiForGetRelatedInfoForAssignSkilToCounselor(\r\n      counselorId,\r\n      Number(tenantId)\r\n    );\r\n\r\n  // 스킬 추가/해제 처리 훅\r\n  const addSkillsMutation = useApiBatchSkillAssignment(tenantId ?? \"0\");\r\n  const deleteSkillsMutation = useApiDeleteCounselorsFromSkills(tenantId ?? \"0\");\r\n  const isProcessing =\r\n    addSkillsMutation.isPending || deleteSkillsMutation.isPending;\r\n\r\n  // 다이얼로그가 열릴 때 할당된 스킬을 초기화하고 pending 변경사항을 초기화\r\n  useEffect(() => {\r\n    if ((assignedSkills?.result_data ?? []).length > 0) {\r\n      const assignedSkillIds =\r\n        assignedSkills?.result_data.flatMap((item) => item.skill_id) ?? [];\r\n      setSelectedSkills(assignedSkillIds);\r\n      setInitialSkills(assignedSkillIds);\r\n      setPendingChanges({ added: [], removed: [] });\r\n    } else {\r\n      setSelectedSkills([]);\r\n      setInitialSkills([]);\r\n      setPendingChanges({ added: [], removed: [] });\r\n    }\r\n  }, [assignedSkills]);\r\n\r\n  // 스킬 선택/해제 및 pending 변경사항 추적\r\n  const handleSkillToggle = (skillId: number) => {\r\n    setSelectedSkills((prev) => {\r\n      const isCurrentlySelected = prev.includes(skillId);\r\n\r\n      // 할당 모드일 때 최대 10개 체크\r\n      if (!isCurrentlySelected && prev.length >= 10 && !isUnassignMode) {\r\n        toast.error(\"최대 10개의 스킬만 할당할 수 있습니다.\");\r\n        return prev;\r\n      }\r\n\r\n      // pending 변경사항 업데이트\r\n      setPendingChanges((current) => {\r\n        if (isCurrentlySelected) {\r\n          // 체크 해제: 원래 있던 항목은 removed에 추가\r\n          return {\r\n            added: current.added.filter((id) => id !== skillId),\r\n            removed: initialSkills.includes(skillId)\r\n              ? [...current.removed, skillId]\r\n              : current.removed,\r\n          };\r\n        } else {\r\n          // 체크: 원래 없던 항목은 added에 추가\r\n          return {\r\n            added: !initialSkills.includes(skillId)\r\n              ? [...current.added, skillId]\r\n              : current.added,\r\n            removed: current.removed.filter((id) => id !== skillId),\r\n          };\r\n        }\r\n      });\r\n\r\n      return isCurrentlySelected\r\n        ? prev.filter((id) => id !== skillId)\r\n        : [...prev, skillId];\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n    const { added, removed } = pendingChanges;\r\n\r\n    if (added.length === 0 && removed.length === 0) {\r\n      toast.info(\"변경된 사항이 없습니다.\");\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 추가할 스킬이 있으면 배치 처리\r\n      if (added.length > 0) {\r\n        const addResult = await addSkillsMutation.mutateAsync({\r\n          skillIds: added,\r\n          counselorIds: [counselorId],\r\n          tenantId,\r\n          isUnassignment: false,\r\n        });\r\n        if (addResult.success) {\r\n          // toast.success(`${added.length}개 스킬이 할당되었습니다.`);\r\n        } else {\r\n          toast.warning(\r\n            `${addResult.successCount}개 스킬만 할당되었습니다. ${addResult.failedSkills.length}개 실패.`\r\n          );\r\n        }\r\n      }\r\n\r\n      // 제거할 스킬이 있으면 배치 처리\r\n      if (removed.length > 0) {\r\n        const removeResult = await deleteSkillsMutation.mutateAsync({\r\n          skillIds: removed,\r\n          counselorIds: [counselorId],\r\n          tenantId,\r\n        });\r\n        if (removeResult.success) {\r\n          // toast.success(`${removed.length}개 스킬이 해제되었습니다.`);\r\n        } else {\r\n          toast.warning(\r\n            `${removeResult.successCount}개 스킬만 해제되었습니다. ${removeResult.failedSkills.length}개 실패.`\r\n          );\r\n        }\r\n      }\r\n\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"스킬 할당/해제 중 오류 발생:\", error);\r\n      toast.error(\"스킬 처리 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  const getConfirmButtonText = () => {\r\n    const { added, removed } = pendingChanges;\r\n    if (isUnassignMode) {\r\n      return `스킬 해제 (${removed.length}개)`;\r\n    } else if (added.length > 0 && removed.length > 0) {\r\n      return `스킬 변경 (추가: ${added.length}, 해제: ${removed.length})`;\r\n    } else if (added.length > 0) {\r\n      return `스킬 할당 (${added.length}개)`;\r\n    } else if (removed.length > 0) {\r\n      return `스킬 해제 (${removed.length}개)`;\r\n    }\r\n    return isUnassignMode ? \"스킬 해제\" : \"스킬 할당\";\r\n  };\r\n\r\n  const renderContent = () => {\r\n    if (error) {\r\n      return <div className=\"text-red-500 p-4\">Error: {error}</div>;\r\n    }\r\n\r\n    if (isLoading) {\r\n      return <div className=\"p-4\">데이터를 불러오는 중...</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"\">\r\n        <div className=\"text-sm text-[#333] mb-4\">\r\n          {isUnassignMode\r\n            ? \"할당된 스킬을 해제할 수 있습니다.\"\r\n            : \"상담사에게 스킬을 할당할 수 있습니다.\"}\r\n          <br />\r\n          체크 후 확인 버튼을 누르시면 선택한 작업이 적용됩니다.\r\n        </div>\r\n\r\n        <div className=\"max-h-[300px] overflow-y-auto border rounded\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: '30px' }}>\r\n                  선택\r\n                </TableHead>\r\n                <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: '30px' }}>\r\n                  아이디\r\n                </TableHead>\r\n                <TableHead className=\"text-center bg-[#F8F8F8] text-[#333]\" style={{ height: '30px' }}>\r\n                  이름\r\n                </TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {assignableSkills?.result_data.map((skill: CounselorSkill) => {\r\n                const isInitiallySelected = initialSkills.includes(skill.skill_id);\r\n                const isCurrentlySelected = selectedSkills.includes(skill.skill_id);\r\n                const hasChanged = isInitiallySelected !== isCurrentlySelected;\r\n                return (\r\n                  <TableRow\r\n                    key={`${skill.tenant_id}-${skill.skill_id}`}\r\n                    className={`custom-hover ${\r\n                      hasChanged ? \"bg-[#FFFAEE]\" : \"\"\r\n                    }`}\r\n                  >\r\n                    <TableCell className=\"text-center text-[#444]\" style={{ height: '30px', padding: 0 }}>\r\n                      <CustomCheckbox\r\n                        checked={selectedSkills.includes(skill.skill_id)}\r\n                        onCheckedChange={() => handleSkillToggle(skill.skill_id)}\r\n                        disabled={isProcessing}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell className=\"text-center text-[#444]\" style={{ height: '30px', padding: 0 }}>\r\n                      {skill.skill_id}\r\n                    </TableCell>\r\n                    <TableCell className=\"text-center text-[#444]\" style={{ height: '30px', padding: 0 }}>\r\n                      {skill.skill_name}\r\n                      {hasChanged && (\r\n                        <span className=\"ml-2 text-xs text-blue-500\">\r\n                          {isCurrentlySelected\r\n                            ? \"(추가 예정)\"\r\n                            : \"(해제 예정)\"}\r\n                        </span>\r\n                      )}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n\r\n        <div className=\"mt-6 flex justify-end gap-1.5\">\r\n          <CommonButton\r\n            onClick={handleConfirm}\r\n            disabled={\r\n              isProcessing ||\r\n              (pendingChanges.added.length === 0 &&\r\n                pendingChanges.removed.length === 0)\r\n            }\r\n          >\r\n            {isProcessing ? \"처리 중...\" : getConfirmButtonText()}\r\n          </CommonButton>\r\n          <CommonButton\r\n            variant=\"outline\"\r\n            onClick={handleCancel}\r\n            disabled={isProcessing}\r\n          >\r\n            취소\r\n          </CommonButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomAlert\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title={\r\n        dialogTitle ||\r\n        `스킬 ${isUnassignMode ? \"해제\" : \"할당\"} - ${counselorName || \"\"}`\r\n      }\r\n      message={renderContent()}\r\n      type=\"custom\"\r\n      showButtons={false} // 내부 커스텀 버튼 사용\r\n    />\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAQA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAnBA;;;;;;;;;;AA8BO,SAAS,qCAAqC,EACnD,MAAM,EACN,OAAO,EACP,WAAW,EACX,aAAa,EACb,QAAQ,EACR,iBAAiB,KAAK,EACtB,WAAW,EAC+B;;IAC1C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACjE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC/D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAGhD;QAAE,OAAO,EAAE;QAAE,SAAS,EAAE;IAAC;IAE5B,mCAAmC;IACnC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0DAAE;YACR,kBAAkB;QACpB;yDAAG;QAAC;KAAe;IAEnB,MAAM,EAAE,cAAc,EAAE,gBAAgB,EAAE,SAAS,EAAE,KAAK,EAAE,GAC1D,CAAA,GAAA,8LAAA,CAAA,kDAA+C,AAAD,EAC5C,aACA,OAAO;IAGX,gBAAgB;IAChB,MAAM,oBAAoB,CAAA,GAAA,4KAAA,CAAA,6BAA0B,AAAD,EAAE,YAAY;IACjE,MAAM,uBAAuB,CAAA,GAAA,kLAAA,CAAA,mCAAgC,AAAD,EAAE,YAAY;IAC1E,MAAM,eACJ,kBAAkB,SAAS,IAAI,qBAAqB,SAAS;IAE/D,8CAA8C;IAC9C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0DAAE;YACR,IAAI,CAAC,gBAAgB,eAAe,EAAE,EAAE,MAAM,GAAG,GAAG;gBAClD,MAAM,mBACJ,gBAAgB,YAAY;sEAAQ,CAAC,OAAS,KAAK,QAAQ;wEAAK,EAAE;gBACpE,kBAAkB;gBAClB,iBAAiB;gBACjB,kBAAkB;oBAAE,OAAO,EAAE;oBAAE,SAAS,EAAE;gBAAC;YAC7C,OAAO;gBACL,kBAAkB,EAAE;gBACpB,iBAAiB,EAAE;gBACnB,kBAAkB;oBAAE,OAAO,EAAE;oBAAE,SAAS,EAAE;gBAAC;YAC7C;QACF;yDAAG;QAAC;KAAe;IAEnB,6BAA6B;IAC7B,MAAM,oBAAoB,CAAC;QACzB,kBAAkB,CAAC;YACjB,MAAM,sBAAsB,KAAK,QAAQ,CAAC;YAE1C,qBAAqB;YACrB,IAAI,CAAC,uBAAuB,KAAK,MAAM,IAAI,MAAM,CAAC,gBAAgB;gBAChE,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;gBACZ,OAAO;YACT;YAEA,oBAAoB;YACpB,kBAAkB,CAAC;gBACjB,IAAI,qBAAqB;oBACvB,+BAA+B;oBAC/B,OAAO;wBACL,OAAO,QAAQ,KAAK,CAAC,MAAM,CAAC,CAAC,KAAO,OAAO;wBAC3C,SAAS,cAAc,QAAQ,CAAC,WAC5B;+BAAI,QAAQ,OAAO;4BAAE;yBAAQ,GAC7B,QAAQ,OAAO;oBACrB;gBACF,OAAO;oBACL,0BAA0B;oBAC1B,OAAO;wBACL,OAAO,CAAC,cAAc,QAAQ,CAAC,WAC3B;+BAAI,QAAQ,KAAK;4BAAE;yBAAQ,GAC3B,QAAQ,KAAK;wBACjB,SAAS,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAC,KAAO,OAAO;oBACjD;gBACF;YACF;YAEA,OAAO,sBACH,KAAK,MAAM,CAAC,CAAC,KAAO,OAAO,WAC3B;mBAAI;gBAAM;aAAQ;QACxB;IACF;IAEA,MAAM,eAAe;QACnB;IACF;IAEA,MAAM,gBAAgB;QACpB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAE3B,IAAI,MAAM,MAAM,KAAK,KAAK,QAAQ,MAAM,KAAK,GAAG;YAC9C,sJAAA,CAAA,QAAK,CAAC,IAAI,CAAC;YACX;YACA;QACF;QAEA,IAAI;YACF,oBAAoB;YACpB,IAAI,MAAM,MAAM,GAAG,GAAG;gBACpB,MAAM,YAAY,MAAM,kBAAkB,WAAW,CAAC;oBACpD,UAAU;oBACV,cAAc;wBAAC;qBAAY;oBAC3B;oBACA,gBAAgB;gBAClB;gBACA,IAAI,UAAU,OAAO,EAAE;gBACrB,kDAAkD;gBACpD,OAAO;oBACL,sJAAA,CAAA,QAAK,CAAC,OAAO,CACX,GAAG,UAAU,YAAY,CAAC,eAAe,EAAE,UAAU,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;gBAEnF;YACF;YAEA,oBAAoB;YACpB,IAAI,QAAQ,MAAM,GAAG,GAAG;gBACtB,MAAM,eAAe,MAAM,qBAAqB,WAAW,CAAC;oBAC1D,UAAU;oBACV,cAAc;wBAAC;qBAAY;oBAC3B;gBACF;gBACA,IAAI,aAAa,OAAO,EAAE;gBACxB,oDAAoD;gBACtD,OAAO;oBACL,sJAAA,CAAA,QAAK,CAAC,OAAO,CACX,GAAG,aAAa,YAAY,CAAC,eAAe,EAAE,aAAa,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;gBAEzF;YACF;YAEA;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qBAAqB;YACnC,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;QACd;IACF;IAEA,MAAM,uBAAuB;QAC3B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAC3B,IAAI,gBAAgB;YAClB,OAAO,CAAC,OAAO,EAAE,QAAQ,MAAM,CAAC,EAAE,CAAC;QACrC,OAAO,IAAI,MAAM,MAAM,GAAG,KAAK,QAAQ,MAAM,GAAG,GAAG;YACjD,OAAO,CAAC,WAAW,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,QAAQ,MAAM,CAAC,CAAC,CAAC;QAC7D,OAAO,IAAI,MAAM,MAAM,GAAG,GAAG;YAC3B,OAAO,CAAC,OAAO,EAAE,MAAM,MAAM,CAAC,EAAE,CAAC;QACnC,OAAO,IAAI,QAAQ,MAAM,GAAG,GAAG;YAC7B,OAAO,CAAC,OAAO,EAAE,QAAQ,MAAM,CAAC,EAAE,CAAC;QACrC;QACA,OAAO,iBAAiB,UAAU;IACpC;IAEA,MAAM,gBAAgB;QACpB,IAAI,OAAO;YACT,qBAAO,6LAAC;gBAAI,WAAU;;oBAAmB;oBAAQ;;;;;;;QACnD;QAEA,IAAI,WAAW;YACb,qBAAO,6LAAC;gBAAI,WAAU;0BAAM;;;;;;QAC9B;QAEA,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;wBACZ,iBACG,wBACA;sCACJ,6LAAC;;;;;wBAAK;;;;;;;8BAIR,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC,oIAAA,CAAA,QAAK;;0CACJ,6LAAC,oIAAA,CAAA,cAAW;0CACV,cAAA,6LAAC,oIAAA,CAAA,WAAQ;;sDACP,6LAAC,oIAAA,CAAA,YAAS;4CAAC,WAAU;4CAAqD,OAAO;gDAAE,QAAQ;4CAAO;sDAAG;;;;;;sDAGrG,6LAAC,oIAAA,CAAA,YAAS;4CAAC,WAAU;4CAAqD,OAAO;gDAAE,QAAQ;4CAAO;sDAAG;;;;;;sDAGrG,6LAAC,oIAAA,CAAA,YAAS;4CAAC,WAAU;4CAAuC,OAAO;gDAAE,QAAQ;4CAAO;sDAAG;;;;;;;;;;;;;;;;;0CAK3F,6LAAC,oIAAA,CAAA,YAAS;0CACP,kBAAkB,YAAY,IAAI,CAAC;oCAClC,MAAM,sBAAsB,cAAc,QAAQ,CAAC,MAAM,QAAQ;oCACjE,MAAM,sBAAsB,eAAe,QAAQ,CAAC,MAAM,QAAQ;oCAClE,MAAM,aAAa,wBAAwB;oCAC3C,qBACE,6LAAC,oIAAA,CAAA,WAAQ;wCAEP,WAAW,CAAC,aAAa,EACvB,aAAa,iBAAiB,IAC9B;;0DAEF,6LAAC,oIAAA,CAAA,YAAS;gDAAC,WAAU;gDAA0B,OAAO;oDAAE,QAAQ;oDAAQ,SAAS;gDAAE;0DACjF,cAAA,6LAAC,0JAAA,CAAA,iBAAc;oDACb,SAAS,eAAe,QAAQ,CAAC,MAAM,QAAQ;oDAC/C,iBAAiB,IAAM,kBAAkB,MAAM,QAAQ;oDACvD,UAAU;;;;;;;;;;;0DAGd,6LAAC,oIAAA,CAAA,YAAS;gDAAC,WAAU;gDAA0B,OAAO;oDAAE,QAAQ;oDAAQ,SAAS;gDAAE;0DAChF,MAAM,QAAQ;;;;;;0DAEjB,6LAAC,oIAAA,CAAA,YAAS;gDAAC,WAAU;gDAA0B,OAAO;oDAAE,QAAQ;oDAAQ,SAAS;gDAAE;;oDAChF,MAAM,UAAU;oDAChB,4BACC,6LAAC;wDAAK,WAAU;kEACb,sBACG,YACA;;;;;;;;;;;;;uCArBL,GAAG,MAAM,SAAS,CAAC,CAAC,EAAE,MAAM,QAAQ,EAAE;;;;;gCA2BjD;;;;;;;;;;;;;;;;;8BAKN,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,wJAAA,CAAA,eAAY;4BACX,SAAS;4BACT,UACE,gBACC,eAAe,KAAK,CAAC,MAAM,KAAK,KAC/B,eAAe,OAAO,CAAC,MAAM,KAAK;sCAGrC,eAAe,YAAY;;;;;;sCAE9B,6LAAC,wJAAA,CAAA,eAAY;4BACX,SAAQ;4BACR,SAAS;4BACT,UAAU;sCACX;;;;;;;;;;;;;;;;;;IAMT;IAEA,qBACE,6LAAC,wJAAA,CAAA,UAAW;QACV,QAAQ;QACR,SAAS;QACT,OACE,eACA,CAAC,GAAG,EAAE,iBAAiB,OAAO,KAAK,GAAG,EAAE,iBAAiB,IAAI;QAE/D,SAAS;QACT,MAAK;QACL,aAAa;;;;;;AAGnB;GAxQgB;;QAuBZ,8LAAA,CAAA,kDAA+C;QAMvB,4KAAA,CAAA,6BAA0B;QACvB,kLAAA,CAAA,mCAAgC;;;KA9B/C"}},
    {"offset": {"line": 6185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6191, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/preferences/hooks/useAssignableSkills.tsx"],"sourcesContent":["\r\n\r\n\"use client\";\r\n\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { getAssignableSkillsForCounselor } from \"@/features/campaignManager/api/apiForCounselorSkil\";\r\n\r\n/**\r\n * 상담사에게 할당 가능한 스킬 목록을 가져오는 TanStack Query 훅\r\n * @param tenantId 테넌트 ID\r\n * @returns 할당 가능한 스킬 목록 (skill_id, skill_name 포함), 로딩 상태, 에러 정보\r\n */\r\nexport const useAssignableSkills = (tenantId?: number) => {\r\n  return useQuery({\r\n    queryKey: [\"assignableSkills\", tenantId], // 쿼리 키 (캐싱을 위한 식별자)\r\n    queryFn: async () => {\r\n      // console.log(\"🟢 할당 가능한 스킬 목록을 불러오는 중...\");\r\n\r\n      const response = await getAssignableSkillsForCounselor(tenantId!);\r\n\r\n      if (response.result_code === 0 && response.result_msg === \"Success\") {\r\n        // console.log(\"✅ 불러온 스킬 목록:\", response.result_data);\r\n\r\n        // skill_id와 skill_name을 포함한 배열로 반환\r\n        return response.result_data.map((skill) => ({\r\n          skill_id: skill.skill_id,\r\n          skill_name: skill.skill_name,\r\n        }));\r\n      } else {\r\n        throw new Error(`API 오류: ${response.result_msg}`);\r\n      }\r\n    },\r\n    enabled: tenantId !== -1,\r\n  });\r\n};\r\n\r\n"],"names":[],"mappings":";;;AAKA;AADA;;AAFA;;;AAUO,MAAM,sBAAsB,CAAC;;IAClC,OAAO,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;YAAoB;SAAS;QACxC,OAAO;4CAAE;gBACP,6CAA6C;gBAE7C,MAAM,WAAW,MAAM,CAAA,GAAA,mKAAA,CAAA,kCAA+B,AAAD,EAAE;gBAEvD,IAAI,SAAS,WAAW,KAAK,KAAK,SAAS,UAAU,KAAK,WAAW;oBACnE,qDAAqD;oBAErD,mCAAmC;oBACnC,OAAO,SAAS,WAAW,CAAC,GAAG;wDAAC,CAAC,QAAU,CAAC;gCAC1C,UAAU,MAAM,QAAQ;gCACxB,YAAY,MAAM,UAAU;4BAC9B,CAAC;;gBACH,OAAO;oBACL,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,SAAS,UAAU,EAAE;gBAClD;YACF;;QACA,SAAS,aAAa,CAAC;IACzB;AACF;GAtBa;;QACJ,8KAAA,CAAA,WAAQ"}},
    {"offset": {"line": 6236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6242, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/IDialogForTeamSkilAssignment.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\nimport { CustomCheckbox } from \"@/components/shared/CustomCheckbox\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport CustomAlert from \"@/components/shared/layout/CustomAlert\";\r\nimport { useApiForGetRelatedInfoForAssignSkilToCounselor } from \"@/features/preferences/hooks/useApiForGetRelatedInfoForAssignSkilToCounselor\";\r\nimport { useAssignableSkills } from \"@/features/preferences/hooks/useAssignableSkills\";\r\nimport Image from \"next/image\";\r\nimport { useApiDeleteCounselorsFromSkills } from \"@/features/campaignManager/hooks/useApiDeleteCounselorsFromSkills\";\r\nimport { useApiBatchSkillAssignment } from \"@/features/campaignManager/hooks/useApiBatchSkillAssignment\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\ninterface IDialogForTeamSkilAssignmentProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  teamId: string;\r\n  teamName: string;\r\n  teamMembers: any[];\r\n  tenantId: string;\r\n  isUnassignment?: boolean;\r\n  dialogTitle?: string;\r\n}\r\n\r\nexport function IDialogForTeamSkilAssignment({\r\n  isOpen,\r\n  onClose,\r\n  teamId,\r\n  teamName,\r\n  teamMembers,\r\n  tenantId,\r\n  isUnassignment = false,\r\n  dialogTitle\r\n}: IDialogForTeamSkilAssignmentProps) {\r\n  const [selectedSkills, setSelectedSkills] = useState<number[]>([]);\r\n  const [assignedSkillsInfo, setAssignedSkillsInfo] = useState<number[]>([]);\r\n  const [showCounselors, setShowCounselors] = useState(false);\r\n  const [isUnassignMode, setIsUnassignMode] = useState(false);\r\n\r\n  // isUnassignment prop이 변경될 때 isUnassignMode 상태 업데이트\r\n  useEffect(() => {\r\n    setIsUnassignMode(isUnassignment);\r\n    // 모드가 변경되면 선택된 스킬 초기화\r\n    setSelectedSkills([]);\r\n  }, [isUnassignment]);\r\n\r\n  // 첫 번째 상담사을 대표로 사용하여 스킬 정보 조회\r\n  const firstCounselor = teamMembers.length > 0 ? teamMembers[0] : null;\r\n  const representativeCounselorId = firstCounselor?.counselorId || firstCounselor?.data?.counselorId || \"\";\r\n\r\n  // 할당 가능한 스킬 목록 조회\r\n  const { data: assignableSkills, isLoading: isSkillsLoading, error: skillsError } = useAssignableSkills(Number(tenantId));\r\n\r\n  // 기존 할당된 스킬 정보 조회\r\n  const { assignedSkills, isLoading: isAssignedSkillsLoading, error: assignedSkillsError } = useApiForGetRelatedInfoForAssignSkilToCounselor(\r\n    representativeCounselorId,\r\n    Number(tenantId)\r\n  );\r\n\r\n  // 배치 처리를 위한 커스텀 훅 사용\r\n  const addSkillsMutation = useApiBatchSkillAssignment(tenantId ?? \"0\");\r\n  const deleteSkillsMutation = useApiDeleteCounselorsFromSkills(tenantId ?? \"0\");\r\n\r\n  // 로딩 상태 통합\r\n  const isProcessing = addSkillsMutation.isPending || deleteSkillsMutation.isPending;\r\n\r\n  // 할당된 스킬 정보 저장 (표시용)\r\n  useEffect(() => {\r\n    if ((assignedSkills?.result_data ?? []).length > 0) {\r\n      const assignedSkillIds = assignedSkills?.result_data.flatMap((item) => item.skill_id) ?? [];\r\n      // 정보 표시용으로만 사용하므로 저장\r\n      setAssignedSkillsInfo(assignedSkillIds);\r\n      // 초기 선택값은 빈 배열로 설정 (모두 해제 상태)\r\n      setSelectedSkills([]);\r\n    } else {\r\n      setAssignedSkillsInfo([]);\r\n      setSelectedSkills([]);\r\n    }\r\n  }, [assignedSkills]);\r\n\r\n  // 유효한 상담사 ID 배열 생성 함수\r\n  const getValidCounselorIds = () => {\r\n    if (!teamMembers || teamMembers.length === 0) {\r\n      console.warn(\"⚠️ 유효한 상담사 배열이 없습니다.\");\r\n      return [];\r\n    }\r\n\r\n    // 유효한 ID만 필터링\r\n    const validIds = teamMembers\r\n      .filter(counselor => {\r\n        // 데이터 구조에 따라 ID 추출\r\n        const id = (counselor.data && counselor.data.counselorId) || counselor.counselorId;\r\n        return id && id !== '-';\r\n      })\r\n      .map(counselor => {\r\n        // ID 추출\r\n        return (counselor.data && counselor.data.counselorId) || counselor.counselorId;\r\n      });\r\n\r\n    return validIds;\r\n  };\r\n\r\n  // 스킬 선택/해제 핸들러\r\n  const handleSkillToggle = (skillId: number) => {\r\n    setSelectedSkills((prev) => {\r\n      const isCurrentlySelected = prev.includes(skillId);\r\n      \r\n      // 최대 스킬 할당 개수 체크 (할당 모드일 때만)\r\n      if (!isCurrentlySelected && prev.length >= 10 && !isUnassignMode) {\r\n        toast.error(\"최대 10개의 스킬만 할당할 수 있습니다.\");\r\n        return prev;\r\n      }\r\n\r\n      // 선택 상태 토글\r\n      return isCurrentlySelected \r\n        ? prev.filter(id => id !== skillId) \r\n        : [...prev, skillId];\r\n    });\r\n  };\r\n\r\n  // 상담사 목록 토글\r\n  const toggleCounselors = () => {\r\n    setShowCounselors(!showCounselors);\r\n  };\r\n\r\n  // 취소 버튼 핸들러\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  // 할당 모드: 선택된 스킬을 추가 (이미 할당된 스킬도 포함)\r\n  const getSkillsToAdd = () => {\r\n    if (isUnassignMode) return [];\r\n    return selectedSkills;\r\n  };\r\n\r\n  // 해제 모드: 선택된 스킬만 해제\r\n  const getSkillsToRemove = () => {\r\n    if (!isUnassignMode) return [];\r\n    return selectedSkills;\r\n  };\r\n\r\n  // 확인 버튼 핸들러\r\n  const handleConfirm = async () => {\r\n    const counselorIds = getValidCounselorIds();\r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n    \r\n    if (counselorIds.length === 0) {\r\n      toast.error('유효한 상담사가 없습니다.');\r\n      return;\r\n    }\r\n    \r\n    if (skillsToAdd.length === 0 && skillsToRemove.length === 0) {\r\n      toast.info(\"변경할 사항이 없습니다.\");\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 추가할 스킬이 있으면 배치 처리\r\n      if (skillsToAdd.length > 0) {\r\n        const addResult = await addSkillsMutation.mutateAsync({\r\n          skillIds: skillsToAdd,\r\n          counselorIds: counselorIds,\r\n          tenantId,\r\n          isUnassignment: false\r\n        });\r\n        \r\n        if (addResult.success) {\r\n          toast.success(`${skillsToAdd.length}개 스킬이 모든 상담사에게 할당되었습니다.`);\r\n        } else {\r\n          toast.warning(`${addResult.successCount}개 스킬만 할당되었습니다. ${addResult.failedSkills.length}개 실패.`);\r\n        }\r\n      }\r\n      \r\n      // 제거할 스킬이 있으면 배치 처리\r\n      if (skillsToRemove.length > 0) {\r\n        const removeResult = await deleteSkillsMutation.mutateAsync({\r\n          skillIds: skillsToRemove,\r\n          counselorIds: counselorIds,\r\n          tenantId\r\n        });\r\n        \r\n        if (removeResult.success) {\r\n          toast.success(`${skillsToRemove.length}개 스킬이 모든 상담사에게서 해제되었습니다.`);\r\n        } else {\r\n          toast.warning(`${removeResult.successCount}개 스킬만 해제되었습니다. ${removeResult.failedSkills.length}개 실패.`);\r\n        }\r\n      }\r\n      \r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"스킬 할당/해제 중 오류 발생:\", error);\r\n      toast.error(\"스킬 처리 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 확인 버튼 텍스트 계산\r\n  const getConfirmButtonText = () => {\r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n    \r\n    if (isUnassignMode && skillsToRemove.length > 0) {\r\n      return `스킬 해제 (${skillsToRemove.length}개)`;\r\n    } else if (!isUnassignMode && skillsToAdd.length > 0) {\r\n      return `스킬 할당 (${skillsToAdd.length}개)`;\r\n    }\r\n    \r\n    return isUnassignMode ? \"스킬 해제\" : \"스킬 할당\";\r\n  };\r\n\r\n  // 버튼 비활성화 여부 계산\r\n  const isButtonDisabled = () => {\r\n    if (isProcessing) return true;\r\n    \r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n    \r\n    return skillsToAdd.length === 0 && skillsToRemove.length === 0;\r\n  };\r\n\r\n  const isLoading = isSkillsLoading || isAssignedSkillsLoading;\r\n  const error = skillsError || assignedSkillsError;\r\n\r\n  const renderContent = () => {\r\n    if (error) {\r\n      return <div className=\"text-red-500 p-4\">Error: {String(error)}</div>;\r\n    }\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <div className=\"p-6 flex flex-col items-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mb-4\"></div>\r\n          <div>데이터를 불러오는 중입니다...</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!teamMembers || teamMembers.length === 0) {\r\n      return (\r\n        <div className=\"px-6 py-4\">\r\n          <div className=\"flex items-center\">\r\n            <Image src=\"/tree-menu/team_icon_for_tree.png\" alt=\"팀\" width={14} height={12} className=\"mr-2\" />\r\n            <span className=\"text-sm text-[#333]\">상담사 정보를 찾을 수 없습니다</span>\r\n          </div>\r\n          <p className=\"text-[#333] mb-4 text-sm\">\r\n            선택된 팀의 상담사 정보를 불러올 수 없습니다.<br />\r\n            다시 시도하거나 관리자에게 문의하세요.\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n\r\n    return (\r\n      <div className=\"\">\r\n        <div className=\"text-sm text-[#333] mb-4\">\r\n          {isUnassignMode \r\n            ? `팀의 모든 상담사(${teamMembers.length}명)에게서 스킬을 일괄 해제합니다. 해제할 스킬을 선택하세요.` \r\n            : `팀의 모든 상담사(${teamMembers.length}명)에게 스킬을 일괄 할당합니다. 할당할 스킬을 선택하세요.`}\r\n        </div>\r\n        <div className=\"gary-border-box \">\r\n          <span>테넌트 ID: {tenantId || 'N/A'}</span>\r\n        </div>\r\n        <div className=\"gap-6\">\r\n          <div className=\"\">\r\n            <div className=\"mb-2 font-medium text-sm\">팀 정보</div>\r\n            <div\r\n              className=\"flex justify-between items-center gary-border-box cursor-pointer\"\r\n              onClick={toggleCounselors}\r\n            >\r\n              <div className=\"flex items-center\">\r\n                <Image src=\"/tree-menu/team_icon_for_tree.png\" alt=\"팀\" width={14} height={12} className=\"mr-2\" />\r\n                <span className=\"text-sm text-[#333]\">{teamName}</span>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <span className=\"text-sm text-[#333] mr-2\">{teamMembers.length}명</span>\r\n                {showCounselors ? (\r\n                  <ChevronUp className=\"h-4 w-4 text-gray-500\" />\r\n                ) : (\r\n                  <ChevronDown className=\"h-4 w-4 text-gray-500\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n            {showCounselors && (\r\n              <div className=\"border rounded mb-2\" style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n                <Table>\r\n                  <TableHeader className=\"sticky top-0 z-10\">\r\n                    <TableRow>\r\n                      <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: '30px' }}>ID</TableHead>\r\n                      <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: '30px' }}>이름</TableHead>\r\n                      <TableHead className=\"w-16 text-center bg-[#F8F8F8] text-[#333]\" style={{ height: '30px' }}>테넌트 ID</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {teamMembers.map((counselor, index) => {\r\n                      const id = counselor.data?.counselorId || counselor.counselorId || '-';\r\n                      const name = counselor.data?.counselorname || counselor.counselorname || '-';\r\n                      const currentTenantId = counselor.data?.tenantId || counselor.tenantId || '-';\r\n                      return (\r\n                        <TableRow key={`counselor-${index}`} className=\"custom-hover\">\r\n                          <TableCell className=\"py-1 text-sm text-center text-[#444]\">{id}</TableCell>\r\n                          <TableCell className=\"py-1 text-sm text-center text-[#444]\">{name}</TableCell>\r\n                          <TableCell className=\"py-1 text-sm text-center text-[#444]\">{currentTenantId}</TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"\">\r\n            <div className=\"mb-2 font-medium text-sm\">\r\n              {isUnassignMode ? \"해제할 스킬 선택\" : \"할당할 스킬 선택\"}\r\n              <span className=\"ml-2 text-sm\">\r\n                {isUnassignMode \r\n                  ? `(${skillsToRemove.length}개 선택됨)` \r\n                  : `(${skillsToAdd.length}개 선택됨)`}\r\n              </span>\r\n            </div>\r\n            <div className=\"border rounded\" style={{ maxHeight: '350px', overflow: 'auto' }}>\r\n              <Table>\r\n                <TableHeader className=\"sticky top-0 z-10\">\r\n                  <TableRow>\r\n                    <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: '30px' }}>선택</TableHead>\r\n                    <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: '30px' }}>아이디</TableHead>\r\n                    <TableHead className=\"w-16 text-center bg-[#F8F8F8] text-[#333]\" style={{ height: '30px' }}>이름</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {assignableSkills && assignableSkills.length > 0 ? (\r\n                    assignableSkills.map((skill) => {\r\n                      const isAlreadyAssigned = assignedSkillsInfo.includes(skill.skill_id);\r\n                      const isCurrentlySelected = selectedSkills.includes(skill.skill_id);\r\n                      if (isUnassignMode && !isAlreadyAssigned) {\r\n                        return null;\r\n                      }\r\n                      const willBeAdded = !isUnassignMode && isCurrentlySelected;\r\n                      const willBeRemoved = isUnassignMode && isCurrentlySelected;\r\n                      return (\r\n                        <TableRow \r\n                          key={`skill-${skill.skill_id}`} \r\n                          className={`custom-hover ${willBeAdded || willBeRemoved ?  \"bg-[#FFFAEE]\" : \"\"}`}\r\n                        >\r\n                          <TableCell className=\"text-center text-[#444]\" style={{ height: '30px', padding: 0 }}>\r\n                            <CustomCheckbox\r\n                              checked={isCurrentlySelected}\r\n                              onCheckedChange={() => handleSkillToggle(skill.skill_id)}\r\n                              disabled={isProcessing}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell className=\"text-center text-[#444]\" style={{ height: '30px', padding: 0 }}>\r\n                            {skill.skill_id}\r\n                          </TableCell>\r\n                          <TableCell className=\"text-center text-[#444]\" style={{ height: '30px', padding: 0 }}>\r\n                            {skill.skill_name}\r\n                            {isAlreadyAssigned && !isCurrentlySelected && !isUnassignMode && (\r\n                              <span className=\"ml-2 text-xs text-green-500\">(현재 할당됨)</span>\r\n                            )}\r\n                            {isAlreadyAssigned && isCurrentlySelected && !isUnassignMode && (\r\n                              <span className=\"ml-2 text-xs text-blue-500\">(재할당 예정)</span>\r\n                            )}\r\n                            {!isAlreadyAssigned && willBeAdded && (\r\n                              <span className=\"ml-2 text-xs text-blue-500\">(추가 예정)</span>\r\n                            )}\r\n                            {willBeRemoved && (\r\n                              <span className=\"ml-2 text-xs text-red-500\">(해제 예정)</span>\r\n                            )}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    }).filter(Boolean)\r\n                  ) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={3} className=\"text-center py-4\">\r\n                        {isUnassignMode ? \"해제할 스킬이 없습니다.\" : \"할당 가능한 스킬이 없습니다.\"}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-6 flex justify-end gap-1.5\">\r\n          <CommonButton\r\n            onClick={handleConfirm}\r\n            disabled={isProcessing || isButtonDisabled()}\r\n          >\r\n            {isProcessing ? \"처리 중...\" : (\r\n              isUnassignMode \r\n                ? `스킬 해제 (${getSkillsToRemove().length}개)` \r\n                : `스킬 할당 (${getSkillsToAdd().length}개)`\r\n            )}\r\n          </CommonButton>\r\n          <CommonButton\r\n            variant=\"outline\"\r\n            onClick={handleCancel}\r\n            disabled={isProcessing}\r\n          >\r\n            취소\r\n          </CommonButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomAlert\r\n      isOpen={isOpen}\r\n      title={dialogTitle || `팀 스킬 ${isUnassignMode ? \"해제\" : \"할당\"} - ${teamName || ''}`}\r\n      message={renderContent()}\r\n      type=\"1\"\r\n      onClose={onClose}\r\n      onCancle={onClose}\r\n      width=\"min-w-[800px]\"\r\n      showButtons={false}\r\n    />\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 7046, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7052, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/IDialogForGroupSkilAssignment.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\n// import { CustomCheckbox } from \"@/components/shared/CustomCheckbox\";\r\n// import { Button } from \"@/components/ui/button\";\r\n// import { ChevronDown, ChevronUp } from \"lucide-react\";\r\n// import { toast } from \"react-toastify\";\r\n// import { useApiForGetRelatedInfoForAssignSkilToCounselor } from \"@/features/preferences/hooks/useApiForGetRelatedInfoForAssignSkilToCounselor\";\r\n// import { useAssignableSkills } from \"@/features/preferences/hooks/useAssignableSkills\";\r\n// import { useApiBatchSkillAssignment } from \"@/features/campaignManager/hooks/useApiBatchSkillAssignment\";\r\n// import { useApiDeleteCounselorsFromSkills } from \"@/features/campaignManager/hooks/useApiDeleteCounselorsFromSkills\";\r\n// import Image from \"next/image\";\r\n// import CommonDialogWithCustomAlertStyle from \"@/components/shared/layout/CommonDialogWithCustomAlertStyle\";\r\n\r\n// interface IDialogForGroupSkilAssignmentProps {\r\n//   isOpen: boolean;\r\n//   onClose: () => void;\r\n//   groupId: string;\r\n//   groupName: string;\r\n//   groupMembers: any[];\r\n//   tenantId: string;\r\n//   isUnassignment?: boolean;\r\n//   dialogTitle?: string;\r\n// }\r\n\r\n// export function IDialogForGroupSkilAssignment({\r\n//   isOpen,\r\n//   onClose,\r\n//   groupId,\r\n//   groupName,\r\n//   groupMembers,\r\n//   tenantId,\r\n//   isUnassignment = false,\r\n//   dialogTitle,\r\n// }: IDialogForGroupSkilAssignmentProps) {\r\n//   const [selectedSkills, setSelectedSkills] = useState<number[]>([]);\r\n//   const [assignedSkillsInfo, setAssignedSkillsInfo] = useState<number[]>([]);\r\n//   const [showCounselors, setShowCounselors] = useState(false);\r\n//   const [isUnassignMode, setIsUnassignMode] = useState(false);\r\n\r\n//   // isUnassignment prop 변경 시 모드 업데이트 및 선택 스킬 초기화\r\n//   useEffect(() => {\r\n//     setIsUnassignMode(isUnassignment);\r\n//     setSelectedSkills([]);\r\n//   }, [isUnassignment]);\r\n\r\n//   // 첫 번째 상담사을 대표로 사용하여 스킬 정보 조회\r\n//   const firstCounselor = groupMembers.length > 0 ? groupMembers[0] : null;\r\n//   const representativeCounselorId = firstCounselor?.counselorId || firstCounselor?.data?.counselorId || \"\";\r\n\r\n//   // 할당 가능한 스킬 목록 조회\r\n//   const { data: assignableSkills, isLoading: isSkillsLoading, error: skillsError } = useAssignableSkills(Number(tenantId));\r\n\r\n//   // 기존 할당된 스킬 정보 조회\r\n//   const { assignedSkills, isLoading: isAssignedSkillsLoading, error: assignedSkillsError } =\r\n//     useApiForGetRelatedInfoForAssignSkilToCounselor(representativeCounselorId, Number(tenantId));\r\n\r\n//   // 배치 처리용 커스텀 훅\r\n//   const addSkillsMutation = useApiBatchSkillAssignment(tenantId ?? \"0\");\r\n//   const deleteSkillsMutation = useApiDeleteCounselorsFromSkills(tenantId ?? \"0\");\r\n//   const isProcessing = addSkillsMutation.isPending || deleteSkillsMutation.isPending;\r\n\r\n//   // 할당된 스킬 정보 저장 (표시용)\r\n//   useEffect(() => {\r\n//     if ((assignedSkills?.result_data ?? []).length > 0) {\r\n//       const assignedSkillIds = assignedSkills?.result_data.flatMap((item) => item.skill_id) ?? [];\r\n//       setAssignedSkillsInfo(assignedSkillIds);\r\n//       setSelectedSkills([]);\r\n//     } else {\r\n//       setAssignedSkillsInfo([]);\r\n//       setSelectedSkills([]);\r\n//     }\r\n//   }, [assignedSkills]);\r\n\r\n//   // 유효한 상담사 ID 배열 생성\r\n//   const getValidCounselorIds = () => {\r\n//     if (!groupMembers || groupMembers.length === 0) {\r\n//       console.warn(\"⚠️ 유효한 상담사 배열이 없습니다.\");\r\n//       return [];\r\n//     }\r\n//     const validIds = groupMembers\r\n//       .filter((counselor) => {\r\n//         const id = (counselor.data && counselor.data.counselorId) || counselor.counselorId;\r\n//         return id && id !== \"-\";\r\n//       })\r\n//       .map((counselor) => (counselor.data && counselor.data.counselorId) || counselor.counselorId);\r\n//     return validIds;\r\n//   };\r\n\r\n//   // 스킬 선택/해제 핸들러\r\n//   const handleSkillToggle = (skillId: number) => {\r\n//     setSelectedSkills((prev) => {\r\n//       const isCurrentlySelected = prev.includes(skillId);\r\n//       if (!isCurrentlySelected && prev.length >= 10 && !isUnassignMode) {\r\n//         toast.error(\"최대 10개의 스킬만 할당할 수 있습니다.\");\r\n//         return prev;\r\n//       }\r\n//       return isCurrentlySelected ? prev.filter((id) => id !== skillId) : [...prev, skillId];\r\n//     });\r\n//   };\r\n\r\n//   // 상담사 목록 토글\r\n//   const toggleCounselors = () => {\r\n//     setShowCounselors(!showCounselors);\r\n//   };\r\n\r\n//   // 취소 버튼 핸들러\r\n//   const handleCancel = () => {\r\n//     onClose();\r\n//   };\r\n\r\n//   // 할당 모드: 선택된 스킬 반환\r\n//   const getSkillsToAdd = () => {\r\n//     if (isUnassignMode) return [];\r\n//     return selectedSkills;\r\n//   };\r\n\r\n//   // 해제 모드: 선택된 스킬 반환\r\n//   const getSkillsToRemove = () => {\r\n//     if (!isUnassignMode) return [];\r\n//     return selectedSkills;\r\n//   };\r\n\r\n//   // 확인 버튼 핸들러 (추가/해제 배치 처리)\r\n//   const handleConfirm = async () => {\r\n//     const counselorIds = getValidCounselorIds();\r\n//     const skillsToAdd = getSkillsToAdd();\r\n//     const skillsToRemove = getSkillsToRemove();\r\n\r\n//     if (counselorIds.length === 0) {\r\n//       toast.error(\"유효한 상담사가 없습니다.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (skillsToAdd.length === 0 && skillsToRemove.length === 0) {\r\n//       toast.info(\"변경할 사항이 없습니다.\");\r\n//       onClose();\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       if (skillsToAdd.length > 0) {\r\n//         const addResult = await addSkillsMutation.mutateAsync({\r\n//           skillIds: skillsToAdd,\r\n//           counselorIds: counselorIds,\r\n//           tenantId,\r\n//           isUnassignment: false,\r\n//         });\r\n//         if (addResult.success) {\r\n//           toast.success(`${skillsToAdd.length}개 스킬이 모든 상담사에게 할당되었습니다.`);\r\n//         } else {\r\n//           toast.warning(`${addResult.successCount}개 스킬만 할당되었습니다. ${addResult.failedSkills.length}개 실패.`);\r\n//         }\r\n//       }\r\n\r\n//       if (skillsToRemove.length > 0) {\r\n//         const removeResult = await deleteSkillsMutation.mutateAsync({\r\n//           skillIds: skillsToRemove,\r\n//           counselorIds: counselorIds,\r\n//           tenantId,\r\n//         });\r\n//         if (removeResult.success) {\r\n//           toast.success(`${skillsToRemove.length}개 스킬이 모든 상담사에게서 해제되었습니다.`);\r\n//         } else {\r\n//           toast.warning(`${removeResult.successCount}개 스킬만 해제되었습니다. ${removeResult.failedSkills.length}개 실패.`);\r\n//         }\r\n//       }\r\n\r\n//       onClose();\r\n//     } catch (error) {\r\n//       console.error(\"스킬 할당/해제 중 오류 발생:\", error);\r\n//       toast.error(\"스킬 처리 중 오류가 발생했습니다.\");\r\n//     }\r\n//   };\r\n\r\n//   // 버튼 상태 계산\r\n//   const getConfirmButtonText = () => {\r\n//     const skillsToAdd = getSkillsToAdd();\r\n//     const skillsToRemove = getSkillsToRemove();\r\n//     if (isUnassignMode && skillsToRemove.length > 0) {\r\n//       return `스킬 해제 (${skillsToRemove.length}개)`;\r\n//     } else if (!isUnassignMode && skillsToAdd.length > 0) {\r\n//       return `스킬 할당 (${skillsToAdd.length}개)`;\r\n//     }\r\n//     return isUnassignMode ? \"스킬 해제\" : \"스킬 할당\";\r\n//   };\r\n\r\n//   const isLoading = isSkillsLoading || isAssignedSkillsLoading;\r\n//   const error = skillsError || assignedSkillsError;\r\n\r\n//   const renderContent = () => {\r\n//     if (error) {\r\n//       return <div className=\"text-red-500 p-4\">Error: {String(error)}</div>;\r\n//     }\r\n\r\n//     if (isLoading) {\r\n//       return (\r\n//         <div className=\"p-6 flex flex-col items-center\">\r\n//           <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mb-4\"></div>\r\n//           <div>데이터를 불러오는 중입니다...</div>\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     if (!groupMembers || groupMembers.length === 0) {\r\n//       return (\r\n//         <div className=\"px-6 py-4\">\r\n//           <div className=\"flex items-center\">\r\n//             <Image src=\"/tree-menu/group_icon_for_tree.png\" alt=\"그룹\" width={15} height={12} className=\"mr-2\" />\r\n//             <span className=\"text-sm text-[#333]\">상담사 정보를 찾을 수 없습니다</span>\r\n//           </div>\r\n//           <p className=\"text-[#333] mb-4 text-sm\">\r\n//             선택된 그룹의 상담사 정보를 불러올 수 없습니다.<br />\r\n//             다시 시도하거나 관리자에게 문의하세요.\r\n//           </p>\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     const skillsToAdd = getSkillsToAdd();\r\n//     const skillsToRemove = getSkillsToRemove();\r\n//     const buttonDisabled = skillsToAdd.length === 0 && skillsToRemove.length === 0;\r\n\r\n//     return (\r\n//       <div className=\"p-4\">\r\n//         {/* 공통 설명 영역 */}\r\n//         <div className=\"text-sm text-gray-600 mb-4\">\r\n//           {isUnassignMode\r\n//             ? `그룹의 모든 상담사(${groupMembers.length}명)에게서 스킬을 일괄 해제합니다. 해제할 스킬을 선택하세요.`\r\n//             : `그룹의 모든 상담사(${groupMembers.length}명)에게 스킬을 일괄 할당합니다. 할당할 스킬을 선택하세요.`}\r\n//         </div>\r\n\r\n//         {/* 테넌트 ID 정보 */}\r\n//         <div className=\"p-2 bg-gray-50 border rounded text-sm text-[#333] mb-4\">\r\n//           <span>테넌트 ID: {tenantId || \"N/A\"}</span>\r\n//         </div>\r\n\r\n//         <div className=\"flex flex-row gap-6\">\r\n//           {/* 왼쪽: 그룹 정보 및 상담사 목록 */}\r\n//           <div className=\"w-1/2\">\r\n//             <div className=\"mb-2 font-medium text-sm\">그룹 정보</div>\r\n//             <div\r\n//               className=\"flex justify-between items-center p-2 border rounded cursor-pointer bg-gray-50 hover:bg-gray-100 mb-2\"\r\n//               onClick={toggleCounselors}\r\n//             >\r\n//               <div className=\"flex items-center\">\r\n//                 <Image src=\"/tree-menu/group_icon_for_tree.png\" alt=\"그룹\" width={15} height={12} className=\"mr-2\" />\r\n//                 <span className=\"text-sm text-[#333]\">{groupName}</span>\r\n//               </div>\r\n//               <div className=\"flex items-center\">\r\n//                 <span className=\"text-sm text-[#333] mr-2\">{groupMembers.length}명</span>\r\n//                 {showCounselors ? (\r\n//                   <ChevronUp className=\"h-4 w-4 text-gray-500\" />\r\n//                 ) : (\r\n//                   <ChevronDown className=\"h-4 w-4 text-gray-500\" />\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n\r\n//             {showCounselors && (\r\n//               <div className=\"border rounded\" style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\r\n//                 <Table>\r\n//                   <TableHeader className=\"sticky top-0 z-10\">\r\n//                     <TableRow>\r\n//                       <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: \"30px\" }}>\r\n//                         ID\r\n//                       </TableHead>\r\n//                       <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: \"30px\" }}>\r\n//                         이름\r\n//                       </TableHead>\r\n//                       <TableHead className=\"w-16 text-center bg-[#F8F8F8] text-[#333]\" style={{ height: \"30px\" }}>\r\n//                         테넌트 ID\r\n//                       </TableHead>\r\n//                     </TableRow>\r\n//                   </TableHeader>\r\n//                   <TableBody>\r\n//                     {groupMembers.map((counselor, index) => {\r\n//                       const id = counselor.data?.counselorId || counselor.counselorId || \"-\";\r\n//                       const name = counselor.data?.counselorname || counselor.counselorname || \"-\";\r\n//                       const currentTenantId = counselor.data?.tenantId || counselor.tenantId || \"-\";\r\n//                       return (\r\n//                         <TableRow key={`counselor-${index}`} className=\"custom-hover\">\r\n//                           <TableCell className=\"py-1 text-sm text-center text-[#444]\">{id}</TableCell>\r\n//                           <TableCell className=\"py-1 text-sm text-center text-[#444]\">{name}</TableCell>\r\n//                           <TableCell className=\"py-1 text-sm text-center text-[#444]\">{currentTenantId}</TableCell>\r\n//                         </TableRow>\r\n//                       );\r\n//                     })}\r\n//                   </TableBody>\r\n//                 </Table>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* 오른쪽: 스킬 목록 */}\r\n//           <div className=\"w-1/2\">\r\n//             <div className=\"mb-2 font-medium text-sm\">\r\n//               {isUnassignMode ? \"해제할 스킬 선택\" : \"할당할 스킬 선택\"}\r\n//               <span className=\"ml-2 text-blue-500 text-xs\">\r\n//                 {isUnassignMode ? `(${skillsToRemove.length}개 선택됨)` : `(${skillsToAdd.length}개 선택됨)`}\r\n//               </span>\r\n//             </div>\r\n\r\n//             <div className=\"border rounded\" style={{ maxHeight: \"350px\", overflow: \"auto\" }}>\r\n//               <Table>\r\n//                 <TableHeader className=\"sticky top-0 z-10\">\r\n//                   <TableRow>\r\n//                     <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: \"30px\" }}>\r\n//                       선택\r\n//                     </TableHead>\r\n//                     <TableHead className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\" style={{ height: \"30px\" }}>\r\n//                       아이디\r\n//                     </TableHead>\r\n//                     <TableHead className=\"w-16 text-center bg-[#F8F8F8] text-[#333]\" style={{ height: \"30px\" }}>\r\n//                       이름\r\n//                     </TableHead>\r\n//                   </TableRow>\r\n//                 </TableHeader>\r\n//                 <TableBody>\r\n//                   {assignableSkills && assignableSkills.length > 0 ? (\r\n//                     assignableSkills\r\n//                       .map((skill) => {\r\n//                         const isAlreadyAssigned = assignedSkillsInfo.includes(skill.skill_id);\r\n//                         const isCurrentlySelected = selectedSkills.includes(skill.skill_id);\r\n//                         // 해제 모드에서는 이미 할당된 스킬만 표시\r\n//                         if (isUnassignMode && !isAlreadyAssigned) {\r\n//                           return null;\r\n//                         }\r\n//                         const willBeAdded = !isUnassignMode && isCurrentlySelected;\r\n//                         const willBeRemoved = isUnassignMode && isCurrentlySelected;\r\n//                         return (\r\n//                           <TableRow\r\n//                             key={`skill-${skill.skill_id}`}\r\n//                             className={`custom-hover ${willBeAdded || willBeRemoved ? \"bg-blue-50\" : \"\"}`}\r\n//                           >\r\n//                             <TableCell className=\"text-center text-[#444]\" style={{ height: \"30px\", padding: 0 }}>\r\n//                               <CustomCheckbox\r\n//                                 checked={isCurrentlySelected}\r\n//                                 onCheckedChange={() => handleSkillToggle(skill.skill_id)}\r\n//                                 disabled={isProcessing}\r\n//                               />\r\n//                             </TableCell>\r\n//                             <TableCell className=\"text-center text-[#444]\" style={{ height: \"30px\", padding: 0 }}>\r\n//                               {skill.skill_id}\r\n//                             </TableCell>\r\n//                             <TableCell className=\"text-center text-[#444]\" style={{ height: \"30px\", padding: 0 }}>\r\n//                               {skill.skill_name}\r\n//                               {isAlreadyAssigned && !isCurrentlySelected && !isUnassignMode && (\r\n//                                 <span className=\"ml-2 text-xs text-green-500\">(현재 할당됨)</span>\r\n//                               )}\r\n//                               {isAlreadyAssigned && isCurrentlySelected && !isUnassignMode && (\r\n//                                 <span className=\"ml-2 text-xs text-blue-500\">(재할당 예정)</span>\r\n//                               )}\r\n//                               {!isAlreadyAssigned && willBeAdded && (\r\n//                                 <span className=\"ml-2 text-xs text-blue-500\">(추가 예정)</span>\r\n//                               )}\r\n//                               {willBeRemoved && (\r\n//                                 <span className=\"ml-2 text-xs text-red-500\">(해제 예정)</span>\r\n//                               )}\r\n//                             </TableCell>\r\n//                           </TableRow>\r\n//                         );\r\n//                       })\r\n//                       .filter(Boolean)\r\n//                   ) : (\r\n//                     <TableRow>\r\n//                       <TableCell colSpan={3} className=\"text-center py-4\">\r\n//                         {isUnassignMode ? \"해제할 스킬이 없습니다.\" : \"할당 가능한 스킬이 없습니다.\"}\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   )}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* 하단 버튼 영역 */}\r\n//         <div className=\"mt-6 flex justify-center gap-2\">\r\n//           <Button\r\n//             onClick={handleConfirm}\r\n//             className=\"px-6 py-1.5 bg-blue-500 hover:bg-blue-600 text-white rounded text-sm\"\r\n//             disabled={isProcessing || buttonDisabled}\r\n//           >\r\n//             {isProcessing\r\n//               ? \"처리 중...\"\r\n//               : isUnassignMode\r\n//               ? `스킬 해제 (${getSkillsToRemove().length}개)`\r\n//               : `스킬 할당 (${getSkillsToAdd().length}개)`}\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"outline\"\r\n//             onClick={handleCancel}\r\n//             className=\"px-6 py-1.5 border border-gray-300 rounded text-sm\"\r\n//             disabled={isProcessing}\r\n//           >\r\n//             취소\r\n//           </Button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <CommonDialogWithCustomAlertStyle\r\n//       isOpen={isOpen}\r\n//       onClose={onClose}\r\n//       title={dialogTitle || `그룹 스킬 ${isUnassignMode ? \"해제\" : \"할당\"} - ${groupName || \"\"}`}\r\n//       width=\"w-[70%] max-w-[1200px] min-w-[800px]\"\r\n//       showButtons={false}  // 내부에서 커스텀 버튼 사용\r\n//     >\r\n//       {renderContent()}\r\n//     </CommonDialogWithCustomAlertStyle>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { CustomCheckbox } from \"@/components/shared/CustomCheckbox\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useApiForGetRelatedInfoForAssignSkilToCounselor } from \"@/features/preferences/hooks/useApiForGetRelatedInfoForAssignSkilToCounselor\";\r\nimport { useAssignableSkills } from \"@/features/preferences/hooks/useAssignableSkills\";\r\nimport { useApiBatchSkillAssignment } from \"@/features/campaignManager/hooks/useApiBatchSkillAssignment\";\r\nimport { useApiDeleteCounselorsFromSkills } from \"@/features/campaignManager/hooks/useApiDeleteCounselorsFromSkills\";\r\nimport Image from \"next/image\";\r\nimport CustomAlert from \"@/components/shared/layout/CustomAlert\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\n\r\ninterface IDialogForGroupSkilAssignmentProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  groupId: string;\r\n  groupName: string;\r\n  groupMembers: any[];\r\n  tenantId: string;\r\n  isUnassignment?: boolean;\r\n  dialogTitle?: string;\r\n}\r\n\r\nexport function IDialogForGroupSkilAssignment({\r\n  isOpen,\r\n  onClose,\r\n  groupId,\r\n  groupName,\r\n  groupMembers,\r\n  tenantId,\r\n  isUnassignment = false,\r\n  dialogTitle,\r\n}: IDialogForGroupSkilAssignmentProps) {\r\n  const [selectedSkills, setSelectedSkills] = useState<number[]>([]);\r\n  const [assignedSkillsInfo, setAssignedSkillsInfo] = useState<number[]>([]);\r\n  const [showCounselors, setShowCounselors] = useState(false);\r\n  const [isUnassignMode, setIsUnassignMode] = useState(false);\r\n\r\n  // isUnassignment prop 변경 시 모드 업데이트 및 선택 스킬 초기화\r\n  useEffect(() => {\r\n    setIsUnassignMode(isUnassignment);\r\n    setSelectedSkills([]);\r\n  }, [isUnassignment]);\r\n\r\n  // 첫 번째 상담사을 대표로 사용하여 스킬 정보 조회\r\n  const firstCounselor = groupMembers.length > 0 ? groupMembers[0] : null;\r\n  const representativeCounselorId =\r\n    firstCounselor?.counselorId || firstCounselor?.data?.counselorId || \"\";\r\n\r\n  // 할당 가능한 스킬 목록 조회\r\n  const { data: assignableSkills, isLoading: isSkillsLoading, error: skillsError } =\r\n    useAssignableSkills(Number(tenantId));\r\n\r\n  // 기존 할당된 스킬 정보 조회\r\n  const {\r\n    assignedSkills,\r\n    isLoading: isAssignedSkillsLoading,\r\n    error: assignedSkillsError,\r\n  } = useApiForGetRelatedInfoForAssignSkilToCounselor(\r\n    representativeCounselorId,\r\n    Number(tenantId)\r\n  );\r\n\r\n  // 배치 처리용 커스텀 훅\r\n  const addSkillsMutation = useApiBatchSkillAssignment(tenantId ?? \"0\");\r\n  const deleteSkillsMutation = useApiDeleteCounselorsFromSkills(tenantId ?? \"0\");\r\n  const isProcessing = addSkillsMutation.isPending || deleteSkillsMutation.isPending;\r\n\r\n  // 할당된 스킬 정보 저장 (표시용)\r\n  useEffect(() => {\r\n    if ((assignedSkills?.result_data ?? []).length > 0) {\r\n      const assignedSkillIds =\r\n        assignedSkills?.result_data.flatMap((item) => item.skill_id) ?? [];\r\n      setAssignedSkillsInfo(assignedSkillIds);\r\n      setSelectedSkills([]);\r\n    } else {\r\n      setAssignedSkillsInfo([]);\r\n      setSelectedSkills([]);\r\n    }\r\n  }, [assignedSkills]);\r\n\r\n  // 유효한 상담사 ID 배열 생성\r\n  const getValidCounselorIds = () => {\r\n    if (!groupMembers || groupMembers.length === 0) {\r\n      console.warn(\"⚠️ 유효한 상담사 배열이 없습니다.\");\r\n      return [];\r\n    }\r\n    const validIds = groupMembers\r\n      .filter((counselor) => {\r\n        const id =\r\n          (counselor.data && counselor.data.counselorId) || counselor.counselorId;\r\n        return id && id !== \"-\";\r\n      })\r\n      .map(\r\n        (counselor) =>\r\n          (counselor.data && counselor.data.counselorId) || counselor.counselorId\r\n      );\r\n    return validIds;\r\n  };\r\n\r\n  // 스킬 선택/해제 핸들러\r\n  const handleSkillToggle = (skillId: number) => {\r\n    setSelectedSkills((prev) => {\r\n      const isCurrentlySelected = prev.includes(skillId);\r\n      if (!isCurrentlySelected && prev.length >= 10 && !isUnassignMode) {\r\n        toast.error(\"최대 10개의 스킬만 할당할 수 있습니다.\");\r\n        return prev;\r\n      }\r\n      return isCurrentlySelected\r\n        ? prev.filter((id) => id !== skillId)\r\n        : [...prev, skillId];\r\n    });\r\n  };\r\n\r\n  // 상담사 목록 토글\r\n  const toggleCounselors = () => {\r\n    setShowCounselors(!showCounselors);\r\n  };\r\n\r\n  // 취소 버튼 핸들러\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  // 할당 모드: 선택된 스킬 반환\r\n  const getSkillsToAdd = () => {\r\n    if (isUnassignMode) return [];\r\n    return selectedSkills;\r\n  };\r\n\r\n  // 해제 모드: 선택된 스킬 반환\r\n  const getSkillsToRemove = () => {\r\n    if (!isUnassignMode) return [];\r\n    return selectedSkills;\r\n  };\r\n\r\n  // 확인 버튼 핸들러 (추가/해제 배치 처리)\r\n  const handleConfirm = async () => {\r\n    const counselorIds = getValidCounselorIds();\r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n\r\n    if (counselorIds.length === 0) {\r\n      toast.error(\"유효한 상담사가 없습니다.\");\r\n      return;\r\n    }\r\n\r\n    if (skillsToAdd.length === 0 && skillsToRemove.length === 0) {\r\n      toast.info(\"변경할 사항이 없습니다.\");\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (skillsToAdd.length > 0) {\r\n        const addResult = await addSkillsMutation.mutateAsync({\r\n          skillIds: skillsToAdd,\r\n          counselorIds: counselorIds,\r\n          tenantId,\r\n          isUnassignment: false,\r\n        });\r\n        if (addResult.success) {\r\n          toast.success(\r\n            `${skillsToAdd.length}개 스킬이 모든 상담사에게 할당되었습니다.`\r\n          );\r\n        } else {\r\n          toast.warning(\r\n            `${addResult.successCount}개 스킬만 할당되었습니다. ${addResult.failedSkills.length}개 실패.`\r\n          );\r\n        }\r\n      }\r\n\r\n      if (skillsToRemove.length > 0) {\r\n        const removeResult = await deleteSkillsMutation.mutateAsync({\r\n          skillIds: skillsToRemove,\r\n          counselorIds: counselorIds,\r\n          tenantId,\r\n        });\r\n        if (removeResult.success) {\r\n          toast.success(\r\n            `${skillsToRemove.length}개 스킬이 모든 상담사에게서 해제되었습니다.`\r\n          );\r\n        } else {\r\n          toast.warning(\r\n            `${removeResult.successCount}개 스킬만 해제되었습니다. ${removeResult.failedSkills.length}개 실패.`\r\n          );\r\n        }\r\n      }\r\n\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"스킬 할당/해제 중 오류 발생:\", error);\r\n      toast.error(\"스킬 처리 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 버튼 상태 계산\r\n  const getConfirmButtonText = () => {\r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n    if (isUnassignMode && skillsToRemove.length > 0) {\r\n      return `스킬 해제 (${skillsToRemove.length}개)`;\r\n    } else if (!isUnassignMode && skillsToAdd.length > 0) {\r\n      return `스킬 할당 (${skillsToAdd.length}개)`;\r\n    }\r\n    return isUnassignMode ? \"스킬 해제\" : \"스킬 할당\";\r\n  };\r\n\r\n  const isLoading = isSkillsLoading || isAssignedSkillsLoading;\r\n  const errorContent = skillsError || assignedSkillsError;\r\n\r\n  const renderContent = () => {\r\n    if (errorContent) {\r\n      return <div className=\"text-red-500 p-4\">Error: {String(errorContent)}</div>;\r\n    }\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <div className=\"p-6 flex flex-col items-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mb-4\"></div>\r\n          <div>데이터를 불러오는 중입니다...</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!groupMembers || groupMembers.length === 0) {\r\n      return (\r\n        <div className=\"px-6 py-4\">\r\n          <div className=\"flex items-center\">\r\n            <Image\r\n              src=\"/tree-menu/group_icon_for_tree.png\"\r\n              alt=\"그룹\"\r\n              width={15}\r\n              height={12}\r\n              className=\"mr-2\"\r\n            />\r\n            <span className=\"text-sm text-[#333]\">상담사 정보를 찾을 수 없습니다</span>\r\n          </div>\r\n          <p className=\"text-[#333] mb-4 text-sm\">\r\n            선택된 그룹의 상담사 정보를 불러올 수 없습니다.\r\n            <br />\r\n            다시 시도하거나 관리자에게 문의하세요.\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const skillsToAdd = getSkillsToAdd();\r\n    const skillsToRemove = getSkillsToRemove();\r\n    const buttonDisabled = skillsToAdd.length === 0 && skillsToRemove.length === 0;\r\n\r\n    return (\r\n      <div className=\"\">\r\n        {/* 설명 영역 */}\r\n        <div className=\"text-sm text-[#333] mb-4\">\r\n          {isUnassignMode\r\n            ? `그룹의 모든 상담사(${groupMembers.length}명)에게서 스킬을 일괄 해제합니다. 해제할 스킬을 선택하세요.`\r\n            : `그룹의 모든 상담사(${groupMembers.length}명)에게 스킬을 일괄 할당합니다. 할당할 스킬을 선택하세요.`}\r\n        </div>\r\n\r\n        {/* 테넌트 ID 정보 */}\r\n        <div className=\"gary-border-box\">\r\n          <span>테넌트 ID: {tenantId || \"N/A\"}</span>\r\n        </div>\r\n\r\n        <div className=\"\">\r\n          {/* 그룹 정보 및 상담사 목록 */}\r\n          <div className=\"\">\r\n            <div className=\"mb-2 font-medium text-sm\">그룹 정보</div>\r\n            <div\r\n              className=\"flex justify-between items-center gary-border-box cursor-pointer\"\r\n              onClick={toggleCounselors}\r\n            >\r\n              <div className=\"flex items-center\">\r\n                <Image\r\n                  src=\"/tree-menu/group_icon_for_tree.png\"\r\n                  alt=\"그룹\"\r\n                  width={15}\r\n                  height={12}\r\n                  className=\"mr-2\"\r\n                />\r\n                <span className=\"text-sm text-[#333]\">{groupName}</span>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <span className=\"text-sm text-[#333] mr-2\">\r\n                  {groupMembers.length}명\r\n                </span>\r\n                {showCounselors ? (\r\n                  <ChevronUp className=\"h-4 w-4 text-gray-500\" />\r\n                ) : (\r\n                  <ChevronDown className=\"h-4 w-4 text-gray-500\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {showCounselors && (\r\n              <div\r\n                className=\"border rounded  mb-2\"\r\n                style={{ maxHeight: \"300px\", overflow: \"auto\" }}\r\n              >\r\n                <Table>\r\n                  <TableHeader className=\"sticky top-0 z-10\">\r\n                    <TableRow>\r\n                      <TableHead\r\n                        className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\"\r\n                        style={{ height: \"30px\" }}\r\n                      >\r\n                        ID\r\n                      </TableHead>\r\n                      <TableHead\r\n                        className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\"\r\n                        style={{ height: \"30px\" }}\r\n                      >\r\n                        이름\r\n                      </TableHead>\r\n                      <TableHead\r\n                        className=\"w-16 text-center bg-[#F8F8F8] text-[#333]\"\r\n                        style={{ height: \"30px\" }}\r\n                      >\r\n                        테넌트 ID\r\n                      </TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {groupMembers.map((counselor, index) => {\r\n                      const id =\r\n                        counselor.data?.counselorId ||\r\n                        counselor.counselorId ||\r\n                        \"-\";\r\n                      const name =\r\n                        counselor.data?.counselorname ||\r\n                        counselor.counselorname ||\r\n                        \"-\";\r\n                      const currentTenantId =\r\n                        counselor.data?.tenantId ||\r\n                        counselor.tenantId ||\r\n                        \"-\";\r\n                      return (\r\n                        <TableRow\r\n                          key={`counselor-${index}`}\r\n                          className=\"custom-hover\"\r\n                        >\r\n                          <TableCell className=\"py-1 text-sm text-center text-[#444]\">\r\n                            {id}\r\n                          </TableCell>\r\n                          <TableCell className=\"py-1 text-sm text-center text-[#444]\">\r\n                            {name}\r\n                          </TableCell>\r\n                          <TableCell className=\"py-1 text-sm text-center text-[#444]\">\r\n                            {currentTenantId}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 스킬 목록 */}\r\n          <div className=\"\">\r\n            <div className=\"mb-2 font-medium text-sm\">\r\n              {isUnassignMode ? \"해제할 스킬 선택\" : \"할당할 스킬 선택\"}\r\n              <span className=\"ml-2 text-blue-500 text-xs\">\r\n                {isUnassignMode\r\n                  ? `(${getSkillsToRemove().length}개 선택됨)`\r\n                  : `(${getSkillsToAdd().length}개 선택됨)`}\r\n              </span>\r\n            </div>\r\n\r\n            <div\r\n              className=\"border rounded\"\r\n              style={{ maxHeight: \"350px\", overflow: \"auto\" }}\r\n            >\r\n              <Table>\r\n                <TableHeader className=\"sticky top-0 z-10\">\r\n                  <TableRow>\r\n                    <TableHead\r\n                      className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\"\r\n                      style={{ height: \"30px\" }}\r\n                    >\r\n                      선택\r\n                    </TableHead>\r\n                    <TableHead\r\n                      className=\"w-16 text-center bg-[#F8F8F8] border-r text-[#333]\"\r\n                      style={{ height: \"30px\" }}\r\n                    >\r\n                      아이디\r\n                    </TableHead>\r\n                    <TableHead\r\n                      className=\"w-16 text-center bg-[#F8F8F8] text-[#333]\"\r\n                      style={{ height: \"30px\" }}\r\n                    >\r\n                      이름\r\n                    </TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {assignableSkills && assignableSkills.length > 0 ? (\r\n                    assignableSkills\r\n                      .map((skill) => {\r\n                        const isAlreadyAssigned =\r\n                          assignedSkillsInfo.includes(skill.skill_id);\r\n                        const isCurrentlySelected =\r\n                          selectedSkills.includes(skill.skill_id);\r\n                        // 해제 모드에서는 이미 할당된 스킬만 표시\r\n                        if (isUnassignMode && !isAlreadyAssigned) {\r\n                          return null;\r\n                        }\r\n                        const willBeAdded = !isUnassignMode && isCurrentlySelected;\r\n                        const willBeRemoved =\r\n                          isUnassignMode && isCurrentlySelected;\r\n                        return (\r\n                          <TableRow\r\n                            key={`skill-${skill.skill_id}`}\r\n                            className={`custom-hover ${\r\n                              willBeAdded || willBeRemoved ? \"bg-[#FFFAEE]\" : \"\"\r\n                            }`}\r\n                          >\r\n                            <TableCell\r\n                              className=\"text-center text-[#444]\"\r\n                              style={{ height: \"30px\", padding: 0 }}\r\n                            >\r\n                              <CustomCheckbox\r\n                                checked={isCurrentlySelected}\r\n                                onCheckedChange={() =>\r\n                                  handleSkillToggle(skill.skill_id)\r\n                                }\r\n                                disabled={isProcessing}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              className=\"text-center text-[#444]\"\r\n                              style={{ height: \"30px\", padding: 0 }}\r\n                            >\r\n                              {skill.skill_id}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              className=\"text-center text-[#444]\"\r\n                              style={{ height: \"30px\", padding: 0 }}\r\n                            >\r\n                              {skill.skill_name}\r\n                              {isAlreadyAssigned &&\r\n                                !isCurrentlySelected &&\r\n                                !isUnassignMode && (\r\n                                  <span className=\"ml-2 text-xs text-green-500\">\r\n                                    (현재 할당됨)\r\n                                  </span>\r\n                                )}\r\n                              {isAlreadyAssigned &&\r\n                                isCurrentlySelected &&\r\n                                !isUnassignMode && (\r\n                                  <span className=\"ml-2 text-xs text-blue-500\">\r\n                                    (재할당 예정)\r\n                                  </span>\r\n                                )}\r\n                              {!isAlreadyAssigned &&\r\n                                willBeAdded && (\r\n                                  <span className=\"ml-2 text-xs text-blue-500\">\r\n                                    (추가 예정)\r\n                                  </span>\r\n                                )}\r\n                              {willBeRemoved && (\r\n                                <span className=\"ml-2 text-xs text-red-500\">\r\n                                  (해제 예정)\r\n                                </span>\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })\r\n                      .filter(Boolean)\r\n                  ) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={3} className=\"text-center py-4\">\r\n                        {isUnassignMode\r\n                          ? \"해제할 스킬이 없습니다.\"\r\n                          : \"할당 가능한 스킬이 없습니다.\"}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 하단 버튼 영역 */}\r\n        <div className=\"mt-6 flex justify-end gap-1.5\">\r\n          <CommonButton\r\n            onClick={handleConfirm}\r\n            disabled={isProcessing || buttonDisabled}\r\n          >\r\n            {isProcessing\r\n              ? \"처리 중...\"\r\n              : isUnassignMode\r\n              ? `스킬 해제 (${getSkillsToRemove().length}개)`\r\n              : `스킬 할당 (${getSkillsToAdd().length}개)`}\r\n          </CommonButton>\r\n          <CommonButton\r\n            variant=\"outline\"\r\n            onClick={handleCancel}\r\n            disabled={isProcessing}\r\n          >\r\n            취소\r\n          </CommonButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomAlert\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title={\r\n        dialogTitle ||\r\n        `그룹 스킬 ${isUnassignMode ? \"해제\" : \"할당\"} - ${groupName || \"\"}`\r\n      }\r\n      message={renderContent()}\r\n      type=\"custom\"\r\n      width=\"min-w-[800px]\"\r\n      showButtons={false} // 내부 커스텀 버튼 사용\r\n    />\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8224, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenus/IContextMenuForGroupAndTeamAndCounselorProps.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import React, { useState, useCallback } from \"react\";\r\n// import { Menu, useContextMenu } from \"react-contexify\";\r\n// import \"react-contexify/ReactContexify.css\";\r\n// import { useCounselorFilterStore } from \"@/store/storeForSideMenuCounselorTab\";\r\n// import { useTabStore } from \"@/store/tabStore\";\r\n// import { IDialogForSkilAssignmentForCounselor } from \"../dialog/IDialogForSkilAssignmentForCounselor\";\r\n// import { IDialogForTeamSkilAssignment } from \"../dialog/IDialogForTeamSkilAssignment\";\r\n// import { toast } from \"react-toastify\";\r\n// import { IDialogForGroupSkilAssignment } from \"../dialog/IDialogForGroupSkilAssignment\";\r\n\r\n// interface IContextMenuForGroupAndTeamAndCounselorProps {\r\n//   children: React.ReactNode;\r\n//   item: {\r\n//     id: string;\r\n//     name: string;\r\n//     tenantId: string;\r\n//     type: \"counselor\" | \"team\" | \"group\";\r\n//     members?: any[]; // 상담사 목록\r\n//   };\r\n// }\r\n\r\n// export function IContextMenuForGroupAndTeamAndCounselor({\r\n//   children,\r\n//   item,\r\n// }: IContextMenuForGroupAndTeamAndCounselorProps) {\r\n//   const { addTab, removeTab, openedTabs } = useTabStore();\r\n//   const { setCandidateMembersForSkilAssign } = useCounselorFilterStore();\r\n\r\n//   // 다이얼로그 상태 관리\r\n//   const [isSkillDialogOpen, setIsSkillDialogOpen] = useState(false);\r\n//   const [isTeamSkillDialogOpen, setIsTeamSkillDialogOpen] = useState(false);\r\n//   const [isGroupSkillDialogOpen, setIsGroupSkillDialogOpen] = useState(false);\r\n//   const [isUnassignment, setIsUnassignment] = useState(false); // 할당 해제 모드 여부\r\n\r\n//   // Contexify 메뉴 ID 생성 (unique ID)\r\n//   const MENU_ID = `menu-for-${item.type}-${item.id}`;\r\n  \r\n//   // Contexify hook\r\n//   const { show } = useContextMenu({\r\n//     id: MENU_ID,\r\n//   });\r\n\r\n//   // 우클릭 이벤트 핸들러\r\n//   const handleContextMenu = useCallback(\r\n//     (event: React.MouseEvent) => {\r\n//       event.preventDefault();\r\n//       show({ event });\r\n//     },\r\n//     [show]\r\n//   );\r\n\r\n//   // 디버깅용 로그\r\n//   const logDebugInfo = (actionType: string, data: any) => {\r\n//     console.group(`🔍 [ContextMenu] ${actionType}`);\r\n//     console.log(\"타입:\", item.type);\r\n//     console.log(\"이름:\", item.name);\r\n//     console.log(\"ID:\", item.id);\r\n//     console.log(\"테넌트 ID:\", item.tenantId);\r\n\r\n//     if (item.members) {\r\n//       console.log(\"멤버 수:\", item.members.length);\r\n//       console.log(\"첫 번째 멤버 샘플:\", item.members[0]);\r\n//     }\r\n//     console.log(\"전달 데이터:\", data);\r\n//     console.groupEnd();\r\n//   };\r\n\r\n//   // tenantId 유효성 검증\r\n//   const validateTenantId = () => {\r\n//     if (!item.tenantId) {\r\n//       console.error(\"⚠️ Context Menu: tenantId가 누락되었습니다. item:\", item);\r\n//       return false;\r\n//     }\r\n//     return true;\r\n//   };\r\n\r\n//   // ====== 상담사(개인) 관련 함수 ======\r\n//   const handleCounselorSkillAssignment = (isUnassign: boolean) => {\r\n//     if (!validateTenantId()) return;\r\n\r\n//     logDebugInfo(isUnassign ? \"상담사 스킬 해제\" : \"상담사 스킬 할당\", {\r\n//       counselorId: item.id,\r\n//       counselorName: item.name,\r\n//       tenantId: item.tenantId,\r\n//       isUnassignment: isUnassign\r\n//     });\r\n\r\n//     setIsUnassignment(isUnassign);\r\n//     setIsSkillDialogOpen(true);\r\n//   };\r\n\r\n//   // ====== 팀 관련 함수 ======\r\n//   const handleTeamSkillAssignment = (isUnassign: boolean) => {\r\n//     if (!validateTenantId()) return;\r\n\r\n//     if (!item.members || item.members.length === 0) {\r\n//       toast.warn(\"팀에 멤버가 없습니다.\");\r\n//       return;\r\n//     }\r\n\r\n//     const membersWithTenantId = item.members.map((member) => ({\r\n//       ...member,\r\n//       tenantId: item.tenantId,\r\n//     }));\r\n\r\n//     logDebugInfo(isUnassign ? \"팀 스킬 해제\" : \"팀 스킬 할당\", {\r\n//       teamId: item.id,\r\n//       teamName: item.name,\r\n//       memberCount: membersWithTenantId.length,\r\n//       tenantId: item.tenantId,\r\n//       isUnassignment: isUnassign\r\n//     });\r\n\r\n//     setIsUnassignment(isUnassign);\r\n//     setCandidateMembersForSkilAssign(membersWithTenantId);\r\n//     setIsTeamSkillDialogOpen(true);\r\n//   };\r\n\r\n//   // ====== 그룹 관련 함수 ======\r\n//   const handleGroupSkillAssignment = (isUnassign: boolean) => {\r\n//     if (!validateTenantId()) return;\r\n\r\n//     if (!item.members || item.members.length === 0) {\r\n//       toast.warn(\"그룹에 멤버가 없습니다.\");\r\n//       return;\r\n//     }\r\n\r\n//     const membersWithTenantId = item.members.map((member) => ({\r\n//       ...member,\r\n//       tenantId: item.tenantId,\r\n//     }));\r\n\r\n//     logDebugInfo(isUnassign ? \"그룹 스킬 해제\" : \"그룹 스킬 할당\", {\r\n//       groupId: item.id,\r\n//       groupName: item.name,\r\n//       memberCount: membersWithTenantId.length,\r\n//       tenantId: item.tenantId,\r\n//       isUnassignment: isUnassign\r\n//     });\r\n\r\n//     setIsUnassignment(isUnassign);\r\n//     setCandidateMembersForSkilAssign(membersWithTenantId);\r\n//     setIsGroupSkillDialogOpen(true);\r\n//   };\r\n\r\n//   // 타입별로 할당 / 해제 분기\r\n//   const openSkillAssignmentDialog = (isUnassign: boolean = false) => {\r\n//     switch (item.type) {\r\n//       case \"counselor\":\r\n//         handleCounselorSkillAssignment(isUnassign);\r\n//         break;\r\n//       case \"team\":\r\n//         handleTeamSkillAssignment(isUnassign);\r\n//         break;\r\n//       case \"group\":\r\n//         handleGroupSkillAssignment(isUnassign);\r\n//         break;\r\n//       default:\r\n//         console.warn(`⚠️ 알 수 없는 타입: ${item.type}`);\r\n//     }\r\n//   };\r\n\r\n//   // 메뉴 항목 제목\r\n//   const getMenuItemTitle = (isUnassign: boolean = false) => {\r\n//     if (isUnassign) {\r\n//       return \"스킬 할당 해제\";\r\n//     }\r\n    \r\n//     switch (item.type) {\r\n//       case \"counselor\":\r\n//         return \"상담사 스킬 할당\";\r\n//       case \"team\":\r\n//         return \"팀 스킬 할당\";\r\n//       case \"group\":\r\n//         return \"그룹 스킬 할당\";\r\n//       default:\r\n//         return \"스킬 할당\";\r\n//     }\r\n//   };\r\n\r\n//   // 다이얼로그 타이틀\r\n//   const getDialogTitle = () => {\r\n//     const actionText = isUnassignment ? \"해제\" : \"할당\";\r\n//     switch (item.type) {\r\n//       case \"counselor\":\r\n//         return `상담사 스킬 ${actionText} - ${item.name}`;\r\n//       case \"team\":\r\n//         return `팀 스킬 ${actionText} - ${item.name}`;\r\n//       case \"group\":\r\n//         return `그룹 스킬 ${actionText} - ${item.name}`;\r\n//       default:\r\n//         return `스킬 ${actionText}`;\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {/* 컨텍스트 메뉴를 트리거할 요소 */}\r\n//       <div onContextMenu={handleContextMenu}>{children}</div>\r\n\r\n//       {/* React-Contexify 메뉴 정의 */}\r\n//       <Menu id={MENU_ID} animation=\"fade\" className=\"compact-menu\">\r\n//         <div className=\"contexify-custom-item\" onClick={() => openSkillAssignmentDialog(false)}>\r\n//           {getMenuItemTitle(false)}\r\n//         </div>\r\n//         <div className=\"contexify-custom-item\" onClick={() => openSkillAssignmentDialog(true)}>\r\n//           {getMenuItemTitle(true)}\r\n//         </div>\r\n//       </Menu>\r\n\r\n//       {/* ===== 상담사 스킬 할당 다이얼로그 ===== */}\r\n//       {item.type === \"counselor\" && isSkillDialogOpen && (\r\n//         <IDialogForSkilAssignmentForCounselor\r\n//           isOpen={isSkillDialogOpen}\r\n//           onClose={() => setIsSkillDialogOpen(false)}\r\n//           counselorId={item.id}\r\n//           counselorName={item.name}\r\n//           tenantId={item.tenantId}\r\n//           isUnassignment={isUnassignment}\r\n//           dialogTitle={getDialogTitle()}\r\n//         />\r\n//       )}\r\n\r\n//       {/* ===== 팀 스킬 할당 다이얼로그 ===== */}\r\n//       {item.type === \"team\" && isTeamSkillDialogOpen && (\r\n//         <IDialogForTeamSkilAssignment\r\n//           isOpen={isTeamSkillDialogOpen}\r\n//           onClose={() => setIsTeamSkillDialogOpen(false)}\r\n//           teamId={item.id}\r\n//           teamName={item.name}\r\n//           teamMembers={item.members || []}\r\n//           tenantId={item.tenantId}\r\n//           isUnassignment={isUnassignment}\r\n//           dialogTitle={getDialogTitle()}\r\n//         />\r\n//       )}\r\n\r\n//       {/* ===== 그룹 스킬 할당 다이얼로그 ===== */}\r\n//       {item.type === \"group\" && isGroupSkillDialogOpen && (\r\n//         <IDialogForGroupSkilAssignment\r\n//           isOpen={isGroupSkillDialogOpen}\r\n//           onClose={() => setIsGroupSkillDialogOpen(false)}\r\n//           groupId={item.id}\r\n//           groupName={item.name}\r\n//           groupMembers={item.members || []}\r\n//           tenantId={item.tenantId}\r\n//           isUnassignment={isUnassignment}\r\n//           dialogTitle={getDialogTitle()}\r\n//         />\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\n\r\nimport React, { useState, useCallback, useRef } from \"react\";\r\nimport {\r\n  ContextMenu,\r\n  ContextMenuTrigger,\r\n  ContextMenuContent,\r\n  ContextMenuItem,\r\n} from \"@/components/ui/context-menu\";\r\nimport { useCounselorFilterStore } from \"@/store/storeForSideMenuCounselorTab\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { IDialogForSkilAssignmentForCounselor } from \"../dialog/IDialogForSkilAssignmentForCounselor\";\r\nimport { IDialogForTeamSkilAssignment } from \"../dialog/IDialogForTeamSkilAssignment\";\r\nimport { toast } from \"react-toastify\";\r\nimport { IDialogForGroupSkilAssignment } from \"../dialog/IDialogForGroupSkilAssignment\";\r\nimport { useAvailableMenuStore } from \"@/store/useAvailableMenuStore\";\r\n\r\ninterface IContextMenuForGroupAndTeamAndCounselorProps {\r\n  children: React.ReactNode;\r\n  item: {\r\n    id: string;\r\n    name: string;\r\n    tenantId: string;\r\n    type: \"counselor\" | \"team\" | \"group\";\r\n    members?: any[]; // 상담사 목록\r\n  };\r\n}\r\n\r\n// 메뉴 ID 상수 정의 (원래 주석 코드의 값과 동일)\r\nconst MENU_IDS = {\r\n  GROUP_SKILL_ASSIGN: 31,\r\n  GROUP_SKILL_UNASSIGN: 32,\r\n  TEAM_SKILL_ASSIGN: 33,\r\n  TEAM_SKILL_UNASSIGN: 34,\r\n  COUNSELOR_SKILL_ASSIGN: 35,\r\n  COUNSELOR_SKILL_UNASSIGN: 36,\r\n};\r\n\r\nexport function IContextMenuForGroupAndTeamAndCounselor({\r\n  children,\r\n  item,\r\n}: IContextMenuForGroupAndTeamAndCounselorProps) {\r\n  const { addTab, removeTab, openedTabs } = useTabStore();\r\n  const { setCandidateMembersForSkilAssign } = useCounselorFilterStore();\r\n  const { availableMenuIdsForSkilAssignment } = useAvailableMenuStore();\r\n\r\n  // 다이얼로그 상태 관리\r\n  const [isSkillDialogOpen, setIsSkillDialogOpen] = useState(false);\r\n  const [isTeamSkillDialogOpen, setIsTeamSkillDialogOpen] = useState(false);\r\n  const [isGroupSkillDialogOpen, setIsGroupSkillDialogOpen] = useState(false);\r\n  const [isUnassignment, setIsUnassignment] = useState(false); // 할당 해제 모드 여부\r\n  \r\n  // 컨텍스트 메뉴 상태 관리 추가\r\n  const [isDialogActive, setIsDialogActive] = useState(false);\r\n\r\n  // 다이얼로그 닫힐 때 상태 초기화 핸들러\r\n  const handleDialogClose = () => {\r\n    setIsSkillDialogOpen(false);\r\n    setIsTeamSkillDialogOpen(false);\r\n    setIsGroupSkillDialogOpen(false);\r\n    setIsDialogActive(false); // 중요: 다이얼로그가 닫힐 때 상태 초기화\r\n  };\r\n\r\n  // 디버깅용 로그\r\n  const logDebugInfo = (actionType: string, data: any) => {\r\n    console.group(`🔍 [ContextMenu] ${actionType}`);\r\n    console.log(\"타입:\", item.type);\r\n    console.log(\"이름:\", item.name);\r\n    console.log(\"ID:\", item.id);\r\n    console.log(\"테넌트 ID:\", item.tenantId);\r\n    if (item.members) {\r\n      console.log(\"멤버 수:\", item.members.length);\r\n      console.log(\"첫 번째 멤버 샘플:\", item.members[0]);\r\n    }\r\n    console.log(\"전달 데이터:\", data);\r\n    console.groupEnd();\r\n  };\r\n\r\n  // tenantId 유효성 검증\r\n  const validateTenantId = () => {\r\n    if (!item.tenantId) {\r\n      console.error(\"⚠️ Context Menu: tenantId가 누락되었습니다. item:\", item);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // ====== 상담사(개인) 관련 함수 ======\r\n  const handleCounselorSkillAssignment = (isUnassign: boolean) => {\r\n    if (!validateTenantId()) return;\r\n    \r\n    logDebugInfo(isUnassign ? \"상담사 스킬 해제\" : \"상담사 스킬 할당\", {\r\n      counselorId: item.id,\r\n      counselorName: item.name,\r\n      tenantId: item.tenantId,\r\n      isUnassignment: isUnassign,\r\n    });\r\n    \r\n    setIsUnassignment(isUnassign);\r\n    setIsDialogActive(true); // 다이얼로그 활성화 상태로 설정\r\n    setIsSkillDialogOpen(true);\r\n  };\r\n\r\n  // ====== 팀 관련 함수 ======\r\n  const handleTeamSkillAssignment = (isUnassign: boolean) => {\r\n    if (!validateTenantId()) return;\r\n    if (!item.members || item.members.length === 0) {\r\n      toast.warn(\"팀에 멤버가 없습니다.\");\r\n      return;\r\n    }\r\n    \r\n    const membersWithTenantId = item.members.map((member) => ({\r\n      ...member,\r\n      tenantId: item.tenantId,\r\n    }));\r\n    \r\n    logDebugInfo(isUnassign ? \"팀 스킬 해제\" : \"팀 스킬 할당\", {\r\n      teamId: item.id,\r\n      teamName: item.name,\r\n      memberCount: membersWithTenantId.length,\r\n      tenantId: item.tenantId,\r\n      isUnassignment: isUnassign,\r\n    });\r\n    \r\n    setIsUnassignment(isUnassign);\r\n    setCandidateMembersForSkilAssign(membersWithTenantId);\r\n    setIsDialogActive(true); // 다이얼로그 활성화 상태로 설정\r\n    setIsTeamSkillDialogOpen(true);\r\n  };\r\n\r\n  // ====== 그룹 관련 함수 ======\r\n  const handleGroupSkillAssignment = (isUnassign: boolean) => {\r\n    if (!validateTenantId()) return;\r\n    if (!item.members || item.members.length === 0) {\r\n      toast.warn(\"그룹에 멤버가 없습니다.\");\r\n      return;\r\n    }\r\n    \r\n    const membersWithTenantId = item.members.map((member) => ({\r\n      ...member,\r\n      tenantId: item.tenantId,\r\n    }));\r\n    \r\n    logDebugInfo(isUnassign ? \"그룹 스킬 해제\" : \"그룹 스킬 할당\", {\r\n      groupId: item.id,\r\n      groupName: item.name,\r\n      memberCount: membersWithTenantId.length,\r\n      tenantId: item.tenantId,\r\n      isUnassignment: isUnassign,\r\n    });\r\n    \r\n    setIsUnassignment(isUnassign);\r\n    setCandidateMembersForSkilAssign(membersWithTenantId);\r\n    setIsDialogActive(true); // 다이얼로그 활성화 상태로 설정\r\n    setIsGroupSkillDialogOpen(true);\r\n  };\r\n\r\n  // 타입별로 할당 / 해제 분기 처리\r\n  const openSkillAssignmentDialog = (isUnassign: boolean = false) => {\r\n    switch (item.type) {\r\n      case \"counselor\":\r\n        handleCounselorSkillAssignment(isUnassign);\r\n        break;\r\n      case \"team\":\r\n        handleTeamSkillAssignment(isUnassign);\r\n        break;\r\n      case \"group\":\r\n        handleGroupSkillAssignment(isUnassign);\r\n        break;\r\n      default:\r\n        console.warn(`⚠️ 알 수 없는 타입: ${item.type}`);\r\n    }\r\n  };\r\n\r\n  // 메뉴 항목 제목 반환\r\n  const getMenuItemTitle = (isUnassign: boolean = false) => {\r\n    if (isUnassign) {\r\n      return \"스킬 할당 해제\";\r\n    }\r\n    switch (item.type) {\r\n      case \"counselor\":\r\n        return \"상담사 스킬 할당\";\r\n      case \"team\":\r\n        return \"팀 스킬 할당\";\r\n      case \"group\":\r\n        return \"그룹 스킬 할당\";\r\n      default:\r\n        return \"스킬 할당\";\r\n    }\r\n  };\r\n\r\n  // 다이얼로그 타이틀 생성\r\n  const getDialogTitle = () => {\r\n    const actionText = isUnassignment ? \"해제\" : \"할당\";\r\n    switch (item.type) {\r\n      case \"counselor\":\r\n        return `상담사 스킬 ${actionText} - ${item.name}`;\r\n      case \"team\":\r\n        return `팀 스킬 ${actionText} - ${item.name}`;\r\n      case \"group\":\r\n        return `그룹 스킬 ${actionText} - ${item.name}`;\r\n      default:\r\n        return `스킬 ${actionText}`;\r\n    }\r\n  };\r\n\r\n  // 각 타입별 메뉴 아이템 ID 반환\r\n  const getMenuItemId = (type: string, isUnassign: boolean): number => {\r\n    switch (type) {\r\n      case \"counselor\":\r\n        return isUnassign\r\n          ? MENU_IDS.COUNSELOR_SKILL_UNASSIGN\r\n          : MENU_IDS.COUNSELOR_SKILL_ASSIGN;\r\n      case \"team\":\r\n        return isUnassign\r\n          ? MENU_IDS.TEAM_SKILL_UNASSIGN\r\n          : MENU_IDS.TEAM_SKILL_ASSIGN;\r\n      case \"group\":\r\n        return isUnassign\r\n          ? MENU_IDS.GROUP_SKILL_UNASSIGN\r\n          : MENU_IDS.GROUP_SKILL_ASSIGN;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  // 메뉴 권한 체크 (현재 로그인한 사용자가 해당 메뉴에 접근 권한이 있는지)\r\n  const hasMenuPermission = (menuId: number): boolean => {\r\n    return availableMenuIdsForSkilAssignment.includes(menuId);\r\n  };\r\n\r\n  // 메뉴 아이템 배열 생성\r\n  const menuItems = [\r\n    {\r\n      key: \"skill-assign\",\r\n      title: getMenuItemTitle(false),\r\n      menuId: getMenuItemId(item.type, false),\r\n      isUnassign: false,\r\n    },\r\n    {\r\n      key: \"skill-unassign\",\r\n      title: getMenuItemTitle(true),\r\n      menuId: getMenuItemId(item.type, true),\r\n      isUnassign: true,\r\n    },\r\n  ];\r\n\r\n  // 권한이 있는 메뉴 아이템만 필터링\r\n  const authorizedMenuItems = menuItems.filter((menuItem) =>\r\n    hasMenuPermission(menuItem.menuId)\r\n  );\r\n  const hasAnyMenuItems = authorizedMenuItems.length > 0;\r\n\r\n  // 메뉴 아이템 클릭 핸들러\r\n  const handleItemClick = (isUnassign: boolean) => {\r\n    openSkillAssignmentDialog(isUnassign);\r\n  };\r\n  \r\n  // 컨텍스트 메뉴 트리거를 위한 스타일\r\n  const triggerStyles = {\r\n    display: \"inline-block\", // 이 부분이 중요함 - ContextMenuTrigger가 자식 요소를 감싸도록 함\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {hasAnyMenuItems ? (\r\n        <ContextMenu modal={false}> {/* modal 속성을 false로 설정하여 동작 개선 */}\r\n          <ContextMenuTrigger \r\n            className=\"w-full h-full\" \r\n            disabled={isDialogActive} // 다이얼로그가 활성화된 상태에서는 트리거 비활성화\r\n          >\r\n            {children}\r\n          </ContextMenuTrigger>\r\n          <ContextMenuContent className=\"min-w-[150px] rounded-[3px] border border-[#333]\">\r\n            {authorizedMenuItems.map((menuItem) => (\r\n              <ContextMenuItem\r\n                key={menuItem.key}\r\n                className=\"px-[6px] py-[4px] text-sm cursor-pointer hover:bg-gray-100\"\r\n                onClick={() => handleItemClick(menuItem.isUnassign)}\r\n              >\r\n                {menuItem.title}\r\n              </ContextMenuItem>\r\n            ))}\r\n          </ContextMenuContent>\r\n        </ContextMenu>\r\n      ) : (\r\n        <>{children}</>\r\n      )}\r\n\r\n      {/* ===== 상담사 스킬 할당 다이얼로그 ===== */}\r\n      {item.type === \"counselor\" && isSkillDialogOpen && (\r\n        <IDialogForSkilAssignmentForCounselor\r\n          isOpen={isSkillDialogOpen}\r\n          onClose={handleDialogClose} // 수정된 닫기 핸들러 사용\r\n          counselorId={item.id}\r\n          counselorName={item.name}\r\n          tenantId={item.tenantId}\r\n          isUnassignment={isUnassignment}\r\n          dialogTitle={getDialogTitle()}\r\n        />\r\n      )}\r\n\r\n      {/* ===== 팀 스킬 할당 다이얼로그 ===== */}\r\n      {item.type === \"team\" && isTeamSkillDialogOpen && (\r\n        <IDialogForTeamSkilAssignment\r\n          isOpen={isTeamSkillDialogOpen}\r\n          onClose={handleDialogClose} // 수정된 닫기 핸들러 사용\r\n          teamId={item.id}\r\n          teamName={item.name}\r\n          teamMembers={item.members || []}\r\n          tenantId={item.tenantId}\r\n          isUnassignment={isUnassignment}\r\n          dialogTitle={getDialogTitle()}\r\n        />\r\n      )}\r\n\r\n      {/* ===== 그룹 스킬 할당 다이얼로그 ===== */}\r\n      {item.type === \"group\" && isGroupSkillDialogOpen && (\r\n        <IDialogForGroupSkilAssignment\r\n          isOpen={isGroupSkillDialogOpen}\r\n          onClose={handleDialogClose} // 수정된 닫기 핸들러 사용\r\n          groupId={item.id}\r\n          groupName={item.name}\r\n          groupMembers={item.members || []}\r\n          tenantId={item.tenantId}\r\n          isUnassignment={isUnassignment}\r\n          dialogTitle={getDialogTitle()}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8768, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8774, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/TreeNodeForCounselorListForSideBar.tsx"],"sourcesContent":["// \"use client\";\r\n// import React, { useCallback } from 'react';\r\n// import { UserCircle2 } from \"lucide-react\";\r\n// import { IContextMenuForTennantForCounselorTreeMenu } from \"./ContextMenus/IContextMenuForTennantForCounselorTreeMenu\";\r\n// import { IContextMenuForGroupAndTeamAndCounselor } from \"./ContextMenus/IContextMenuForGroupAndTeamAndCounselorProps\";\r\n// import { useCounselorFilterStore } from \"@/store/storeForSideMenuCounselorTab\";\r\n// import Image from \"next/image\";\r\n\r\n// interface ExpandConfig {\r\n//   organization?: boolean;\r\n//   tenant?: boolean;\r\n//   group?: boolean;\r\n//   team?: boolean;\r\n//   counselor?: boolean;\r\n// }\r\n\r\n// interface ITreeNodeForCounselorListForSideBar {\r\n//   data: any;\r\n//   level: number;\r\n//   expandedNodes: Set<string>;\r\n//   selectedNodeId?: string;\r\n//   onNodeToggle: (nodeId: string) => void;\r\n//   onNodeSelect: (nodeId: string) => void;\r\n//   type: 'organization' | 'tenant' | 'group' | 'team' | 'counselor';\r\n//   defaultExpanded: ExpandConfig;\r\n//   parentTenantId?: string; // 부모로부터 전달된 tenantId\r\n// }\r\n\r\n// export function TreeNodeForCounselorListForSideBar({\r\n//   data,\r\n//   level,\r\n//   expandedNodes,\r\n//   selectedNodeId,\r\n//   onNodeToggle,\r\n//   onNodeSelect,\r\n//   type,\r\n//   defaultExpanded,\r\n//   parentTenantId\r\n// }: ITreeNodeForCounselorListForSideBar) {\r\n//   const { selectedBlendKind, setSelectedCounselor, sortOption } = useCounselorFilterStore();\r\n\r\n//   // 현재 노드의 tenantId 결정 (자신의 것이 있으면 그것을 사용, 없으면 부모에서 전달)\r\n//   const currentTenantId = type === 'tenant' ? data.tenantId : parentTenantId;\r\n\r\n//   const getCounselorsForNode = () => {\r\n//     switch (type) {\r\n//       case 'counselor':\r\n//         return [{\r\n//           ...data,\r\n//           tenantId: currentTenantId // 상담사 정보에 현재 tenantId 추가\r\n//         }];\r\n//       case 'team': {\r\n//         let counselors = data.counselorInfo?.map((counselor: any) => ({\r\n//           type: 'counselor',\r\n//           data: {\r\n//             ...counselor,\r\n//             tenantId: currentTenantId // 상담사에 tenantId 추가\r\n//           }\r\n//         })) || [];\r\n        \r\n//         // blendKind 필터 적용 (필요한 경우)\r\n//         if (selectedBlendKind !== null) {\r\n//           counselors = counselors.filter(\r\n//             (counselor: any) => Number(counselor.data.blendKind) === selectedBlendKind\r\n//           );\r\n//         }\r\n        \r\n//         // store의 sortOption에 따라 상담사 정렬 (이름 또는 아이디 기준)\r\n//         counselors.sort((a: { data: { counselorname: string; counselorId: string } }, b: { data: { counselorname: string; counselorId: string } }) => {\r\n//           if (sortOption.type === 'name') {\r\n//             if (a.data.counselorname < b.data.counselorname) return sortOption.direction === 'asc' ? -1 : 1;\r\n//             if (a.data.counselorname > b.data.counselorname) return sortOption.direction === 'asc' ? 1 : -1;\r\n//             return 0;\r\n//           } else {\r\n//             if (a.data.counselorId < b.data.counselorId) return sortOption.direction === 'asc' ? -1 : 1;\r\n//             if (a.data.counselorId > b.data.counselorId) return sortOption.direction === 'asc' ? 1 : -1;\r\n//             return 0;\r\n//           }\r\n//         });\r\n//         return counselors;\r\n//       }\r\n//       case 'group':\r\n//         // 그룹 내 모든 팀의 상담사 정보에 tenantId 추가\r\n//         return data.teamInfo?.reduce((acc: any[], team: any) => {\r\n//           const counselors = team.counselorInfo?.map((counselor: any) => ({\r\n//             ...counselor,\r\n//             tenantId: currentTenantId\r\n//           })) || [];\r\n//           return acc.concat(counselors);\r\n//         }, []) || [];\r\n//       default:\r\n//         return [];\r\n//     }\r\n//   };\r\n\r\n//   const getId = () => {\r\n//     switch (type) {\r\n//       case 'organization': return `org-${data.centerId}`;\r\n//       case 'tenant': return `tenant-${data.tenantId}`;\r\n//       case 'group': return `group-${data.groupId}`;\r\n//       case 'team': return `team-${data.teamId}`;\r\n//       case 'counselor': return data.counselorId;\r\n//     }\r\n//   };\r\n\r\n//   const getLabel = () => {\r\n//     switch (type) {\r\n//       case 'organization': return data.centerName;\r\n//       case 'tenant': return data.tenantName;\r\n//       case 'group': return data.groupName;\r\n//       case 'team': return data.teamName;\r\n//       case 'counselor': return data.counselorname;\r\n//     }\r\n//   };\r\n\r\n//   const getChildren = () => {\r\n//     switch (type) {\r\n//       case 'organization': \r\n//         return data.tenantInfo?.map((tenant: any) => ({\r\n//           type: 'tenant',\r\n//           data: tenant\r\n//         }));\r\n//       case 'tenant': \r\n//         return data.groupInfo?.map((group: any) => ({\r\n//           type: 'group',\r\n//           data: {\r\n//             ...group,\r\n//             tenantId: data.tenantId // 그룹에 tenantId 추가\r\n//           }\r\n//         }));\r\n//       case 'group': \r\n//         return data.teamInfo?.map((team: any) => ({\r\n//           type: 'team',\r\n//           data: {\r\n//             ...team,\r\n//             tenantId: currentTenantId // 팀에 tenantId 추가\r\n//           }\r\n//         }));\r\n//       case 'team': {\r\n//         let counselors = data.counselorInfo?.map((counselor: any) => ({\r\n//           type: 'counselor',\r\n//           data: {\r\n//             ...counselor,\r\n//             tenantId: currentTenantId // 상담사에 tenantId 추가\r\n//           }\r\n//         })) || [];\r\n        \r\n//         if (selectedBlendKind !== null) {\r\n//           counselors = counselors.filter(\r\n//             (counselor: any) => Number(counselor.data.blendKind) === selectedBlendKind\r\n//           );\r\n//         }\r\n        \r\n//         // 상담사 정렬\r\n//         counselors.sort((a: { data: { counselorname: string; counselorId: string } }, b: { data: { counselorname: string; counselorId: string } }) => {\r\n//           if (sortOption.type === 'name') {\r\n//             if (a.data.counselorname < b.data.counselorname) return sortOption.direction === 'asc' ? -1 : 1;\r\n//             if (a.data.counselorname > b.data.counselorname) return sortOption.direction === 'asc' ? 1 : -1;\r\n//             return 0;\r\n//           } else {\r\n//             if (a.data.counselorId < b.data.counselorId) return sortOption.direction === 'asc' ? -1 : 1;\r\n//             if (a.data.counselorId > b.data.counselorId) return sortOption.direction === 'asc' ? 1 : -1;\r\n//             return 0;\r\n//           }\r\n//         });\r\n//         return counselors;\r\n//       }\r\n//       case 'counselor': return null;\r\n//     }\r\n//   };\r\n\r\n//   const id = getId();\r\n//   const label = getLabel();\r\n//   const children = getChildren();\r\n//   const hasChildren = children && children.length > 0;\r\n//   const isExpanded = expandedNodes.has(id);\r\n//   const isSelected = selectedNodeId === id;\r\n\r\n//   const handleNodeClick = () => {\r\n//     onNodeSelect(id);\r\n//     if (hasChildren) {\r\n//       onNodeToggle(id);\r\n//     }\r\n\r\n//     if (type === 'counselor') {\r\n//       // 상담사 정보에 이미 tenantId가 포함되어 있거나, parentTenantId를 사용\r\n//       const tenantId = data.tenantId || currentTenantId;\r\n//       if (tenantId) {\r\n//         console.log(`상담사 선택: ${data.counselorname}, TenantID: ${tenantId}`);\r\n//         setSelectedCounselor(\r\n//           data.counselorId,\r\n//           data.counselorname,\r\n//           tenantId\r\n//         );\r\n//       } else {\r\n//         console.warn(`상담사 ${data.counselorname}의 tenantId를 찾을 수 없습니다.`);\r\n//       }\r\n//     }\r\n\r\n//     console.log(`${type} ${label} 클릭 - TenantID: ${currentTenantId}`);\r\n//     const counselors = getCounselorsForNode();\r\n//     console.log(`${type} 노드의 상담사 목록:`, counselors);\r\n//   };\r\n\r\n//   const handleContextMenu = useCallback(() => {\r\n//     onNodeSelect(id);\r\n//   }, [id, onNodeSelect]);\r\n\r\n//   const renderIcon = () => {\r\n//     switch (type) {\r\n//       case 'organization':\r\n//         return <Image src=\"/tree-menu/organization.png\" alt=\"조직\" width={14} height={12} />;\r\n//       case 'tenant':\r\n//         return <Image src=\"/tree-menu/tennant_office.png\" alt=\"테넌트\" width={14} height={12} />;\r\n//       case 'group':\r\n//         return <Image src=\"/tree-menu/group_icon_for_tree.png\" alt=\"그룹\" width={15} height={12} />;\r\n//       case 'team':\r\n//         return <Image src=\"/tree-menu/team_icon_for_tree.png\" alt=\"팀\" width={14} height={12} />;\r\n//       case 'counselor':\r\n//         const blendKind = Number(data.blendKind);\r\n//         switch (blendKind) {\r\n//           case 1:\r\n//             return <Image src=\"/tree-menu/inbound_counselor.png\" alt=\"인바운드\" width={15} height={12} />;\r\n//           case 2:\r\n//             return <Image src=\"/tree-menu/outbound_counselor.png\" alt=\"아웃바운드\" width={15} height={12} />;\r\n//           case 3:\r\n//             return <Image src=\"/tree-menu/inbound_outbound_mix.png\" alt=\"블렌드\" width={15} height={12} />;\r\n//           default:\r\n//             return <UserCircle2 className=\"h-4 w-4 text-gray-600\" />;\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   const renderNodeContent = () => (\r\n//     <div\r\n//       id={type === 'counselor' ? `counselor-${data.counselorId}` : undefined}\r\n//       className={`flex items-center hover:bg-[#FFFAEE] px-2 py-0.5 cursor-pointer transition-colors duration-150 text-[#555]\r\n//         ${isSelected ? \"bg-[#FFFAEE]\" : \"\"}`}\r\n//       onClick={handleNodeClick}\r\n//       onContextMenu={handleContextMenu}\r\n//       style={{ paddingLeft: `${level * 16 + 8}px` }}\r\n//     >\r\n//       <div className=\"flex items-center w-full gap-2\">\r\n//         {hasChildren ? (\r\n//           isExpanded ? (\r\n//             <Image src=\"/tree-menu/minus_for_tree.png\" alt=\"접기\" width={12} height={12} />\r\n//           ) : (\r\n//             <Image src=\"/tree-menu/plus_icon_for_tree.png\" alt=\"펼치기\" width={12} height={12} />\r\n//           )\r\n//         ) : (\r\n//           <span className=\"w-3\" />\r\n//         )}\r\n//         {renderIcon()}\r\n//         <span className={`text-sm text-555 ${isSelected ? \"font-medium\" : \"\"}`}>\r\n//           {type === 'counselor' ? `${getId()} [${getLabel()}]` : getLabel()}\r\n//         </span>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n\r\n//   const renderWithContextMenu = (content: React.ReactNode) => {\r\n//     // 1) organization 노드도 tenant와 동일한 컨텍스트 메뉴를 쓰고 싶다면\r\n//     if (type === 'organization' || type === 'tenant') {\r\n//       return (\r\n//         <IContextMenuForTennantForCounselorTreeMenu>\r\n//           {content}\r\n//         </IContextMenuForTennantForCounselorTreeMenu>\r\n//       );\r\n//     }\r\n  \r\n//     // 2) group, team, counselor는 기존 로직 그대로\r\n//     if (['group', 'team', 'counselor'].includes(type)) {\r\n//       const counselors = getCounselorsForNode();\r\n      \r\n//       const contextMenuItem = {\r\n//         id:\r\n//           type === 'counselor'\r\n//             ? data.counselorId\r\n//             : type === 'team'\r\n//             ? data.teamId\r\n//             : data.groupId,\r\n//         name:\r\n//           type === 'counselor'\r\n//             ? data.counselorname\r\n//             : type === 'team'\r\n//             ? data.teamName\r\n//             : data.groupName,\r\n//         tenantId: currentTenantId,\r\n//         type: type as 'counselor' | 'team' | 'group',\r\n//         members: counselors\r\n//       };\r\n  \r\n//       return (\r\n//         <IContextMenuForGroupAndTeamAndCounselor item={contextMenuItem}>\r\n//           {content}\r\n//         </IContextMenuForGroupAndTeamAndCounselor>\r\n//       );\r\n//     }\r\n  \r\n//     // 그 외에는 컨텍스트 메뉴를 적용하지 않음\r\n//     return content;\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"select-none\">\r\n//       {renderWithContextMenu(renderNodeContent())}\r\n//       {hasChildren && isExpanded && (\r\n//         <div className=\"space-y-0.5\">\r\n//           {children.map((child: any) => {\r\n//             let childId;\r\n//             switch (child.type) {\r\n//               case 'tenant': childId = child.data.tenantId; break;\r\n//               case 'group': childId = child.data.groupId; break;\r\n//               case 'team': childId = child.data.teamId; break;\r\n//               case 'counselor': childId = child.data.counselorId; break;\r\n//               default: childId = child.data.centerId;\r\n//             }\r\n//             return (\r\n//               <TreeNodeForCounselorListForSideBar\r\n//                 key={`${child.type}-${childId}`}\r\n//                 data={child.data}\r\n//                 type={child.type}\r\n//                 level={level + 1}\r\n//                 expandedNodes={expandedNodes}\r\n//                 selectedNodeId={selectedNodeId}\r\n//                 onNodeToggle={onNodeToggle}\r\n//                 onNodeSelect={onNodeSelect}\r\n//                 defaultExpanded={defaultExpanded}\r\n//                 parentTenantId={currentTenantId}\r\n//               />\r\n//             );\r\n//           })}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\nimport React, { useCallback } from 'react';\r\nimport { UserCircle2 } from \"lucide-react\";\r\nimport { IContextMenuForTennantForCounselorTreeMenu } from \"./ContextMenus/IContextMenuForTennantForCounselorTreeMenu\";\r\nimport { IContextMenuForGroupAndTeamAndCounselor } from \"./ContextMenus/IContextMenuForGroupAndTeamAndCounselorProps\";\r\nimport { useCounselorFilterStore } from \"@/store/storeForSideMenuCounselorTab\";\r\nimport Image from \"next/image\";\r\n\r\ninterface ExpandConfig {\r\n  organization?: boolean;\r\n  tenant?: boolean;\r\n  group?: boolean;\r\n  team?: boolean;\r\n  counselor?: boolean;\r\n}\r\n\r\ninterface ITreeNodeForCounselorListForSideBar {\r\n  data: any;\r\n  level: number;\r\n  expandedNodes: Set<string>;\r\n  selectedNodeId?: string;\r\n  onNodeToggle: (nodeId: string) => void;\r\n  onNodeSelect: (nodeId: string) => void;\r\n  type: 'organization' | 'tenant' | 'group' | 'team' | 'counselor';\r\n  defaultExpanded: ExpandConfig;\r\n  parentTenantId?: string; // 부모로부터 전달된 tenantId\r\n}\r\n\r\nexport function TreeNodeForCounselorListForSideBar({\r\n  data,\r\n  level,\r\n  expandedNodes,\r\n  selectedNodeId,\r\n  onNodeToggle,\r\n  onNodeSelect,\r\n  type,\r\n  defaultExpanded,\r\n  parentTenantId\r\n}: ITreeNodeForCounselorListForSideBar) {\r\n  const { selectedBlendKind, setSelectedCounselor, sortOption } = useCounselorFilterStore();\r\n\r\n  // 현재 노드의 tenantId 결정 (자신의 것이 있으면 그것을 사용, 없으면 부모에서 전달)\r\n  const currentTenantId = type === 'tenant' ? data.tenantId : parentTenantId;\r\n\r\n  const getCounselorsForNode = () => {\r\n    switch (type) {\r\n      case 'counselor':\r\n        return [{\r\n          ...data,\r\n          tenantId: currentTenantId // 상담사 정보에 현재 tenantId 추가\r\n        }];\r\n      case 'team': {\r\n        let counselors = data.counselorInfo?.map((counselor: any) => ({\r\n          type: 'counselor',\r\n          data: {\r\n            ...counselor,\r\n            tenantId: currentTenantId // 상담사에 tenantId 추가\r\n          }\r\n        })) || [];\r\n        \r\n        // blendKind 필터 적용 (필요한 경우)\r\n        if (selectedBlendKind !== null) {\r\n          counselors = counselors.filter(\r\n            (counselor: any) => {\r\n              const blendKind = Number(counselor.data.blendKind);\r\n              if (selectedBlendKind === 1) {\r\n                // 인바운드 선택 시 인바운드(1)와 블렌드(3)도 표시\r\n                return blendKind === 1 || blendKind === 3;\r\n              } else if (selectedBlendKind === 2) {\r\n                // 아웃바운드 선택 시 아웃바운드(2)와 블렌드(3)도 표시\r\n                return blendKind === 2 || blendKind === 3;\r\n              } else {\r\n                // 그 외(블렌드 선택 시)는 정확히 일치하는 것만\r\n                return blendKind === selectedBlendKind;\r\n              }\r\n            }\r\n          );\r\n        }\r\n        \r\n        // store의 sortOption에 따라 상담사 정렬 (이름 또는 아이디 기준)\r\n        counselors.sort((a: { data: { counselorname: string; counselorId: string } }, b: { data: { counselorname: string; counselorId: string } }) => {\r\n          if (sortOption.type === 'name') {\r\n            if (a.data.counselorname < b.data.counselorname) return sortOption.direction === 'asc' ? -1 : 1;\r\n            if (a.data.counselorname > b.data.counselorname) return sortOption.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n          } else {\r\n            if (a.data.counselorId < b.data.counselorId) return sortOption.direction === 'asc' ? -1 : 1;\r\n            if (a.data.counselorId > b.data.counselorId) return sortOption.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n          }\r\n        });\r\n        return counselors;\r\n      }\r\n      case 'group':\r\n        // 그룹 내 모든 팀의 상담사 정보에 tenantId 추가\r\n        return data.teamInfo?.reduce((acc: any[], team: any) => {\r\n          const counselors = team.counselorInfo?.map((counselor: any) => ({\r\n            ...counselor,\r\n            tenantId: currentTenantId\r\n          })) || [];\r\n          return acc.concat(counselors);\r\n        }, []) || [];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  const getId = () => {\r\n    switch (type) {\r\n      case 'organization': return `org-${data.centerId}`;\r\n      case 'tenant': return `tenant-${data.tenantId}`;\r\n      case 'group': return `group-${data.groupId}`;\r\n      case 'team': return `team-${data.teamId}`;\r\n      case 'counselor': return data.counselorId;\r\n    }\r\n  };\r\n\r\n  const getLabel = () => {\r\n    switch (type) {\r\n      case 'organization': return data.centerName;\r\n      case 'tenant': return data.tenantName;\r\n      case 'group': return '[' + data.groupId + ']' + data.groupName;\r\n      case 'team': return '[' + data.teamId + ']' + data.teamName;\r\n      case 'counselor': return data.counselorname;\r\n    }\r\n  };\r\n\r\n  const getChildren = () => {\r\n    switch (type) {\r\n      case 'organization': \r\n        return data.tenantInfo?.map((tenant: any) => ({\r\n          type: 'tenant',\r\n          data: tenant\r\n        }));\r\n      case 'tenant': \r\n        return data.groupInfo?.map((group: any) => ({\r\n          type: 'group',\r\n          data: {\r\n            ...group,\r\n            tenantId: data.tenantId // 그룹에 tenantId 추가\r\n          }\r\n        }));\r\n      case 'group': \r\n        return data.teamInfo?.map((team: any) => ({\r\n          type: 'team',\r\n          data: {\r\n            ...team,\r\n            tenantId: currentTenantId // 팀에 tenantId 추가\r\n          }\r\n        }));\r\n      case 'team': {\r\n        let counselors = data.counselorInfo?.map((counselor: any) => ({\r\n          type: 'counselor',\r\n          data: {\r\n            ...counselor,\r\n            tenantId: currentTenantId // 상담사에 tenantId 추가\r\n          }\r\n        })) || [];\r\n        \r\n        if (selectedBlendKind !== null) {\r\n          counselors = counselors.filter(\r\n            (counselor: any) => {\r\n              const blendKind = Number(counselor.data.blendKind);\r\n              if (selectedBlendKind === 1) {\r\n                // 인바운드 선택 시 인바운드(1)와 블렌드(3)도 표시\r\n                return blendKind === 1 || blendKind === 3;\r\n              } else if (selectedBlendKind === 2) {\r\n                // 아웃바운드 선택 시 아웃바운드(2)와 블렌드(3)도 표시\r\n                return blendKind === 2 || blendKind === 3;\r\n              } else {\r\n                // 그 외(블렌드 선택 시)는 정확히 일치하는 것만\r\n                return blendKind === selectedBlendKind;\r\n              }\r\n            }\r\n          );\r\n        }\r\n        \r\n        // 상담사 정렬\r\n        counselors.sort((a: { data: { counselorname: string; counselorId: string } }, b: { data: { counselorname: string; counselorId: string } }) => {\r\n          if (sortOption.type === 'name') {\r\n            if (a.data.counselorname < b.data.counselorname) return sortOption.direction === 'asc' ? -1 : 1;\r\n            if (a.data.counselorname > b.data.counselorname) return sortOption.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n          } else {\r\n            if (a.data.counselorId < b.data.counselorId) return sortOption.direction === 'asc' ? -1 : 1;\r\n            if (a.data.counselorId > b.data.counselorId) return sortOption.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n          }\r\n        });\r\n        return counselors;\r\n      }\r\n      case 'counselor': return null;\r\n    }\r\n  };\r\n\r\n  const id = getId();\r\n  const label = getLabel();\r\n  const children = getChildren();\r\n  const hasChildren = children && children.length > 0;\r\n  const isExpanded = expandedNodes.has(id);\r\n  const isSelected = selectedNodeId === id;\r\n\r\n  const handleNodeClick = () => {\r\n    onNodeSelect(id);\r\n    if (hasChildren) {\r\n      onNodeToggle(id);\r\n    }\r\n\r\n    if (type === 'counselor') {\r\n      // 상담사 정보에 이미 tenantId가 포함되어 있거나, parentTenantId를 사용\r\n      const tenantId = data.tenantId || currentTenantId;\r\n      if (tenantId) {\r\n        console.log(`상담사 선택: ${data.counselorname}, TenantID: ${tenantId}`);\r\n        setSelectedCounselor(\r\n          data.counselorId,\r\n          data.counselorname,\r\n          tenantId\r\n        );\r\n      } else {\r\n        console.warn(`상담사 ${data.counselorname}의 tenantId를 찾을 수 없습니다.`);\r\n      }\r\n    }\r\n\r\n    console.log(`${type} ${label} 클릭 - TenantID: ${currentTenantId}`);\r\n    const counselors = getCounselorsForNode();\r\n    console.log(`${type} 노드의 상담사 목록:`, counselors);\r\n  };\r\n\r\n  const handleContextMenu = useCallback(() => {\r\n    onNodeSelect(id);\r\n  }, [id, onNodeSelect]);\r\n\r\n  const renderIcon = () => {\r\n    switch (type) {\r\n      case 'organization':\r\n        return <Image src=\"/tree-menu/organization.png\" alt=\"조직\" width={14} height={12} />;\r\n      case 'tenant':\r\n        return <Image src=\"/tree-menu/tennant_office.png\" alt=\"테넌트\" width={14} height={12} />;\r\n      case 'group':\r\n        return <Image src=\"/tree-menu/group_icon_for_tree.png\" alt=\"그룹\" width={15} height={12} />;\r\n      case 'team':\r\n        return <Image src=\"/tree-menu/team_icon_for_tree.png\" alt=\"팀\" width={14} height={12} />;\r\n      case 'counselor':\r\n        const blendKind = Number(data.blendKind);\r\n        switch (blendKind) {\r\n          case 1:\r\n            return <Image src=\"/tree-menu/inbound_counselor.png\" alt=\"인바운드\" width={15} height={12} />;\r\n          case 2:\r\n            return <Image src=\"/tree-menu/outbound_counselor.png\" alt=\"아웃바운드\" width={15} height={12} />;\r\n          case 3:\r\n            return <Image src=\"/tree-menu/inbound_outbound_mix.png\" alt=\"블렌드\" width={15} height={12} />;\r\n          default:\r\n            return <UserCircle2 className=\"h-4 w-4 text-gray-600\" />;\r\n        }\r\n    }\r\n  };\r\n\r\n  const renderNodeContent = () => (\r\n    <div\r\n      id={type === 'counselor' ? `counselor-${data.counselorId}` : undefined}\r\n      className={`flex items-center hover:bg-[#FFFAEE] px-2 py-0.5 cursor-pointer transition-colors duration-150 text-[#555]\r\n        ${isSelected ? \"bg-[#FFFAEE]\" : \"\"}`}\r\n      onClick={handleNodeClick}\r\n      onContextMenu={handleContextMenu}\r\n      style={{ paddingLeft: `${level * 16 + 8}px` }}\r\n    >\r\n      <div className=\"flex items-center w-full gap-2\">\r\n        {hasChildren ? (\r\n          isExpanded ? (\r\n            <Image src=\"/tree-menu/minus_for_tree.png\" alt=\"접기\" width={12} height={12} />\r\n          ) : (\r\n            <Image src=\"/tree-menu/plus_icon_for_tree.png\" alt=\"펼치기\" width={12} height={12} />\r\n          )\r\n        ) : (\r\n          <span className=\"w-3\" />\r\n        )}\r\n        {renderIcon()}\r\n        <span className={`text-sm text-555 ${isSelected ? \"font-medium\" : \"\"}`}>\r\n          {type === 'counselor' ? `${getId()} [${getLabel()}]` : getLabel()}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderWithContextMenu = (content: React.ReactNode) => {\r\n    // 1) organization 노드도 tenant와 동일한 컨텍스트 메뉴를 쓰고 싶다면\r\n    if (type === 'organization' || type === 'tenant') {\r\n      return (\r\n        <IContextMenuForTennantForCounselorTreeMenu>\r\n          {content}\r\n        </IContextMenuForTennantForCounselorTreeMenu>\r\n      );\r\n    }\r\n  \r\n    // 2) group, team, counselor는 기존 로직 그대로\r\n    if (['group', 'team', 'counselor'].includes(type)) {\r\n      const counselors = getCounselorsForNode();\r\n      \r\n      const contextMenuItem = {\r\n        id:\r\n          type === 'counselor'\r\n            ? data.counselorId\r\n            : type === 'team'\r\n            ? data.teamId\r\n            : data.groupId,\r\n        name:\r\n          type === 'counselor'\r\n            ? data.counselorname\r\n            : type === 'team'\r\n            ? data.teamName\r\n            : data.groupName,\r\n        tenantId: currentTenantId,\r\n        type: type as 'counselor' | 'team' | 'group',\r\n        members: counselors\r\n      };\r\n  \r\n      return (\r\n        <IContextMenuForGroupAndTeamAndCounselor item={contextMenuItem}>\r\n          {content} \r\n        </IContextMenuForGroupAndTeamAndCounselor>\r\n      );\r\n    }\r\n  \r\n    // 그 외에는 컨텍스트 메뉴를 적용하지 않음\r\n    return content;\r\n  };\r\n  \r\n  return (\r\n    <div className=\"select-none\">\r\n      {renderWithContextMenu(renderNodeContent())}\r\n      {hasChildren && isExpanded && (\r\n        <div className=\"space-y-0.5\">\r\n          {children.map((child: any) => {\r\n            let childId;\r\n            switch (child.type) {\r\n              case 'tenant': childId = child.data.tenantId; break;\r\n              case 'group': childId = child.data.groupId; break;\r\n              case 'team': childId = child.data.teamId; break;\r\n              case 'counselor': childId = child.data.counselorId; break;\r\n              default: childId = child.data.centerId;\r\n            }\r\n            return (\r\n              <TreeNodeForCounselorListForSideBar\r\n                key={`${child.type}-${childId}`}\r\n                data={child.data}\r\n                type={child.type}\r\n                level={level + 1}\r\n                expandedNodes={expandedNodes}\r\n                selectedNodeId={selectedNodeId}\r\n                onNodeToggle={onNodeToggle}\r\n                onNodeSelect={onNodeSelect}\r\n                defaultExpanded={defaultExpanded}\r\n                parentTenantId={currentTenantId}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 9547, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9553, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/searchbar/SearchBarForSideMenuForCounselorTab.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import { Search } from 'lucide-react';\r\n// import { KeyboardEvent, useState, useEffect, useRef, MouseEvent as ReactMouseEvent } from 'react';\r\n\r\n// interface Counselor {\r\n//   counselorId: string;\r\n//   counselorName: string;\r\n//   tenantId: string;\r\n// }\r\n\r\n// interface SearchBarProps {\r\n//   value: string;\r\n//   onChange: (value: string) => void;\r\n//   onSearch: () => void;\r\n//   placeholder?: string;\r\n//   counselors?: Counselor[]; // 전체 상담사 목록 받기\r\n//   onSelectCounselor?: (counselorId: string, counselorName: string, tenantId: string) => void;\r\n// }\r\n\r\n// export function SearchBarForSideMenuForCounselorTab({ \r\n//   value, \r\n//   onChange, \r\n//   onSearch,\r\n//   placeholder = \"상담사\",\r\n//   counselors = [],\r\n//   onSelectCounselor\r\n// }: SearchBarProps) {\r\n//   const [suggestions, setSuggestions] = useState<Counselor[]>([]);\r\n//   const [showSuggestions, setShowSuggestions] = useState(false);\r\n//   const suggestionRef = useRef<HTMLDivElement>(null);\r\n//   const inputRef = useRef<HTMLInputElement>(null);\r\n//   // 검색 완료 또는 항목 선택 완료 후 상태를 추적하는 변수 추가\r\n//   const [recentlySelected, setRecentlySelected] = useState(false);\r\n\r\n//   const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//     if (e.key === 'Enter') {\r\n//       e.preventDefault();\r\n//       e.stopPropagation();\r\n//       onSearch();\r\n//       setShowSuggestions(false);\r\n//       setRecentlySelected(true);\r\n//       // 검색 후 포커스를 제거하여 제안이 다시 나타나지 않도록 함\r\n//       if (inputRef.current) {\r\n//         inputRef.current.blur();\r\n//       }\r\n//     } else if (e.key === 'Escape') {\r\n//       setShowSuggestions(false);\r\n//     }\r\n//   };\r\n\r\n//   // 입력값이 변경될 때마다 자동완성 목록 업데이트\r\n//   useEffect(() => {\r\n//     // 최근에 선택했으면 제안 표시 안함\r\n//     if (recentlySelected) {\r\n//       setRecentlySelected(false);\r\n//       return;\r\n//     }\r\n    \r\n//     if (value.length >= 2 && counselors.length > 0) {\r\n//       const filtered = counselors.filter(counselor => \r\n//         counselor.counselorName.toLowerCase().includes(value.toLowerCase()) && \r\n//         counselor.counselorName.toLowerCase() !== value.toLowerCase() // 정확히 일치하는 항목은 제외\r\n//       );\r\n//       setSuggestions(filtered);\r\n//       setShowSuggestions(filtered.length > 0);\r\n//     } else {\r\n//       setSuggestions([]);\r\n//       setShowSuggestions(false);\r\n//     }\r\n//   }, [value, counselors, recentlySelected]);\r\n\r\n//   // 외부 클릭 시 자동완성 닫기\r\n//   useEffect(() => {\r\n//     const handleClickOutside = (event: globalThis.MouseEvent) => {\r\n//       if (\r\n//         suggestionRef.current && \r\n//         !suggestionRef.current.contains(event.target as Node) &&\r\n//         inputRef.current && \r\n//         !inputRef.current.contains(event.target as Node)\r\n//       ) {\r\n//         setShowSuggestions(false);\r\n//       }\r\n//     };\r\n\r\n//     document.addEventListener('mousedown', handleClickOutside);\r\n//     return () => {\r\n//       document.removeEventListener('mousedown', handleClickOutside);\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSuggestionClick = (counselor: Counselor) => {\r\n//     onChange(counselor.counselorName);\r\n//     setShowSuggestions(false);\r\n//     setRecentlySelected(true);\r\n//     if (onSelectCounselor) {\r\n//       onSelectCounselor(counselor.counselorId, counselor.counselorName, counselor.tenantId);\r\n//     }\r\n//     // 선택 후 포커스를 제거하여 제안이 다시 나타나지 않도록 함\r\n//     if (inputRef.current) {\r\n//       inputRef.current.blur();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"w-full py-1 px-1\">\r\n//       <div className=\"relative w-full\">\r\n//         <input\r\n//           ref={inputRef}\r\n//           type=\"text\"\r\n//           value={value}\r\n//           onChange={(e) => onChange(e.target.value)}\r\n//           onKeyDown={handleKeyDown}\r\n//           onFocus={() => {\r\n//             // 최근에 선택한 경우가 아닐 때만 제안 표시\r\n//             if (!recentlySelected && value.length >= 2 && suggestions.length > 0) {\r\n//               setShowSuggestions(true);\r\n//             }\r\n//           }}\r\n//           placeholder={placeholder}\r\n//           className=\"w-full pl-2 pr-7 py-1 text-xs border rounded focus:outline-none focus:border-[#5BC2C1]\"\r\n//         />\r\n//         <button \r\n//           onClick={() => {\r\n//             onSearch();\r\n//             setShowSuggestions(false);\r\n//             setRecentlySelected(true);\r\n//             // 검색 후 포커스를 제거\r\n//             if (inputRef.current) {\r\n//               inputRef.current.blur();\r\n//             }\r\n//           }}\r\n//           className=\"absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n//         >\r\n//           <Search size={14} />\r\n//         </button>\r\n        \r\n//         {/* 자동완성 드롭다운 */}\r\n//         {showSuggestions && (\r\n//           <div \r\n//             ref={suggestionRef}\r\n//             className=\"absolute z-10 w-full mt-1 bg-white border rounded shadow-lg max-h-40 overflow-y-auto\"\r\n//           >\r\n//             {suggestions.map((counselor) => (\r\n//               <div\r\n//                 key={counselor.counselorId}\r\n//                 className=\"px-2 py-1 text-xs hover:bg-gray-100 cursor-pointer\"\r\n//                 onClick={() => handleSuggestionClick(counselor)}\r\n//               >\r\n//                 {counselor.counselorName}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\"use client\";\r\n\r\nimport { Search } from 'lucide-react';\r\nimport { KeyboardEvent, useState, useEffect, useRef, MouseEvent as ReactMouseEvent } from 'react';\r\n\r\ninterface Counselor {\r\n  counselorId: string;\r\n  counselorName: string;\r\n  tenantId: string;\r\n}\r\n\r\ninterface SearchBarProps {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  onSearch: () => void;\r\n  placeholder?: string;\r\n  counselors?: Counselor[]; // 전체 상담사 목록 받기\r\n  onSelectCounselor?: (counselorId: string, counselorName: string, tenantId: string) => void;\r\n}\r\n\r\nexport function SearchBarForSideMenuForCounselorTab({ \r\n  value, \r\n  onChange, \r\n  onSearch,\r\n  placeholder = \"상담사\",\r\n  counselors = [],\r\n  onSelectCounselor\r\n}: SearchBarProps) {\r\n  const [suggestions, setSuggestions] = useState<Counselor[]>([]);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\r\n  const suggestionRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  // 검색 완료 또는 항목 선택 완료 후 상태를 추적하는 변수 추가\r\n  const [recentlySelected, setRecentlySelected] = useState(false);\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      if (!showSuggestions && suggestions.length > 0) {\r\n        setShowSuggestions(true);\r\n        setHighlightedIndex(0);\r\n      } else {\r\n        setHighlightedIndex((prev) => {\r\n          const nextIndex = prev + 1 >= suggestions.length ? 0 : prev + 1;\r\n          return nextIndex;\r\n        });\r\n      }\r\n    } else if (e.key === 'ArrowUp') {\r\n      e.preventDefault();\r\n      setHighlightedIndex((prev) => {\r\n        const nextIndex = prev - 1 < 0 ? suggestions.length - 1 : prev - 1;\r\n        return nextIndex;\r\n      });\r\n    } else if (e.key === 'Enter') {\r\n      if (showSuggestions && highlightedIndex >= 0 && highlightedIndex < suggestions.length) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        handleSuggestionClick(suggestions[highlightedIndex]);\r\n      } else {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onSearch();\r\n        setShowSuggestions(false);\r\n        setRecentlySelected(true);\r\n        if (inputRef.current) {\r\n          inputRef.current.blur();\r\n        }\r\n      }\r\n    } else if (e.key === 'Escape') {\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  // 입력값이 변경될 때마다 자동완성 목록 업데이트\r\n  useEffect(() => {\r\n    if (recentlySelected) {\r\n      setRecentlySelected(false);\r\n      return;\r\n    }\r\n    \r\n    if (value.length >= 2 && counselors.length > 0) {\r\n      const filtered = counselors.filter(counselor => \r\n        counselor.counselorName.toLowerCase().includes(value.toLowerCase()) && \r\n        counselor.counselorName.toLowerCase() !== value.toLowerCase() // 정확히 일치하는 항목은 제외\r\n      );\r\n      setSuggestions(filtered);\r\n      setShowSuggestions(filtered.length > 0);\r\n      setHighlightedIndex(filtered.length > 0 ? 0 : -1);\r\n    } else {\r\n      setSuggestions([]);\r\n      setShowSuggestions(false);\r\n      setHighlightedIndex(-1);\r\n    }\r\n  }, [value, counselors, recentlySelected]);\r\n\r\n  // 외부 클릭 시 자동완성 닫기\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: globalThis.MouseEvent) => {\r\n      if (\r\n        suggestionRef.current && \r\n        !suggestionRef.current.contains(event.target as Node) &&\r\n        inputRef.current && \r\n        !inputRef.current.contains(event.target as Node)\r\n      ) {\r\n        setShowSuggestions(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleSuggestionClick = (counselor: Counselor) => {\r\n    onChange(counselor.counselorName);\r\n    setShowSuggestions(false);\r\n    setRecentlySelected(true);\r\n    if (onSelectCounselor) {\r\n      onSelectCounselor(counselor.counselorId, counselor.counselorName, counselor.tenantId);\r\n    }\r\n    if (inputRef.current) {\r\n      inputRef.current.blur();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full py-1 px-1\">\r\n      <div className=\"relative w-full\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          onFocus={() => {\r\n            if (!recentlySelected && value.length >= 2 && suggestions.length > 0) {\r\n              setShowSuggestions(true);\r\n            }\r\n          }}\r\n          placeholder={placeholder}\r\n          className=\"w-full pl-2 pr-7 py-1 text-sm border rounded focus:outline-none focus:border-[#5BC2C1]\"\r\n        />\r\n        <button \r\n          onClick={() => {\r\n            onSearch();\r\n            setShowSuggestions(false);\r\n            setRecentlySelected(true);\r\n            if (inputRef.current) {\r\n              inputRef.current.blur();\r\n            }\r\n          }}\r\n          className=\"absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n        >\r\n          <Search size={14} />\r\n        </button>\r\n        \r\n        {/* 자동완성 드롭다운 */}\r\n        {showSuggestions && (\r\n          <div \r\n            ref={suggestionRef}\r\n            className=\"absolute z-10 w-full mt-1 bg-white border rounded shadow-lg max-h-40 overflow-y-auto\"\r\n          >\r\n            {suggestions.map((counselor, index) => (\r\n              <div\r\n                key={counselor.counselorId}\r\n                className={`px-2 py-1 text-xs cursor-pointer ${\r\n                  index === highlightedIndex ? \"bg-gray-200\" : \"hover:bg-gray-100\"\r\n                }`}\r\n                onClick={() => handleSuggestionClick(counselor)}\r\n              >\r\n                {counselor.counselorName}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 9891, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9897, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/option/CounselorTreeLevelSelector.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from \"react\";\r\nimport Image from \"next/image\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { ChevronDown, Layers } from \"lucide-react\";\r\n\r\ninterface CounselorTreeLevelSelectorProps {\r\n  onExpandToLevel: (level: number) => void;\r\n  onToggleAllNodes: (isExpanded: boolean) => void;\r\n  onApplyDefaultExpansion: () => void;\r\n}\r\n\r\nexport function CounselorTreeLevelSelector({\r\n  onExpandToLevel,\r\n  onToggleAllNodes,\r\n  onApplyDefaultExpansion\r\n}: CounselorTreeLevelSelectorProps) {\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button \r\n          variant=\"ghost\" \r\n          size=\"sm\"\r\n          className=\"text-xs py-1 !px-2 flex items-center gap-1 border-[#ebebeb] border rounded-[3px] text-[#888] h-[26px] \"\r\n        >\r\n          {/* <Layers size={14} /> */}\r\n          lev \r\n          <ChevronDown size={14} />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto min-w-[150px] p-0 py-[10px] px-[12px] rounded-[3px] border border-[#333]\" align=\"end\">\r\n        <div className=\"flex flex-col space-y-[2px]\">\r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"sm\" \r\n            onClick={() => onExpandToLevel(1)}\r\n            className=\"text-sm rounded-[3px] px-[6px] py-[4px] justify-start h-[26px]\"\r\n          >\r\n            <Image src=\"/tree-menu/organization.png\" alt=\"조직\" width={14} height={12} className=\"mr-1\" />\r\n            1. 조직\r\n          </Button>\r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"sm\" \r\n            onClick={() => onExpandToLevel(2)}\r\n            className=\"text-sm rounded-[3px] px-[6px] py-[4px] justify-start h-[26px]\"\r\n          >\r\n            <Image src=\"/tree-menu/tennant_office.png\" alt=\"테넌트\" width={14} height={12} className=\"mr-1\" />\r\n            2. 테넌트\r\n          </Button>\r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"sm\" \r\n            onClick={() => onExpandToLevel(3)}\r\n            className=\"text-sm rounded-[3px] px-[6px] py-[4px] justify-start h-[26px]\"\r\n          >\r\n            <Image src=\"/tree-menu/group_icon_for_tree.png\" alt=\"그룹\" width={15} height={12} className=\"mr-1\" />\r\n            3. 그룹\r\n          </Button>\r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"sm\" \r\n            onClick={() => onExpandToLevel(4)}\r\n            className=\"text-sm rounded-[3px] px-[6px] py-[4px] justify-start h-[26px]\"\r\n          >\r\n            <Image src=\"/tree-menu/team_icon_for_tree.png\" alt=\"팀\" width={14} height={12} className=\"mr-1\" />\r\n            4. 팀\r\n          </Button>\r\n          <hr className=\"my-1\" />\r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"sm\" \r\n            onClick={() => onToggleAllNodes(true)}\r\n            className=\"text-sm rounded-[3px] px-[6px] py-[4px] justify-start h-[26px]\"\r\n          >\r\n            <Layers size={14} className=\"mr-1\" />\r\n            전체\r\n          </Button>\r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"sm\" \r\n            onClick={() => onToggleAllNodes(false)}\r\n            className=\"text-sm rounded-[3px] px-[6px] py-[4px] justify-start h-[26px]\"\r\n          >\r\n            <Layers size={14} className=\"mr-1\" />\r\n            닫기\r\n          </Button>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AAKA;AAAA;AAVA;;;;;;AAkBO,SAAS,2BAA2B,EACzC,eAAe,EACf,gBAAgB,EAChB,uBAAuB,EACS;IAChC,qBACE,6LAAC,sIAAA,CAAA,UAAO;;0BACN,6LAAC,sIAAA,CAAA,iBAAc;gBAAC,OAAO;0BACrB,cAAA,6LAAC,qIAAA,CAAA,SAAM;oBACL,SAAQ;oBACR,MAAK;oBACL,WAAU;;wBAEkB;sCAE5B,6LAAC,uNAAA,CAAA,cAAW;4BAAC,MAAM;;;;;;;;;;;;;;;;;0BAGvB,6LAAC,sIAAA,CAAA,iBAAc;gBAAC,WAAU;gBAAkF,OAAM;0BAChH,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS,IAAM,gBAAgB;4BAC/B,WAAU;;8CAEV,6LAAC,gIAAA,CAAA,UAAK;oCAAC,KAAI;oCAA8B,KAAI;oCAAK,OAAO;oCAAI,QAAQ;oCAAI,WAAU;;;;;;gCAAS;;;;;;;sCAG9F,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS,IAAM,gBAAgB;4BAC/B,WAAU;;8CAEV,6LAAC,gIAAA,CAAA,UAAK;oCAAC,KAAI;oCAAgC,KAAI;oCAAM,OAAO;oCAAI,QAAQ;oCAAI,WAAU;;;;;;gCAAS;;;;;;;sCAGjG,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS,IAAM,gBAAgB;4BAC/B,WAAU;;8CAEV,6LAAC,gIAAA,CAAA,UAAK;oCAAC,KAAI;oCAAqC,KAAI;oCAAK,OAAO;oCAAI,QAAQ;oCAAI,WAAU;;;;;;gCAAS;;;;;;;sCAGrG,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS,IAAM,gBAAgB;4BAC/B,WAAU;;8CAEV,6LAAC,gIAAA,CAAA,UAAK;oCAAC,KAAI;oCAAoC,KAAI;oCAAI,OAAO;oCAAI,QAAQ;oCAAI,WAAU;;;;;;gCAAS;;;;;;;sCAGnG,6LAAC;4BAAG,WAAU;;;;;;sCACd,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS,IAAM,iBAAiB;4BAChC,WAAU;;8CAEV,6LAAC,yMAAA,CAAA,SAAM;oCAAC,MAAM;oCAAI,WAAU;;;;;;gCAAS;;;;;;;sCAGvC,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,MAAK;4BACL,SAAS,IAAM,iBAAiB;4BAChC,WAAU;;8CAEV,6LAAC,yMAAA,CAAA,SAAM;oCAAC,MAAM;oCAAI,WAAU;;;;;;gCAAS;;;;;;;;;;;;;;;;;;;;;;;;AAOjD;KA/EgB"}},
    {"offset": {"line": 10116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10122, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/TreeMenusForAgentTab.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useAuthStore } from \"@/store/authStore\";\r\nimport { useApiForSidebarCounselor } from \"@/features/campaignManager/hooks/useApiForGetDataForSidebarCounselorTab\";\r\nimport { TreeNodeForCounselorListForSideBar } from \"./TreeNodeForCounselorListForSideBar\";\r\nimport { SearchBarForSideMenuForCounselorTab } from \"./searchbar/SearchBarForSideMenuForCounselorTab\";\r\nimport { findCounselorInfo, getAllCounselors } from \"./searchbar/utilsForSideMenuForCounselorTab\";\r\nimport { useCounselorFilterStore, NodeType } from \"@/store/storeForSideMenuCounselorTab\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CounselorTreeLevelSelector } from \"./option/CounselorTreeLevelSelector\";\r\nimport { IOrganization, ITenant, IGroup, ITeam, ICounselor } from \"@/features/campaignManager/types/typeForSideBarCounselorTab2\";\r\n\r\nexport function TreeMenusForAgentTab() {\r\n  const { tenant_id, role_id } = useAuthStore();\r\n  const { data, isLoading } = useApiForSidebarCounselor(\r\n    tenant_id.toString(),\r\n    role_id.toString()\r\n  );\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const { \r\n    setSelectedCounselor,\r\n    sortOption,\r\n    currentExpansionLevel,\r\n    expandToLevel: storeExpandToLevel\r\n  } = useCounselorFilterStore();\r\n  \r\n  const [allCounselors, setAllCounselors] = useState<Array<{\r\n    counselorId: string;\r\n    counselorName: string;\r\n    tenantId: string;\r\n  }>>([]);\r\n\r\n  const defaultExpanded = {\r\n    organization: true,\r\n    tenant: true,\r\n    group: true,\r\n    team: true,\r\n    counselor: false\r\n  };\r\n\r\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());\r\n  const [selectedNodeId, setSelectedNodeId] = useState<string>();\r\n  const [sortedData, setSortedData] = useState<any[]>([]);\r\n\r\n  // 데이터 로드 시 초기화 작업\r\n  useEffect(() => {\r\n    if (data?.organizationList) {\r\n      // 기본 확장 상태 적용\r\n      applyDefaultExpansion();\r\n      \r\n      // 필터링 및 정렬 적용한 데이터\r\n      const sorted = applySorting([...data.organizationList]);\r\n      \r\n      // 모든 상담사 정보 추출 (필터링된 데이터에서 추출하기 위해 이 위치로 이동)\r\n      const counselors = getAllCounselorsFromFilteredData(sorted);\r\n      setAllCounselors(counselors);\r\n      \r\n      setSortedData(sorted);\r\n    }\r\n  }, [data, tenant_id]);\r\n\r\n  // 필터링된 데이터에서 상담사 목록 추출\r\n  const getAllCounselorsFromFilteredData = (filteredData: IOrganization[]) => {\r\n    const counselors: Array<{\r\n      counselorId: string;\r\n      counselorName: string;\r\n      tenantId: string;\r\n    }> = [];\r\n\r\n    filteredData.forEach(org => {\r\n      org.tenantInfo?.forEach(tenant => {\r\n        tenant.groupInfo?.forEach(group => {\r\n          group.teamInfo?.forEach(team => {\r\n            team.counselorInfo?.forEach(counselor => {\r\n              counselors.push({\r\n                counselorId: counselor.counselorId,\r\n                counselorName: counselor.counselorname,\r\n                tenantId: tenant.tenantId\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    return counselors;\r\n  };\r\n\r\n  // 정렬 옵션 변경 시 데이터 재정렬\r\n  useEffect(() => {\r\n    if (data?.organizationList) {\r\n      const sorted = applySorting([...data.organizationList]);\r\n      setSortedData(sorted);\r\n    }\r\n  }, [sortOption, data, tenant_id]);\r\n\r\n  // 확장 레벨 변경 시 노드 확장 상태 업데이트\r\n  useEffect(() => {\r\n    if (data?.organizationList && currentExpansionLevel > 0) {\r\n      expandToLevel(currentExpansionLevel);\r\n    }\r\n  }, [currentExpansionLevel, data, tenant_id]);\r\n\r\n  // 정렬 로직 구현 (tenant_id 필터링 적용)\r\n  const applySorting = (dataArray: IOrganization[]) => {\r\n    if (!dataArray || dataArray.length === 0) return [];\r\n    \r\n    const { type, direction, nodeType } = sortOption;\r\n    \r\n    // 깊은 복사를 통해 원본 데이터 보존\r\n    const clonedData: IOrganization[] = JSON.parse(JSON.stringify(dataArray));\r\n    \r\n    // tenant_id가 0이 아닌 경우에만 필터링 적용\r\n    if (tenant_id !== 0 && tenant_id !== 0) {\r\n      // 테넌트 필터링 적용 (tenant_id에 해당하는 것만 표시)\r\n      clonedData.forEach(org => {\r\n        if (org.tenantInfo && org.tenantInfo.length > 0) {\r\n          // tenant_id에 해당하는 테넌트만 필터링\r\n          org.tenantInfo = org.tenantInfo.filter(tenant => \r\n            tenant.tenantId === tenant_id.toString()\r\n          );\r\n        }\r\n      });\r\n    }\r\n    \r\n    // 조직 레벨 정렬 (최상위 레벨)\r\n    if (nodeType === 'all' || nodeType === 'organization') {\r\n      clonedData.sort((a, b) => {\r\n        if (type === 'id') {\r\n          const valueA = parseInt(a.centerId) || 0;\r\n          const valueB = parseInt(b.centerId) || 0;\r\n          return direction === 'asc' ? valueA - valueB : valueB - valueA;\r\n        } else {\r\n          return direction === 'asc' \r\n            ? a.centerName.localeCompare(b.centerName) \r\n            : b.centerName.localeCompare(a.centerName);\r\n        }\r\n      });\r\n    }\r\n\r\n    // 각 조직 내의 테넌트 정렬\r\n    clonedData.forEach(org => {\r\n      if (org.tenantInfo && org.tenantInfo.length > 0) {\r\n        // 테넌트 레벨 정렬\r\n        if (nodeType === 'all' || nodeType === 'tenant') {\r\n          org.tenantInfo.sort((a, b) => {\r\n            if (type === 'id') {\r\n              const valueA = parseInt(a.tenantId) || 0;\r\n              const valueB = parseInt(b.tenantId) || 0;\r\n              return direction === 'asc' ? valueA - valueB : valueB - valueA;\r\n            } else {\r\n              return direction === 'asc' \r\n                ? a.tenantName.localeCompare(b.tenantName) \r\n                : b.tenantName.localeCompare(a.tenantName);\r\n            }\r\n          });\r\n        }\r\n\r\n        // 각 테넌트 내의 그룹 정렬\r\n        org.tenantInfo.forEach(tenant => {\r\n          if (tenant.groupInfo && tenant.groupInfo.length > 0) {\r\n            // 그룹 레벨 정렬\r\n            if (nodeType === 'all' || nodeType === 'group') {\r\n              tenant.groupInfo.sort((a, b) => {\r\n                if (type === 'id') {\r\n                  const valueA = parseInt(a.groupId) || 0;\r\n                  const valueB = parseInt(b.groupId) || 0;\r\n                  return direction === 'asc' ? valueA - valueB : valueB - valueA;\r\n                } else {\r\n                  return direction === 'asc' \r\n                    ? a.groupName.localeCompare(b.groupName) \r\n                    : b.groupName.localeCompare(a.groupName);\r\n                }\r\n              });\r\n            }\r\n\r\n            // 각 그룹 내의 팀 정렬\r\n            tenant.groupInfo.forEach(group => {\r\n              if (group.teamInfo && group.teamInfo.length > 0) {\r\n                // 팀 레벨 정렬\r\n                if (nodeType === 'all' || nodeType === 'team') {\r\n                  group.teamInfo.sort((a, b) => {\r\n                    if (type === 'id') {\r\n                      const valueA = parseInt(a.teamId) || 0;\r\n                      const valueB = parseInt(b.teamId) || 0;\r\n                      return direction === 'asc' ? valueA - valueB : valueB - valueA;\r\n                    } else {\r\n                      return direction === 'asc' \r\n                        ? a.teamName.localeCompare(b.teamName) \r\n                        : b.teamName.localeCompare(a.teamName);\r\n                    }\r\n                  });\r\n                }\r\n\r\n                // 각 팀 내의 상담사 정렬\r\n                group.teamInfo.forEach(team => {\r\n                  if (team.counselorInfo && team.counselorInfo.length > 0) {\r\n                    // 상담사 레벨 정렬\r\n                    if (nodeType === 'all' || nodeType === 'counselor') {\r\n                      team.counselorInfo.sort((a, b) => {\r\n                        if (type === 'id') {\r\n                          const valueA = parseInt(a.counselorId) || 0;\r\n                          const valueB = parseInt(b.counselorId) || 0;\r\n                          return direction === 'asc' ? valueA - valueB : valueB - valueA;\r\n                        } else {\r\n                          return direction === 'asc' \r\n                            ? (a.counselorname || '').localeCompare(b.counselorname || '') \r\n                            : (b.counselorname || '').localeCompare(a.counselorname || '');\r\n                        }\r\n                      });\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    return clonedData;\r\n  };\r\n\r\n  // 기본 확장 상태를 적용하는 함수\r\n  const applyDefaultExpansion = () => {\r\n    if (!data?.organizationList) return;\r\n    \r\n    const initialExpanded = new Set<string>();\r\n\r\n    data.organizationList.forEach(org => {\r\n      if (defaultExpanded.organization) {\r\n        initialExpanded.add(`org-${org.centerId}`);\r\n      }\r\n\r\n      org.tenantInfo?.forEach(tenant => {\r\n        // tenant_id가 0이거나 tenant_id와 일치하는 테넌트만 처리\r\n        if ((tenant_id === 0 || tenant_id === 0 || tenant.tenantId === tenant_id.toString()) && defaultExpanded.tenant) {\r\n          initialExpanded.add(`tenant-${tenant.tenantId}`);\r\n\r\n          tenant.groupInfo?.forEach(group => {\r\n            if (defaultExpanded.group) {\r\n              initialExpanded.add(`group-${group.groupId}`);\r\n            }\r\n\r\n            group.teamInfo?.forEach(team => {\r\n              if (defaultExpanded.team) {\r\n                initialExpanded.add(`team-${team.teamId}`);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    setExpandedNodes(initialExpanded);\r\n    \r\n    // 스토어에도 기본 확장 레벨 적용\r\n    storeExpandToLevel(4); // 팀 레벨까지 기본 확장\r\n  };\r\n\r\n  // 특정 레벨까지만 노드 열기 함수\r\n  const expandToLevel = (level: number) => {\r\n    if (!data?.organizationList) return;\r\n    \r\n    const newExpanded = new Set<string>();\r\n    \r\n    // 레벨에 따라 다르게 처리\r\n    data.organizationList.forEach(org => {\r\n      // 레벨 1: 조직\r\n      const orgId = `org-${org.centerId}`;\r\n      if (level >= 1) newExpanded.add(orgId);\r\n      \r\n      if (level >= 2 && org.tenantInfo) {\r\n        // 레벨 2: 테넌트 (tenant_id가 0이거나 tenant_id에 해당하는 것만)\r\n        org.tenantInfo.forEach(tenant => {\r\n          if (tenant_id === 0 || tenant_id === 0 || tenant.tenantId === tenant_id.toString()) {\r\n            const tenantId = `tenant-${tenant.tenantId}`;\r\n            newExpanded.add(tenantId);\r\n            \r\n            if (level >= 3 && tenant.groupInfo) {\r\n              // 레벨 3: 그룹\r\n              tenant.groupInfo.forEach(group => {\r\n                const groupId = `group-${group.groupId}`;\r\n                newExpanded.add(groupId);\r\n                \r\n                if (level >= 4 && group.teamInfo) {\r\n                  // 레벨 4: 팀\r\n                  group.teamInfo.forEach(team => {\r\n                    const teamId = `team-${team.teamId}`;\r\n                    newExpanded.add(teamId);\r\n                    \r\n                    if (level >= 5 && team.counselorInfo) {\r\n                      // 레벨 5: 상담사\r\n                      team.counselorInfo.forEach(counselor => {\r\n                        const counselorId = `counselor-${counselor.counselorId}`;\r\n                        newExpanded.add(counselorId);\r\n                      });\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    setExpandedNodes(newExpanded);\r\n  };\r\n  \r\n  // 전체 열기/닫기 함수\r\n  const toggleAllNodes = (isExpanded: boolean) => {\r\n    if (!data?.organizationList) return;\r\n    \r\n    if (isExpanded) {\r\n      // 모든 레벨 열기 (레벨 5까지)\r\n      expandToLevel(5);\r\n      storeExpandToLevel(5);\r\n    } else {\r\n      // 모든 노드 닫기\r\n      setExpandedNodes(new Set());\r\n      storeExpandToLevel(1);\r\n    }\r\n  };\r\n\r\n  const handleNodeToggle = (nodeId: string) => {\r\n    setExpandedNodes(prev => {\r\n      const next = new Set(prev);\r\n      if (next.has(nodeId)) {\r\n        next.delete(nodeId);\r\n      } else {\r\n        next.add(nodeId);\r\n      }\r\n      return next;\r\n    });\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    // 검색어가 비어있으면 전체 목록 표시\r\n    if (!searchTerm.trim()) {\r\n      selectCounselor('', '', '');\r\n      return;\r\n    }\r\n  \r\n    if (!data?.organizationList) return;\r\n    \r\n    // 필터링된 데이터에서 검색\r\n    const filteredData = applySorting([...data.organizationList]);\r\n    const counselorInfo = findCounselorInfoInFilteredData(filteredData, searchTerm);\r\n    \r\n    if (counselorInfo) {\r\n      selectCounselor(counselorInfo.counselorId, counselorInfo.counselorName, counselorInfo.tenantId);\r\n    } else {\r\n      toast.error(\"상담사를 찾을 수 없습니다.\");\r\n    }\r\n  };\r\n  \r\n  // 필터링된 데이터에서 상담사 검색\r\n  const findCounselorInfoInFilteredData = (\r\n    filteredData: IOrganization[],\r\n    searchTerm: string\r\n  ) => {\r\n    for (const org of filteredData) {\r\n      for (const tenant of (org.tenantInfo || [])) {\r\n        for (const group of (tenant.groupInfo || [])) {\r\n          for (const team of (group.teamInfo || [])) {\r\n            for (const counselor of (team.counselorInfo || [])) {\r\n              if (\r\n                counselor.counselorId.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                counselor.counselorname.toLowerCase().includes(searchTerm.toLowerCase())\r\n              ) {\r\n                return {\r\n                  counselorId: counselor.counselorId,\r\n                  counselorName: counselor.counselorname,\r\n                  tenantId: tenant.tenantId,\r\n                  paths: [\r\n                    `org-${org.centerId}`,\r\n                    `tenant-${tenant.tenantId}`,\r\n                    `group-${group.groupId}`,\r\n                    `team-${team.teamId}`\r\n                  ]\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const selectCounselor = (counselorId: string, counselorName: string, tenantId: string) => {\r\n    // 빈 ID가 전달되면 전체 목록 표시 모드로 설정\r\n    if (!counselorId) {\r\n      // 선택된 노드 초기화\r\n      setSelectedNodeId(undefined);\r\n      // 스토어에도 선택 해제 상태 설정\r\n      setSelectedCounselor('', '', '');\r\n      // 기본 확장 상태로 복원\r\n      applyDefaultExpansion();\r\n      return;\r\n    }\r\n  \r\n    // 상담사 선택 상태 업데이트\r\n    setSelectedNodeId(counselorId);\r\n    setSelectedCounselor(counselorId, counselorName, tenantId);\r\n    \r\n    if (data?.organizationList) {\r\n      // 필터링된 데이터에서 경로 찾기\r\n      const filteredData = applySorting([...data.organizationList]);\r\n      const counselorInfo = findCounselorInfoInFilteredData(filteredData, counselorName);\r\n      \r\n      if (counselorInfo) {\r\n        // 경로상의 모든 노드 확장\r\n        const newExpanded = new Set(expandedNodes);\r\n        counselorInfo.paths.forEach(path => newExpanded.add(path));\r\n        setExpandedNodes(newExpanded);\r\n  \r\n        // DOM 업데이트를 위한 짧은 지연 후 스크롤 실행\r\n        setTimeout(() => {\r\n          const scrollContainer = document.querySelector('.tree-node');\r\n          const targetElement = document.getElementById(`counselor-${counselorId}`);\r\n  \r\n          if (scrollContainer && targetElement) {\r\n            scrollContainer.scrollTop = (\r\n              targetElement.offsetTop -\r\n              (scrollContainer as HTMLElement).offsetTop -\r\n              (scrollContainer.clientHeight / 2) +\r\n              (targetElement.clientHeight / 2)\r\n            );\r\n          }\r\n        }, 100);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"h-full p-4\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex items-center border-b\">\r\n        <div className=\"flex-grow\">\r\n          <SearchBarForSideMenuForCounselorTab\r\n            value={searchTerm}\r\n            onChange={setSearchTerm}\r\n            onSearch={handleSearch}\r\n            placeholder=\"상담사\"\r\n            counselors={allCounselors}\r\n            onSelectCounselor={selectCounselor}\r\n          />\r\n        </div>\r\n        <div className=\"py-1 px-1\">\r\n          <CounselorTreeLevelSelector\r\n            onExpandToLevel={(level) => {\r\n              expandToLevel(level);\r\n              storeExpandToLevel(level);\r\n            }}\r\n            onToggleAllNodes={toggleAllNodes}\r\n            onApplyDefaultExpansion={applyDefaultExpansion}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-grow overflow-y-auto min-h-0 tree-node\">\r\n        <div className=\"w-full\">\r\n          {sortedData.map((org) => (\r\n            <TreeNodeForCounselorListForSideBar\r\n              key={`org-${org.centerId}`}\r\n              data={org}\r\n              type=\"organization\"\r\n              level={0}\r\n              expandedNodes={expandedNodes}\r\n              selectedNodeId={selectedNodeId}\r\n              onNodeToggle={handleNodeToggle}\r\n              onNodeSelect={setSelectedNodeId}\r\n              defaultExpanded={defaultExpanded}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 10611, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10617, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/preferences/hooks/useApiForCreateCampaignGroup.ts"],"sourcesContent":["import { useMutation, UseMutationResult, useQueryClient } from '@tanstack/react-query';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { AddCampaignGroupCredentials, SuccessResponse } from '@/features/campaignManager/types/typeForCampaignGroupForSideBar';\r\nimport { apiForCreateCampaignGroup } from '../api/apiForCampaignGroup';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface CreateCampaignGroupError {\r\n  message: string;\r\n  status?: number;\r\n  result_code?: string;\r\n  result_msg?: string;\r\n}\r\n\r\nexport function useApiForCreateCampaignGroup(\r\n  options?: UseMutationOptions<\r\n    SuccessResponse,\r\n    CreateCampaignGroupError,\r\n    AddCampaignGroupCredentials\r\n  >\r\n): UseMutationResult<SuccessResponse, CreateCampaignGroupError, AddCampaignGroupCredentials, unknown> {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation<SuccessResponse, any, AddCampaignGroupCredentials>({\r\n    mutationKey: ['createCampaignGroup'],\r\n    mutationFn: (credentials: AddCampaignGroupCredentials) => \r\n      apiForCreateCampaignGroup(credentials),\r\n    onSuccess: (data, variables, context) => {\r\n\r\n      console.log(\"data:\", data);\r\n      console.log(\"variables:\", variables);\r\n      \r\n      // sideMenuTreeData 쿼리 캐시 무효화 - 이것만 무효화해도 데이터가 갱신됨\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['sideMenuTreeData']\r\n      });\r\n      \r\n      console.log('✅ 캠페인 그룹 생성 성공:', data);\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error, variables, context) => {\r\n\r\n      // console.log(\"error :\", error);\r\n\r\n      if(error.response.data.result_code === 501) {\r\n        alert(\"이미 존재하는 그룹 ID입니다.\");\r\n        toast.error(\"이미 존재하는 그룹 ID입니다.\");\r\n        return\r\n      }\r\n\r\n      console.error('❌ 캠페인 그룹 생성 실패:', error);\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":";;;AAGA;AACA;AAJA;AAAA;;;;;AAaO,SAAS,6BACd,OAIC;;IAED,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAqD;QACpE,aAAa;YAAC;SAAsB;QACpC,UAAU;wDAAE,CAAC,cACX,CAAA,GAAA,+JAAA,CAAA,4BAAyB,AAAD,EAAE;;QAC5B,SAAS;wDAAE,CAAC,MAAM,WAAW;gBAE3B,QAAQ,GAAG,CAAC,SAAS;gBACrB,QAAQ,GAAG,CAAC,cAAc;gBAE1B,kDAAkD;gBAClD,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAmB;gBAChC;gBAEA,QAAQ,GAAG,CAAC,mBAAmB;gBAC/B,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;wDAAE,CAAC,OAAO,WAAW;gBAE1B,iCAAiC;gBAEjC,IAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,WAAW,KAAK,KAAK;oBAC1C,MAAM;oBACN,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;oBACZ;gBACF;gBAEA,QAAQ,KAAK,CAAC,mBAAmB;gBACjC,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GAxCgB;;QAOM,yLAAA,CAAA,iBAAc;QAE3B,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 10675, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10681, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/GroupIdDuplicateModal.tsx"],"sourcesContent":["// src/features/campaignManager/components/modals/GroupIdDuplicateModal.tsx\r\n\r\nimport React, { useState } from 'react';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ninterface GroupIdDuplicateModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  groupId: string;\r\n  tenantName: string;\r\n  groupIdList: string[];\r\n  onNewIdSubmit: (newId: string) => void;\r\n}\r\n\r\nconst GroupIdDuplicateModal = ({\r\n  isOpen,\r\n  onClose,\r\n  groupId,\r\n  tenantName,\r\n  groupIdList,\r\n  onNewIdSubmit,\r\n}: GroupIdDuplicateModalProps) => {\r\n  const [newGroupId, setNewGroupId] = useState('');\r\n\r\n  // 중복 체크\r\n  const isDuplicate = newGroupId.trim() ? groupIdList.includes(newGroupId) : false;\r\n\r\n  const handleSubmit = () => {\r\n    if (newGroupId && !isDuplicate) {\r\n      onNewIdSubmit(newGroupId);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && newGroupId && !isDuplicate) {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CustomAlert\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title=\"그룹 아이디 중복\"\r\n      type=\"1\"\r\n      message={\r\n        <div>\r\n          <p className=\"mb-2 font-medium text-red-500\">\r\n            입력하신 그룹 아이디 &apos;{groupId}&apos;는 이미 사용 중입니다.\r\n          </p>\r\n          <p className=\"mb-2\">현재 테넌트({tenantName})의 그룹 아이디 목록:</p>\r\n          <div className=\"max-h-40 overflow-y-auto bg-gray-50 p-2 border rounded text-xs mb-4\">\r\n            {groupIdList.length > 0 ? (\r\n              <ul className=\"list-disc pl-4\">\r\n                {groupIdList.map((id, index) => (\r\n                  <li key={index} className=\"py-0.5\">{id}</li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>등록된 그룹이 없습니다.</p>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"mt-4\">\r\n            <p className=\"text-sm mb-2\">새 그룹 아이디를 입력해주세요:</p>\r\n            <div className=\"flex space-x-2\">\r\n              <Input\r\n                value={newGroupId}\r\n                onChange={(e) => setNewGroupId(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                placeholder=\"새 그룹 아이디\"\r\n                className=\"flex-1\"\r\n                autoFocus\r\n              />\r\n              <Button \r\n                onClick={handleSubmit}\r\n                disabled={!newGroupId || isDuplicate}\r\n              >\r\n                적용\r\n              </Button>\r\n            </div>\r\n            {newGroupId && isDuplicate && (\r\n              <p className=\"text-xs text-red-500 mt-1\">이 아이디도 이미 사용 중입니다.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      }\r\n      width=\"max-w-md\"\r\n      showButtons={false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GroupIdDuplicateModal;"],"names":[],"mappings":"AAAA,2EAA2E;;;;;AAE3E;AACA;AACA;AACA;;;;;;;AAWA,MAAM,wBAAwB,CAAC,EAC7B,MAAM,EACN,OAAO,EACP,OAAO,EACP,UAAU,EACV,WAAW,EACX,aAAa,EACc;;IAC3B,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,QAAQ;IACR,MAAM,cAAc,WAAW,IAAI,KAAK,YAAY,QAAQ,CAAC,cAAc;IAE3E,MAAM,eAAe;QACnB,IAAI,cAAc,CAAC,aAAa;YAC9B,cAAc;YACd;QACF;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,IAAI,EAAE,GAAG,KAAK,WAAW,cAAc,CAAC,aAAa;YACnD,EAAE,cAAc;YAChB;QACF;IACF;IAEA,qBACE,6LAAC,wJAAA,CAAA,UAAW;QACV,QAAQ;QACR,SAAS;QACT,OAAM;QACN,MAAK;QACL,uBACE,6LAAC;;8BACC,6LAAC;oBAAE,WAAU;;wBAAgC;wBACxB;wBAAQ;;;;;;;8BAE7B,6LAAC;oBAAE,WAAU;;wBAAO;wBAAQ;wBAAW;;;;;;;8BACvC,6LAAC;oBAAI,WAAU;8BACZ,YAAY,MAAM,GAAG,kBACpB,6LAAC;wBAAG,WAAU;kCACX,YAAY,GAAG,CAAC,CAAC,IAAI,sBACpB,6LAAC;gCAAe,WAAU;0CAAU;+BAA3B;;;;;;;;;+CAIb,6LAAC;kCAAE;;;;;;;;;;;8BAIP,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAE,WAAU;sCAAe;;;;;;sCAC5B,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,oIAAA,CAAA,QAAK;oCACJ,OAAO;oCACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;oCAC7C,WAAW;oCACX,aAAY;oCACZ,WAAU;oCACV,SAAS;;;;;;8CAEX,6LAAC,qIAAA,CAAA,SAAM;oCACL,SAAS;oCACT,UAAU,CAAC,cAAc;8CAC1B;;;;;;;;;;;;wBAIF,cAAc,6BACb,6LAAC;4BAAE,WAAU;sCAA4B;;;;;;;;;;;;;;;;;;QAKjD,OAAM;QACN,aAAa;;;;;;AAGnB;GA/EM;KAAA;uCAiFS"}},
    {"offset": {"line": 10849, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10855, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/AddCampaignGroupDialog.tsx"],"sourcesContent":["\r\n\r\n\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useApiForCreateCampaignGroup } from \"@/features/preferences/hooks/useApiForCreateCampaignGroup\";\r\nimport { useSideMenuCampaignGroupTabStore } from \"@/store/storeForSideMenuCampaignGroupTab\";\r\nimport GroupIdDuplicateModal from \"./GroupIdDuplicateModal\";\r\nimport CommonDialogWithCustomAlertStyle from \"@/components/shared/layout/CommonDialogWithCustomAlertStyle\";\r\n\r\ninterface AddCampaignGroupDialogProps {\r\n  isOpen: boolean;\r\n  onClose: (e?: React.MouseEvent | React.KeyboardEvent | Event) => void;\r\n  tenantId: number;\r\n  tenantName: string;\r\n  onAddGroup?: (groupName: string, groupCode: string) => void;\r\n}\r\n\r\nexport function AddCampaignGroupDialog({\r\n  isOpen,\r\n  onClose,\r\n  tenantId,\r\n  tenantName,\r\n  onAddGroup,\r\n}: AddCampaignGroupDialogProps) {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupId, setGroupId] = useState(\"\");\r\n  const [isDuplicateModalOpen, setIsDuplicateModalOpen] = useState(false);\r\n  const [groupIdList, setGroupIdList] = useState<string[]>([]);\r\n  const [isValidated, setIsValidated] = useState(false);\r\n  const [isCheckingDuplicate, setIsCheckingDuplicate] = useState(false);\r\n\r\n    const { refetchTreeDataForCampaignGroupTab } = useSideMenuCampaignGroupTabStore();\r\n  \r\n\r\n  // 다이얼로그가 열릴 때마다 폼 초기화\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setGroupName(\"\");\r\n      setGroupId(\"\");\r\n      setIsValidated(false);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // 중복 검사에 필요한 store에서 treeData 가져오기\r\n  const { treeData } = useSideMenuCampaignGroupTabStore();\r\n\r\n  // 현재 테넌트에 속한 그룹 아이디 목록 가져오기\r\n  const getGroupIdsInTenant = (tenantId: number) => {\r\n    const groupIds: string[] = [];\r\n    \r\n    // treeData를 탐색하여 현재 tenant_id에 속한 그룹들의 group_id를 수집\r\n    const findGroupsInTenant = (nodes: any[]) => {\r\n      nodes.forEach(node => {\r\n        if (node.type === 'tenant' && node.tenant_id === tenantId) {\r\n          if (node.children) {\r\n            node.children.forEach((child: any) => {\r\n              if (child.type === 'group' && child.group_id) {\r\n                groupIds.push(child.group_id.toString());\r\n              }\r\n            });\r\n          }\r\n        } else if (node.children) {\r\n          findGroupsInTenant(node.children);\r\n        }\r\n      });\r\n    };\r\n\r\n    findGroupsInTenant(treeData);\r\n    return groupIds;\r\n  };\r\n\r\n  // 그룹 아이디 중복 체크 함수\r\n  const checkDuplicateGroupId = (groupId: string): boolean => {\r\n    const groupIds = getGroupIdsInTenant(tenantId);\r\n    return groupIds.includes(groupId);\r\n  };\r\n\r\n  // 중복 체크 및 중복 다이얼로그 열기\r\n  const handleCheckDuplicate = () => {\r\n    if (!groupId.trim()) return false;\r\n    \r\n    setIsCheckingDuplicate(true);\r\n    const groupIds = getGroupIdsInTenant(tenantId);\r\n    console.log(`테넌트 ${tenantId}의 그룹 ID 목록:`, groupIds);\r\n    setGroupIdList(groupIds);\r\n    \r\n    const isDuplicate = checkDuplicateGroupId(groupId);\r\n    if (isDuplicate) {\r\n      console.log(`그룹 ID '${groupId}' 중복 확인됨`);\r\n      setIsDuplicateModalOpen(true);\r\n      setIsValidated(false);\r\n      setIsCheckingDuplicate(false);\r\n      return true;\r\n    }\r\n    \r\n    // 중복이 없다면 유효함을 표시\r\n    setIsValidated(true);\r\n    setIsCheckingDuplicate(false);\r\n    toast.success(\"사용 가능한 그룹 ID입니다.\");\r\n    return false;\r\n  };\r\n\r\n  // 새로운 그룹 아이디 적용\r\n  const handleNewGroupId = (newId: string) => {\r\n    setGroupId(newId);\r\n    setIsDuplicateModalOpen(false);\r\n    setIsValidated(true);\r\n  };\r\n\r\n  // 그룹 아이디 변경\r\n  const handleGroupIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value;\r\n    setGroupId(newValue);\r\n    setIsValidated(false);\r\n  };\r\n\r\n  // 캠페인 그룹 생성 API 호출 훅 사용\r\n  const { mutate, isPending } = useApiForCreateCampaignGroup({\r\n    onSuccess: (data, variables, context) => {\r\n      console.log(\"캠페인 그룹 생성 성공:\", data);\r\n      toast.success(\"캠페인 그룹이 추가되었습니다.\");\r\n      if (onAddGroup) {\r\n        onAddGroup(groupName, groupId);\r\n      }\r\n\r\n      refetchTreeDataForCampaignGroupTab();\r\n\r\n      handleClose();\r\n    },\r\n    onError: (error, variables, context) => {\r\n      console.error(\"캠페인 그룹 생성 실패:\", error);\r\n      alert(error.message || \"캠페인 그룹 생성에 실패하였습니다.\");\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (groupName.trim() && groupId.trim()) {\r\n      if (!isValidated) {\r\n        toast.warning(\"먼저 그룹 ID 중복 확인을 해주세요.\");\r\n        return;\r\n      }\r\n      mutate({\r\n        group_id: groupId,\r\n        tenant_id: tenantId,\r\n        group_name: groupName,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClose = (e?: React.MouseEvent | React.KeyboardEvent | Event) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    onClose(e);\r\n  };\r\n\r\n  // 모든 인풋에 이벤트 전파 방지 적용\r\n  const stopPropagation = (e: React.UIEvent) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CommonDialogWithCustomAlertStyle\r\n        isOpen={isOpen}\r\n        onClose={handleClose}\r\n        title=\"그룹 추가\"\r\n        showButtons={false} // 내장 버튼 대신 폼 내 버튼 사용\r\n        width=\"max-w-sm\"\r\n      >\r\n        <div>\r\n          <p className=\"mb-4\">새로운 캠페인 그룹을 등록합니다.</p>\r\n          <form onSubmit={handleSubmit} onClick={stopPropagation} onPointerDown={stopPropagation}>\r\n            <div className=\"space-y-4\">\r\n              {/* 그룹 아이디 - 중복 확인 버튼 */}\r\n              <div className=\"flex flex-col space-y-1\">\r\n                <Label htmlFor=\"groupId\">캠페인 그룹 아이디</Label>\r\n                <div className=\"flex gap-2\">\r\n                  <Input\r\n                    id=\"groupId\"\r\n                    value={groupId}\r\n                    onChange={handleGroupIdChange}\r\n                    placeholder=\"그룹 아이디를 입력하세요\"\r\n                    onClick={stopPropagation}\r\n                    onPointerDown={stopPropagation}\r\n                    className=\"rounded-r-none\"\r\n                  />\r\n                  <Button \r\n                    type=\"button\"\r\n                    onClick={handleCheckDuplicate}\r\n                    disabled={!groupId.trim() || isCheckingDuplicate}\r\n                    className=\"rounded-l-none\"\r\n                    onPointerDown={stopPropagation}\r\n                  >\r\n                    {isCheckingDuplicate ? \"확인중...\" : isValidated ? \"✓ 확인됨\" : \"중복 확인\"}\r\n                  </Button>\r\n                </div>\r\n                {isValidated && (\r\n                  <p className=\"text-xs text-green-500 mt-1\">사용 가능한 그룹 아이디입니다.</p>\r\n                )}\r\n              </div>\r\n\r\n              {/* 그룹명 */}\r\n              <div className=\"flex flex-col space-y-1\">\r\n                <Label htmlFor=\"groupName\">캠페인 그룹명</Label>\r\n                <Input\r\n                  id=\"groupName\"\r\n                  value={groupName}\r\n                  onChange={(e) => setGroupName(e.target.value)}\r\n                  placeholder=\"그룹명을 입력하세요\"\r\n                  onClick={stopPropagation}\r\n                  onPointerDown={stopPropagation}\r\n                />\r\n              </div>\r\n\r\n              {/* 하단 버튼 */}\r\n              <div className=\"flex justify-end space-x-2 pt-2\">\r\n                <Button \r\n                  type=\"button\" \r\n                  variant=\"outline\" \r\n                  onClick={handleClose}\r\n                  onPointerDown={stopPropagation}\r\n                  disabled={isPending}\r\n                >\r\n                  취소\r\n                </Button>\r\n                <Button \r\n                  type=\"submit\" \r\n                  disabled={isPending || !groupName.trim() || !groupId.trim() || !isValidated}\r\n                  onPointerDown={stopPropagation}\r\n                >\r\n                  {isPending ? \"생성 중...\" : \"그룹 추가\"}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CommonDialogWithCustomAlertStyle>\r\n\r\n      {/* 중복 확인 다이얼로그 */}\r\n      {isDuplicateModalOpen && (\r\n        <GroupIdDuplicateModal\r\n          isOpen={isDuplicateModalOpen}\r\n          onClose={() => setIsDuplicateModalOpen(false)}\r\n          groupId={groupId}\r\n          tenantName={tenantName}\r\n          groupIdList={groupIdList}\r\n          onNewIdSubmit={handleNewGroupId}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddCampaignGroupDialog;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 11205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11211, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/popups/GroupCampaignList.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport CommonCheckBox2 from \"@/components/shared/CommonCheckBox2\";\r\n\r\ninterface GroupCampaign {\r\n  campaign_id: number;\r\n  tenant_id?: number;\r\n  group_id: number;\r\n  skill_id?: number[];\r\n}\r\n\r\ninterface Props {\r\n  isLoading: boolean;\r\n  groupCampaigns: GroupCampaign[];\r\n  toggleAllGroupCampaigns: (checked: boolean, selectedIds: number[]) => void;\r\n}\r\n\r\nconst GroupCampaignList: React.FC<Props> = ({\r\n  isLoading,\r\n  groupCampaigns = [],\r\n  toggleAllGroupCampaigns\r\n}) => {\r\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\r\n  \r\n  // 초기에 모든 캠페인 선택 상태 제거 (새로 선택 가능하도록)\r\n  useEffect(() => {\r\n    if (groupCampaigns.length > 0) {\r\n      setSelectedRows([]);\r\n      // 부모 컴포넌트에 선택 상태 초기화 알림\r\n      toggleAllGroupCampaigns(false, []);\r\n    } else {\r\n      setSelectedRows([]);\r\n    }\r\n  }, [groupCampaigns]);\r\n\r\n  // 전체 선택 상태 계산\r\n  const allSelected = useMemo(() => {\r\n    return groupCampaigns.length > 0 && selectedRows.length === groupCampaigns.length;\r\n  }, [groupCampaigns, selectedRows]);\r\n  \r\n  // 부분 선택 상태 계산\r\n  const hasPartialSelection = useMemo(() => {\r\n    return selectedRows.length > 0 && selectedRows.length < groupCampaigns.length;\r\n  }, [groupCampaigns, selectedRows]);\r\n\r\n  // 개별 행 토글\r\n  const toggleRow = (campaignId: number) => {\r\n    const isSelected = selectedRows.includes(campaignId);\r\n    const newSelection = isSelected\r\n      ? selectedRows.filter(id => id !== campaignId)\r\n      : [...selectedRows, campaignId];\r\n    \r\n    setSelectedRows(newSelection);\r\n    // 부모 컴포넌트에 알림 - 선택된 ID 목록 전달\r\n    toggleAllGroupCampaigns(newSelection.length > 0, newSelection);\r\n  };\r\n\r\n  // 모든 행 토글\r\n  const toggleAllRows = (checked: boolean) => {\r\n    const newSelection = checked ? groupCampaigns.map(item => item.campaign_id) : [];\r\n    setSelectedRows(newSelection);\r\n    // 부모 컴포넌트에 알림 - 선택된 ID 목록 전달\r\n    toggleAllGroupCampaigns(checked, newSelection);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"flex items-center justify-center h-full text-sm\">로딩 중...</div>;\r\n  }\r\n\r\n  if (groupCampaigns.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full text-gray-500 text-sm\">\r\n        그룹에 속한 캠페인이 없습니다.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"overflow-y-auto\"  style={{ height: '340px' }}>\r\n      <div className=\"flex-1 overflow-auto\" style={{ paddingBottom: '20px' }}>\r\n        <table className=\"w-full border-collapse table-fixed text-xs\">\r\n          <thead>\r\n            <tr className=\"bg-gray-50 border-b sticky top-0 z-10\">\r\n              <th className=\"w-12  px-2 text-center border-r align-bottom\" style={{ height: '30px',  }}>\r\n                <CommonCheckBox2\r\n                  checked={allSelected}\r\n                  indeterminate={hasPartialSelection}\r\n                  onChange={toggleAllRows}\r\n                  title=\"전체 선택\"\r\n                />\r\n              </th>\r\n              <th className=\"text-left px-2 font-medium text-[#333] border-r\" style={{ height: '30px' }}>캠페인ID</th>\r\n              <th className=\"text-left px-2 font-medium text-[#333] border-r\" style={{ height: '30px' }}>캠페인 이름</th>\r\n              <th className=\"text-left px-2 font-medium text-[#333] border-r\" style={{ height: '30px' }}>스킬ID</th>\r\n              <th className=\"text-left px-2 font-medium text-[#333]\" style={{ height: '30px' }}>스킬명</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {groupCampaigns.map((campaign) => (\r\n              <tr \r\n                key={`campaign-${campaign.campaign_id}`}\r\n                className=\"border-b bg-white hover:bg-[#FFFAEE]\"\r\n              >\r\n                <td className=\"px-2 align-middle text-center\" style={{ height: '30px' }}>\r\n                  <CommonCheckBox2\r\n                    checked={selectedRows.includes(campaign.campaign_id)}\r\n                    onChange={() => toggleRow(campaign.campaign_id)}\r\n                  />\r\n                </td>\r\n                <td className=\"px-2 align-middle font-medium\" style={{ height: '30px' }}>{campaign.campaign_id}</td>\r\n                <td className=\"px-2 align-middle text-blue-700\" style={{ height: '30px' }}>{`캠페인 ${campaign.campaign_id}`}</td>\r\n                <td className=\"px-2 align-middle\" style={{ height: '30px' }}>14</td>\r\n                <td className=\"px-2 align-middle\" style={{ height: '30px' }}>스킬1</td>\r\n              </tr>\r\n            ))}\r\n            {/* 마지막 행 이후 추가 여백을 위한 빈 행 */}\r\n            {/* <tr>\r\n              <td colSpan={5} className=\"h-16\"></td>\r\n            </tr> */}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupCampaignList;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 11489, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 11495, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/popups/ITableForSkillListWithCampaign.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import React from \"react\";\r\n// import { ChevronDown, ChevronRight } from \"lucide-react\";\r\n// import CommonCheckBox2 from \"@/components/shared/CommonCheckBox2\";\r\n\r\n// interface SkillWithCampaigns {\r\n//   skillId: number;\r\n//   campaigns: { campaignId: number; tenantId: number }[];\r\n// }\r\n\r\n// interface Props {\r\n//   filteredSkills: SkillWithCampaigns[];\r\n//   expandedSkills: number[];\r\n//   selectedLeftCampaigns: number[];\r\n//   isLoading: boolean;\r\n//   hasError: boolean;\r\n//   toggleSkill: (skillId: number) => void;\r\n//   toggleLeftCampaignSelection: (campaignId: number) => void;\r\n//   toggleAllCampaigns: (checked: boolean) => void;\r\n//   getCampaignName: (campaignId: number) => string;\r\n//   getSkillName: (skillId: number) => string;\r\n// }\r\n\r\n// const ITableForSkillListWithCampaign: React.FC<Props> = ({\r\n//   filteredSkills = [],\r\n//   expandedSkills = [],\r\n//   selectedLeftCampaigns = [],\r\n//   isLoading,\r\n//   hasError,\r\n//   toggleSkill,\r\n//   toggleLeftCampaignSelection,\r\n//   toggleAllCampaigns,\r\n//   getCampaignName,\r\n//   getSkillName,\r\n// }) => {\r\n//   // Calculate if all visible campaigns are selected\r\n//   const allCampaignsCount = filteredSkills.reduce(\r\n//     (count, skill) => count + skill.campaigns.length,\r\n//     0\r\n//   );\r\n  \r\n//   const allVisibleCampaignIds = filteredSkills.flatMap(skill => \r\n//     skill.campaigns.map(campaign => campaign.campaignId)\r\n//   );\r\n  \r\n//   const allSelected = allCampaignsCount > 0 && \r\n//     allVisibleCampaignIds.every(id => selectedLeftCampaigns.includes(id));\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col h-full\">\r\n//       {isLoading ? (\r\n//         <div className=\"flex items-center justify-center h-full text-sm\">로딩 중...</div>\r\n//       ) : hasError ? (\r\n//         <div className=\"flex items-center justify-center h-full text-red-500 text-sm\">\r\n//           데이터 로드 중 오류 발생\r\n//         </div>\r\n//       ) : filteredSkills.length === 0 ? (\r\n//         <div className=\"flex items-center justify-center h-full text-gray-500 text-sm\">\r\n//           검색 결과가 없습니다.\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"flex-1 overflow-auto\" style={{ paddingBottom: '20px' }}>\r\n//           <table className=\"w-full border-collapse table-fixed text-xs\">\r\n//             <thead>\r\n//               <tr className=\"bg-white border-b sticky top-0 z-10\">\r\n//                 <th className=\"w-8 py-1 px-2 text-center\">\r\n//                   <CommonCheckBox2\r\n//                     checked={allSelected}\r\n//                     onChange={toggleAllCampaigns}\r\n//                     title=\"전체 선택\"\r\n//                   />\r\n//                 </th>\r\n//                 <th className=\"text-left py-1 px-2 font-medium\">스킬</th>\r\n//                 <th className=\"text-left py-1 px-2 font-medium w-1/4\">캠페인ID</th>\r\n//                 <th className=\"text-left py-1 px-2 font-medium w-1/2\">캠페인 이름</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {filteredSkills.map((skill) => {\r\n//                 const isExpanded = expandedSkills.includes(skill.skillId);\r\n//                 return (\r\n//                   <React.Fragment key={`skill-${skill.skillId}`}>\r\n//                     {/* 스킬 행 */}\r\n//                     <tr className={`border-b ${isExpanded ? \"bg-blue-100\" : \"bg-blue-50\"}`}>\r\n//                       <td className=\"py-1 px-2 align-middle text-center\">\r\n//                         {/* 스킬 레벨에는 체크박스 없음 */}\r\n//                       </td>\r\n//                       <td className=\"py-1 px-2 align-middle cursor-pointer\" onClick={() => toggleSkill(skill.skillId)}>\r\n//                         <div className=\"flex items-center\">\r\n//                           {isExpanded ? (\r\n//                             <ChevronDown size={14} className=\"mr-1 flex-shrink-0\" />\r\n//                           ) : (\r\n//                             <ChevronRight size={14} className=\"mr-1 flex-shrink-0\" />\r\n//                           )}\r\n//                           <span className=\"font-medium\">{getSkillName(skill.skillId)}</span>\r\n//                         </div>\r\n//                       </td>\r\n//                       <td className=\"py-1 px-2 align-middle\"></td>\r\n//                       <td className=\"py-1 px-2 align-middle\"></td>\r\n//                     </tr>\r\n\r\n//                     {/* 캠페인 목록 (확장 시 표시) */}\r\n//                     {isExpanded &&\r\n//                       (skill.campaigns ?? []).map((campaign) => (\r\n//                         <tr\r\n//                           key={`campaign-${skill.skillId}-${campaign.campaignId}`}\r\n//                           className=\"border-b bg-white hover:bg-gray-50\"\r\n//                         >\r\n//                           <td className=\"py-1 px-2 align-middle text-center\">\r\n//                             <CommonCheckBox2\r\n//                               checked={selectedLeftCampaigns.includes(campaign.campaignId)}\r\n//                               onChange={() => toggleLeftCampaignSelection(campaign.campaignId)}\r\n//                             />\r\n//                           </td>\r\n//                           <td className=\"py-1 px-2 align-middle text-gray-600\">\r\n//                             <div className=\"pl-5\">{getSkillName(skill.skillId)}</div>\r\n//                           </td>\r\n//                           <td className=\"py-1 px-2 align-middle\">{campaign.campaignId}</td>\r\n//                           <td className=\"py-1 px-2 align-middle text-blue-600\">\r\n//                             {getCampaignName(campaign.campaignId)}\r\n//                           </td>\r\n//                         </tr>\r\n//                       ))}\r\n//                   </React.Fragment>\r\n//                 );\r\n//               })}\r\n//               {/* 마지막 행 이후 추가 여백을 위한 빈 행 */}\r\n//               <tr>\r\n//                 <td colSpan={4} className=\"h-16\"></td>\r\n//               </tr>\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ITableForSkillListWithCampaign;\r\n\r\n\"use client\";\r\n\r\nimport React, { useMemo } from \"react\";\r\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\r\nimport CommonCheckBox2 from \"@/components/shared/CommonCheckBox2\";\r\n\r\ninterface SkillWithCampaigns {\r\n  skillId: number;\r\n  campaigns: { campaignId: number; tenantId: number }[];\r\n}\r\n\r\ninterface Props {\r\n  filteredSkills: SkillWithCampaigns[];\r\n  expandedSkills: number[];\r\n  selectedLeftCampaigns: string[];\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  toggleSkill: (skillId: number) => void;\r\n  toggleLeftCampaignSelection: (campaignId: string | number | any) => void;\r\n  toggleAllCampaigns: (checked: boolean) => void;\r\n  getCampaignName: (campaignId: number) => string;\r\n  getSkillName: (skillId: number | string | any) => string;\r\n  setExpandedSkills: (skills: number[]) => void;\r\n}\r\n\r\nconst ITableForSkillListWithCampaign: React.FC<Props> = ({\r\n  filteredSkills = [],\r\n  expandedSkills = [],\r\n  selectedLeftCampaigns = [],\r\n  isLoading,\r\n  hasError,\r\n  toggleSkill,\r\n  toggleLeftCampaignSelection,\r\n  toggleAllCampaigns,\r\n  getCampaignName,\r\n  getSkillName,\r\n  setExpandedSkills,\r\n}) => {\r\n  // Calculate if all visible campaigns are selected\r\n  const allCampaignsIds = useMemo(() => {\r\n    return filteredSkills.flatMap(skill => \r\n      skill.campaigns.map(campaign => `${skill.skillId}-${campaign.campaignId}`)\r\n    );\r\n  }, [filteredSkills]);\r\n  \r\n  const allSelected = allCampaignsIds.length > 0 && \r\n    allCampaignsIds.every(id => selectedLeftCampaigns.includes(id));\r\n    \r\n  const hasPartialSelection = !allSelected && \r\n    allCampaignsIds.some(id => selectedLeftCampaigns.includes(id));\r\n\r\n  // Toggle all campaigns for a specific skill\r\n  const toggleSkillCampaigns = (skillId: number, checked: boolean) => {\r\n    const skill = filteredSkills.find(s => s.skillId === skillId);\r\n    if (!skill) return;\r\n    \r\n    const skillCampaignIds = skill.campaigns.map(campaign => `${skillId}-${campaign.campaignId}`);\r\n    \r\n    if (checked) {\r\n      // 체크 시 자동으로 스킬을 펼치기\r\n      if (!expandedSkills.includes(skillId)) {\r\n        setExpandedSkills([...expandedSkills, skillId]);\r\n      }\r\n      \r\n      // Add all campaigns that are not already selected\r\n      const idsToAdd = skillCampaignIds.filter(id => !selectedLeftCampaigns.includes(id));\r\n      if (idsToAdd.length > 0) {\r\n        // Toggle each campaign selection individually\r\n        idsToAdd.forEach(id => toggleLeftCampaignSelection(id));\r\n      }\r\n    } else {\r\n      // 체크 해제 시 자동으로 스킬을 접기\r\n      setExpandedSkills(expandedSkills.filter(id => id !== skillId));\r\n      \r\n      // Remove all campaigns for this skill that are currently selected\r\n      const idsToRemove = skillCampaignIds.filter(id => selectedLeftCampaigns.includes(id));\r\n      if (idsToRemove.length > 0) {\r\n        // Toggle each campaign selection individually\r\n        idsToRemove.forEach(id => toggleLeftCampaignSelection(id));\r\n      }\r\n    }\r\n  };\r\n\r\n  // 개별 캠페인 선택/해제 처리 함수\r\n  const handleToggleCampaign = (compositeId: string) => {\r\n    // 원래 토글 함수 호출\r\n    toggleLeftCampaignSelection(compositeId);\r\n    \r\n    // 이 캠페인을 선택 해제하는 경우 (현재 선택된 상태)\r\n    if (selectedLeftCampaigns.includes(compositeId)) {\r\n      // 해당 스킬의 모든 캠페인이 선택 해제되었는지 확인\r\n      const [skillIdStr] = compositeId.split('-');\r\n      const skillId = parseInt(skillIdStr);\r\n      const skill = filteredSkills.find(s => s.skillId === skillId);\r\n      \r\n      if (skill) {\r\n        const skillCampaignIds = skill.campaigns.map(campaign => `${skillId}-${campaign.campaignId}`);\r\n        // 현재 선택 해제하는 캠페인을 제외한 나머지 선택된 캠페인 수\r\n        const remainingSelectedCount = skillCampaignIds.filter(\r\n          id => id !== compositeId && selectedLeftCampaigns.includes(id)\r\n        ).length;\r\n        \r\n        // 선택된 캠페인이 이제 없다면 스킬을 접기\r\n        if (remainingSelectedCount === 0) {\r\n          setExpandedSkills(expandedSkills.filter(id => id !== skillId));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // 전체 선택/해제 처리 함수\r\n  const handleToggleAllCampaigns = (checked: boolean) => {\r\n    // 전체 선택 해제할 때는 모든 스킬 접기\r\n    if (!checked) {\r\n      setExpandedSkills([]);\r\n    } else {\r\n      // 전체 선택할 때는 모든 스킬 펼치기\r\n      const allSkillIds = filteredSkills.map(skill => skill.skillId);\r\n      setExpandedSkills(allSkillIds);\r\n    }\r\n    \r\n    // 기존 전체 선택/해제 로직 호출\r\n    toggleAllCampaigns(checked);\r\n  };\r\n\r\n  // Calculate selection state for each skill\r\n  const getSkillSelectionState = (skillId: number) => {\r\n    const skill = filteredSkills.find(s => s.skillId === skillId);\r\n    if (!skill || skill.campaigns.length === 0) return { checked: false, indeterminate: false };\r\n    \r\n    const skillCampaignIds = skill.campaigns.map(campaign => `${skillId}-${campaign.campaignId}`);\r\n    const selectedCount = skillCampaignIds.filter(id => selectedLeftCampaigns.includes(id)).length;\r\n    \r\n    return {\r\n      checked: selectedCount === skillCampaignIds.length && skillCampaignIds.length > 0,\r\n      indeterminate: selectedCount > 0 && selectedCount < skillCampaignIds.length\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      {isLoading ? (\r\n        <div className=\"flex items-center justify-center h-full text-sm\">로딩 중...</div>\r\n      ) : hasError ? (\r\n        <div className=\"flex items-center justify-center h-full text-red-500 text-sm\">\r\n          데이터 로드 중 오류 발생\r\n        </div>\r\n      ) : filteredSkills.length === 0 ? (\r\n        <div className=\"flex items-center justify-center h-full text-gray-500 text-sm\">\r\n          검색 결과가 없습니다.\r\n        </div>\r\n      ) : (\r\n        <div className=\"overflow-y-auto\"  style={{ height: '340px' }}>\r\n          <table className=\"w-full border-collapse table-fixed text-xs\">\r\n            <thead>\r\n              <tr className=\"bg-[#F8F8F8] border-b sticky top-0 z-10\">\r\n                <th className=\"w-12 px-2 text-center border-r align-bottom\" style={{ height: '30px' }}>\r\n                  <CommonCheckBox2\r\n                    checked={allSelected}\r\n                    indeterminate={hasPartialSelection}\r\n                    onChange={() => handleToggleAllCampaigns(!allSelected)}\r\n                    title=\"전체 선택\"\r\n                  />\r\n                </th>\r\n                <th className=\"text-left px-2 font-medium text-[#333] border-r\" style={{ height: '30px' }}>스킬</th>\r\n                <th className=\"text-left px-2 font-medium text-[#333] w-1/4 border-r\" style={{ height: '30px' }}>캠페인ID</th>\r\n                <th className=\"text-left px-2 font-medium text-[#333] w-1/2\" style={{ height: '30px' }}>캠페인 이름</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredSkills.map((skill) => {\r\n                const isExpanded = expandedSkills.includes(skill.skillId);\r\n                const { checked, indeterminate } = getSkillSelectionState(skill.skillId);\r\n                \r\n                return (\r\n                  <React.Fragment key={`skill-${skill.skillId}`}>\r\n                    {/* 스킬 행 */}\r\n                    <tr className={`border-b ${isExpanded ? \"bg-[#edf7fd]\" : \"bg-[#f5faff]\"}`}>\r\n                      <td className=\"px-2 align-bottom text-center\" style={{ height: '30px' }}>\r\n                        {/* 스킬 레벨 체크박스 */}\r\n                        <CommonCheckBox2\r\n                          checked={checked}\r\n                          indeterminate={indeterminate}\r\n                          onChange={() => toggleSkillCampaigns(skill.skillId, !checked)}\r\n                        />\r\n                      </td>\r\n                      <td className=\"px-2 align-middle cursor-pointer text-[#444]\" onClick={() => toggleSkill(skill.skillId)} style={{ height: '30px' }}>\r\n                        <div className=\"flex items-center\">\r\n                          {isExpanded ? (\r\n                            <ChevronDown size={16} className=\"mr-2 flex-shrink-0 text-[#444]\" />\r\n                          ) : (\r\n                            <ChevronRight size={16} className=\"mr-2 flex-shrink-0 text-[#444]\" />\r\n                          )}\r\n                          <span className=\"font-medium\">{getSkillName(skill.skillId)}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-2 align-middle text-[#444]\" style={{ height: '30px' }}></td>\r\n                      <td className=\"px-2 align-middle text-[#444]\" style={{ height: '30px' }}></td>\r\n                    </tr>\r\n\r\n                    {/* 캠페인 목록 (확장 시 표시) */}\r\n                    {isExpanded &&\r\n                      (skill.campaigns ?? []).map((campaign) => {\r\n                        const compositeId = `${skill.skillId}-${campaign.campaignId}`;\r\n                        return (\r\n                          <tr\r\n                            key={`campaign-${compositeId}`}\r\n                            className=\"border-b bg-white hover:bg-[#FFFAEE]\"\r\n                          >\r\n                            <td className=\"px-2 align-middle text-center\" style={{ height: '30px' }}>\r\n                              <CommonCheckBox2\r\n                                checked={selectedLeftCampaigns.includes(compositeId)}\r\n                                onChange={() => handleToggleCampaign(compositeId)}\r\n                              />\r\n                            </td>\r\n                            <td className=\"px-2 align-middle text-gray-600\" style={{ height: '30px' }}>\r\n                              <div className=\"flex items-center\">\r\n                                <div className=\"w-5 mr-2\"></div> {/* 아이콘 공간만큼 여백 추가 */}\r\n                                <span className=\"pl-2\">{getSkillName(skill.skillId)}</span> {/* 왼쪽 여백 추가 */}\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"px-2 align-middle font-medium\" style={{ height: '30px' }}>{campaign.campaignId}</td>\r\n                            <td className=\"px-2 align-middle text-blue-700\" style={{ height: '30px' }}>\r\n                              {getCampaignName(campaign.campaignId)}\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n              {/* 마지막 행 이후 추가 여백을 위한 빈 행 */}\r\n              {/* <tr>\r\n                <td colSpan={4} className=\"h-16\"></td>\r\n              </tr> */}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ITableForSkillListWithCampaign;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 12055, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12061, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForAddCampaignToSpecificCampaignGroup.ts"],"sourcesContent":["// src/widgets/sidebar/hooks/useApiForAddCampaignToSpecificCampaignGroup.ts\r\nimport { useMutation, UseMutationResult, useQueryClient } from '@tanstack/react-query';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { SuccessResponse } from '@/features/campaignManager/types/typeForCampaignGroupForSideBar';\r\nimport { apiForAddCampaignToSpecificCampaignGroup } from '@/features/preferences/api/apiForCampaignGroup';\r\n\r\ninterface AddCampaignToGroupParams {\r\n  group_id: number;\r\n  campaign_ids: number[];\r\n  tenant_id: number;\r\n}\r\n\r\n/**\r\n * 특정 캠페인 그룹에 캠페인을 추가하기 위한 커스텀 훅\r\n * @param options 뮤테이션 옵션\r\n * @returns 뮤테이션 결과 및 관련 함수\r\n */\r\nconst useApiForAddCampaignToSpecificCampaignGroup = (\r\n  options?: UseMutationOptions<\r\n    SuccessResponse, \r\n    Error, \r\n    AddCampaignToGroupParams\r\n  >\r\n): UseMutationResult<SuccessResponse, Error, AddCampaignToGroupParams, unknown> => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation<SuccessResponse, Error, AddCampaignToGroupParams>({\r\n    mutationKey: ['addCampaignToGroup'],\r\n    mutationFn: ({ group_id, campaign_ids, tenant_id }: AddCampaignToGroupParams) => \r\n      apiForAddCampaignToSpecificCampaignGroup(group_id, campaign_ids, tenant_id),\r\n    onSuccess: (data, variables, context) => {\r\n      // 캠페인 그룹 관련 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['campaignGroupSkills', variables.group_id]\r\n      });\r\n      \r\n      // 캠페인 그룹 리스트 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['campaignGroupList']\r\n      });\r\n      \r\n      // 사이드메뉴 데이터 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['sideMenuData']\r\n      });\r\n      \r\n      console.log('✅ 캠페인 그룹에 캠페인 추가 성공:', data);\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error, variables, context) => {\r\n      console.error('❌ 캠페인 그룹에 캠페인 추가 실패:', error);\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n};\r\n\r\nexport default useApiForAddCampaignToSpecificCampaignGroup;"],"names":[],"mappings":"AAAA,2EAA2E;;;;AAI3E;AAHA;AAAA;;;;AAWA;;;;CAIC,GACD,MAAM,8CAA8C,CAClD;;IAMA,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAoD;QACnE,aAAa;YAAC;SAAqB;QACnC,UAAU;uEAAE,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAA4B,GAC1E,CAAA,GAAA,+JAAA,CAAA,2CAAwC,AAAD,EAAE,UAAU,cAAc;;QACnE,SAAS;uEAAE,CAAC,MAAM,WAAW;gBAC3B,mBAAmB;gBACnB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAuB,UAAU,QAAQ;qBAAC;gBACvD;gBAEA,oBAAoB;gBACpB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAoB;gBACjC;gBAEA,mBAAmB;gBACnB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAe;gBAC5B;gBAEA,QAAQ,GAAG,CAAC,wBAAwB;gBACpC,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;uEAAE,CAAC,OAAO,WAAW;gBAC1B,QAAQ,KAAK,CAAC,wBAAwB;gBACtC,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GArCM;;QAOgB,yLAAA,CAAA,iBAAc;QAE3B,iLAAA,CAAA,cAAW;;;uCA8BL"}},
    {"offset": {"line": 12128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12134, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForRemoveCampaignFromCampaignGroup.ts"],"sourcesContent":["// src/widgets/sidebar/hooks/useApiForRemoveCampaignFromCampaignGroup.ts\r\nimport { useMutation, UseMutationResult, useQueryClient } from '@tanstack/react-query';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { SuccessResponse } from '@/features/campaignManager/types/typeForCampaignGroupForSideBar';\r\nimport { apiForRemoveCampaignFromCampaignGroup } from '@/features/preferences/api/apiForCampaignGroup';\r\n\r\ninterface RemoveCampaignFromGroupParams {\r\n  group_id: number;\r\n  campaign_ids: number[];\r\n  tenant_id: number;\r\n}\r\n\r\n/**\r\n * 특정 캠페인 그룹에서 캠페인을 제거하기 위한 커스텀 훅\r\n * @param options 뮤테이션 옵션\r\n * @returns 뮤테이션 결과 및 관련 함수\r\n */\r\nconst useApiForRemoveCampaignFromCampaignGroup = (\r\n  options?: UseMutationOptions<\r\n    SuccessResponse, \r\n    Error, \r\n    RemoveCampaignFromGroupParams\r\n  >\r\n): UseMutationResult<SuccessResponse, Error, RemoveCampaignFromGroupParams, unknown> => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation<SuccessResponse, Error, RemoveCampaignFromGroupParams>({\r\n    mutationKey: ['removeCampaignFromGroup'],\r\n    mutationFn: ({ group_id, campaign_ids, tenant_id}: RemoveCampaignFromGroupParams) => \r\n      apiForRemoveCampaignFromCampaignGroup(group_id, campaign_ids, tenant_id),\r\n    onSuccess: (data, variables, context) => {\r\n      // 캠페인 그룹 관련 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['campaignGroupSkills', variables.group_id]\r\n      });\r\n      \r\n      // 캠페인 그룹 리스트 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['campaignGroupList']\r\n      });\r\n      \r\n      // 사이드메뉴 데이터 캐시 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['sideMenuData']\r\n      });\r\n      \r\n      console.log('✅ 캠페인 그룹에서 캠페인 제거 성공:', data);\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error, variables, context) => {\r\n      console.error('❌ 캠페인 그룹에서 캠페인 제거 실패:', error);\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n};\r\n\r\nexport default useApiForRemoveCampaignFromCampaignGroup;"],"names":[],"mappings":"AAAA,wEAAwE;;;;AAIxE;AAHA;AAAA;;;;AAWA;;;;CAIC,GACD,MAAM,2CAA2C,CAC/C;;IAMA,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAyD;QACxE,aAAa;YAAC;SAA0B;QACxC,UAAU;oEAAE,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAgC,GAC9E,CAAA,GAAA,+JAAA,CAAA,wCAAqC,AAAD,EAAE,UAAU,cAAc;;QAChE,SAAS;oEAAE,CAAC,MAAM,WAAW;gBAC3B,mBAAmB;gBACnB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;wBAAuB,UAAU,QAAQ;qBAAC;gBACvD;gBAEA,oBAAoB;gBACpB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAoB;gBACjC;gBAEA,mBAAmB;gBACnB,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAe;gBAC5B;gBAEA,QAAQ,GAAG,CAAC,yBAAyB;gBACrC,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;oEAAE,CAAC,OAAO,WAAW;gBAC1B,QAAQ,KAAK,CAAC,yBAAyB;gBACvC,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GArCM;;QAOgB,yLAAA,CAAA,iBAAc;QAE3B,iLAAA,CAAA,cAAW;;;uCA8BL"}},
    {"offset": {"line": 12201, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12207, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/popups/CampaignAddPopup.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport useApiForGetSkillsWithCampaigns from '@/widgets/sidebar/hooks/useApiForGetSkillsWithCampaigns';\r\nimport { useTotalCampaignListForAddCampaignToCampaignGroup } from '@/widgets/sidebar/hooks/useTotalCampaignListForAddCampaignToCampaignGroup';\r\nimport { useTotalSkillListForAddCampaignToCampaignGroup } from '@/widgets/sidebar/hooks/useTotalSkillListForAddCampaignToCampaignGroup';\r\nimport useApiForGetCampaignListForCampaignGroup from '@/widgets/sidebar/hooks/useApiForGetCampaignListForCampaignGroup';\r\nimport { CampaignInfo, SkillInfo } from '@/widgets/sidebar/api/type/typeForAddCampaignForCampaignGroup';\r\nimport GroupCampaignList from './GroupCampaignList';\r\nimport ITableForSkillListWithCampaign from './ITableForSkillListWithCampaign';\r\nimport { ChevronRight, ChevronLeft } from 'lucide-react';\r\nimport { useAuthStore } from '@/store/authStore';\r\nimport { toast } from 'react-toastify';\r\nimport useApiForAddCampaignToSpecificCampaignGroup from '../../hooks/useApiForAddCampaignToSpecificCampaignGroup';\r\nimport useApiForRemoveCampaignFromCampaignGroup from '../../hooks/useApiForRemoveCampaignFromCampaignGroup';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { useSideMenuCampaignGroupTabStore } from '@/store/storeForSideMenuCampaignGroupTab';\r\nimport TitleWrap from \"@/components/shared/TitleWrap\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { useCampainManagerStore } from '@/store/campainManagerStore';\r\n\r\ninterface SkillWithCampaigns {\r\n  skillId: number;\r\n  campaigns: { campaignId: number; tenantId: number }[];\r\n}\r\n\r\ninterface Props {\r\n  isOpen?: boolean;\r\n  groupId: number;\r\n  groupName?: string;\r\n  onClose?: () => void;\r\n  onSelect?: (selectedCampaigns: number[]) => void;\r\n}\r\n\r\nconst CampaignAddPopup: React.FC<Props> = ({\r\n  isOpen = true,\r\n  onClose,\r\n  onSelect,\r\n  groupId,\r\n  groupName\r\n}) => {\r\n  // ----------------------------\r\n  //  State\r\n  // ----------------------------\r\n  const [skillsWithCampaigns, setSkillsWithCampaigns] = useState<SkillWithCampaigns[]>([]);\r\n  const [expandedSkills, setExpandedSkills] = useState<number[]>([1]);\r\n  const [selectedLeftCampaigns, setSelectedLeftCampaigns] = useState<string[]>([]);\r\n  const [selectedRightCampaigns, setSelectedRightCampaigns] = useState<number[]>([]);\r\n  const [campaignIdsForPopup, setCampaignIdsForPopup] = useState<number[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState<React.ReactNode>('');\r\n  const [confirmRemove, setConfirmRemove] = useState(false);\r\n  const [processingCampaigns, setProcessingCampaigns] = useState(false);\r\n  const [removingCampaigns, setRemovingCampaigns] = useState(false);\r\n  const [campaignLookup, setCampaignLookup] = useState<Record<number, CampaignInfo>>({});\r\n  const [skillLookup, setSkillLookup] = useState<Record<number, SkillInfo>>({});\r\n  const { refetchTreeDataForCampaignGroupTab } = useSideMenuCampaignGroupTabStore();\r\n\r\n  const { setCampaignGroupManagerInit } = useCampainManagerStore();  \r\n\r\n  // ----------------------------\r\n  //  Hooks\r\n  // ----------------------------\r\n  const tenant_id = useAuthStore(state => state.tenant_id);\r\n  const queryClient = useQueryClient();\r\n\r\n  // ----------------------------\r\n  //  Query\r\n  // ----------------------------\r\n  const { data, isLoading, error } = useApiForGetSkillsWithCampaigns(undefined, isOpen);\r\n  const {\r\n    data: campaignListData,\r\n    isLoading: isLoadingCampaigns,\r\n    error: campaignError\r\n  } = useTotalCampaignListForAddCampaignToCampaignGroup(undefined, isOpen);\r\n  const {\r\n    data: skillListData,\r\n    isLoading: isLoadingSkills,\r\n    error: skillError\r\n  } = useTotalSkillListForAddCampaignToCampaignGroup(undefined, isOpen);\r\n  const {\r\n    data: groupData,\r\n    isLoading: isLoadingGroup,\r\n    error: groupError\r\n  } = useApiForGetCampaignListForCampaignGroup(groupId, undefined, undefined, isOpen);\r\n\r\n  // ----------------------------\r\n  //  Mutation\r\n  // ----------------------------\r\n  const { mutate: addCampaignToGroup, isPending: isAddingCampaign } =\r\n    useApiForAddCampaignToSpecificCampaignGroup({\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: ['campaignGroupSkills', groupId] });\r\n      },\r\n      onError: (error: Error) => {\r\n        toast.error(`캠페인 추가 실패: ${error.message}`);\r\n      }\r\n    });\r\n\r\n  const { mutate: removeCampaignFromGroup, isPending: isRemovingCampaign } =\r\n    useApiForRemoveCampaignFromCampaignGroup({\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: ['campaignGroupSkills', groupId] });\r\n      },\r\n      onError: (error: Error) => {\r\n        toast.error(`캠페인 제거 실패: ${error.message}`);\r\n      }\r\n    });\r\n\r\n  // ----------------------------\r\n  //  Effects\r\n  // ----------------------------\r\n  useEffect(() => {\r\n    if (campaignListData?.result_data) {\r\n      const lookup: Record<number, CampaignInfo> = {};\r\n      campaignListData.result_data.forEach(campaign => {\r\n        lookup[campaign.campaign_id] = campaign;\r\n      });\r\n      setCampaignLookup(lookup);\r\n    }\r\n  }, [campaignListData]);\r\n\r\n  useEffect(() => {\r\n    if (skillListData?.result_data) {\r\n      const lookup: Record<number, SkillInfo> = {};\r\n      skillListData.result_data.forEach(skill => {\r\n        lookup[skill.skill_id] = skill;\r\n      });\r\n      setSkillLookup(lookup);\r\n    }\r\n  }, [skillListData]);\r\n\r\n  useEffect(() => {\r\n    if (data?.result_data) {\r\n      const skillMap: Record<number, SkillWithCampaigns> = {};\r\n      data.result_data.forEach(campaign => {\r\n        if (Array.isArray(campaign.skill_id)) {\r\n          campaign.skill_id.forEach(skillId => {\r\n            if (!skillMap[skillId]) {\r\n              skillMap[skillId] = { skillId, campaigns: [] };\r\n            }\r\n            if (!skillMap[skillId].campaigns.some(c => c.campaignId === campaign.campaign_id)) {\r\n              skillMap[skillId].campaigns.push({\r\n                campaignId: campaign.campaign_id,\r\n                tenantId: campaign.tenant_id\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n      const skillArray = Object.values(skillMap).sort((a, b) => a.skillId - b.skillId);\r\n      setSkillsWithCampaigns(skillArray);\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setSelectedLeftCampaigns([]);\r\n      setSelectedRightCampaigns([]);\r\n      setExpandedSkills([1]);\r\n      setSearchTerm('');\r\n      setShowAlert(false);\r\n      setConfirmRemove(false);\r\n      setCampaignIdsForPopup([]);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // ----------------------------\r\n  //  Derived data & Helpers\r\n  // ----------------------------\r\n  const isLoadingAny = isLoading || isLoadingCampaigns || isLoadingSkills;\r\n  const hasError = Boolean(error || campaignError || skillError || groupError);\r\n\r\n  const groupCampaignsData = useMemo(() => {\r\n    return (groupData?.result_data || []).filter(item => item.group_id === groupId);\r\n  }, [groupData, groupId]);\r\n\r\n  // 현재 그룹에 이미 존재하는 캠페인 ID들의 Set\r\n  const existingCampaignIds = useMemo(() => {\r\n    return new Set(groupCampaignsData.map(item => item.campaign_id));\r\n  }, [groupCampaignsData]);\r\n\r\n  // 선택한 캠페인 중 중복되지 않은 항목이 있는지 확인\r\n  const hasUniqueSelections = useMemo(() => {\r\n    return campaignIdsForPopup.some(id => !existingCampaignIds.has(id));\r\n  }, [campaignIdsForPopup, existingCampaignIds]);\r\n\r\n  const getCampaignName = (campaignId: number) =>\r\n    campaignLookup[campaignId]?.campaign_name || `캠페인 ${campaignId}`;\r\n\r\n  const getSkillName = (skillId: number) =>\r\n    skillLookup[skillId]?.skill_name || `스킬 ${skillId}`;\r\n\r\n  const filteredSkills = useMemo(() => {\r\n    if (!searchTerm) return skillsWithCampaigns;\r\n    const term = searchTerm.toLowerCase();\r\n    return skillsWithCampaigns\r\n      .map(skill => {\r\n        const skillMatches =\r\n          String(skill.skillId).includes(term) ||\r\n          getSkillName(skill.skillId).toLowerCase().includes(term);\r\n        const filteredCampaigns = skill.campaigns.filter(c =>\r\n          String(c.campaignId).includes(term) ||\r\n          getCampaignName(c.campaignId).toLowerCase().includes(term)\r\n        );\r\n        return {\r\n          skillId: skill.skillId,\r\n          campaigns: skillMatches ? skill.campaigns : filteredCampaigns\r\n        };\r\n      })\r\n      .filter(skill => skill.campaigns.length > 0);\r\n  }, [skillsWithCampaigns, searchTerm]);\r\n\r\n  const totalCampaigns = useMemo(\r\n    () => filteredSkills.reduce((acc, skill) => acc + skill.campaigns.length, 0),\r\n    [filteredSkills]\r\n  );\r\n\r\n  const toggleSkill = (skillId: number) => {\r\n    setExpandedSkills(prev =>\r\n      prev.includes(skillId) ? prev.filter(id => id !== skillId) : [...prev, skillId]\r\n    );\r\n  };\r\n\r\n  const toggleAllSkills = (expand: boolean) => {\r\n    if (expand) {\r\n      const allSkillIds = filteredSkills.map(skill => skill.skillId);\r\n      setExpandedSkills(allSkillIds);\r\n    } else {\r\n      setExpandedSkills([]);\r\n    }\r\n  };\r\n\r\n  const toggleLeftCampaignSelection = (id: string) => {\r\n    setSelectedLeftCampaigns(prev =>\r\n      prev.includes(id) ? prev.filter(itemId => itemId !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const toggleAllCampaigns = (checked: boolean) => {\r\n    if (checked) {\r\n      toggleAllSkills(true);\r\n      const allCampaignIds = filteredSkills.flatMap(skill =>\r\n        skill.campaigns.map(c => `${skill.skillId}-${c.campaignId}`)\r\n      );\r\n      setSelectedLeftCampaigns(allCampaignIds);\r\n    } else {\r\n      setSelectedLeftCampaigns([]);\r\n    }\r\n  };\r\n\r\n  const toggleAllGroupCampaigns = (checked: boolean, selectedIds: number[] = []) => {\r\n    setSelectedRightCampaigns(selectedIds);\r\n  };\r\n\r\n  const getSelectedCampaignIds = (): number[] => {\r\n    return selectedLeftCampaigns\r\n      .map(compositeId => {\r\n        const parts = compositeId.split('-');\r\n        return parts.length === 2 ? parseInt(parts[1]) : null;\r\n      })\r\n      .filter((id): id is number => id !== null);\r\n  };\r\n\r\n  // ----------------------------\r\n  //  Confirm Popup Table\r\n  // ----------------------------\r\n  const createCampaignListTable = (campaignIds: number[]) => {\r\n    const groupCampaignIds = new Set(groupCampaignsData.map(item => item.campaign_id));\r\n    return (\r\n      <div className=\"max-h-40 overflow-auto border rounded border-[#ebebeb] mb-4\">\r\n        <table className=\"w-full border-collapse text-sm\">\r\n          <thead>\r\n            <tr className=\"bg-[#F8F8F8] border-b\">\r\n              <th className=\"border-r border-[#ebebeb] px-2 font-normal text-[#333]\" style={{ height: '30px' }}>캠페인 ID</th>\r\n              <th className=\"border-r border-[#ebebeb] px-2 font-normal text-[#333]\" style={{ height: '30px' }}>캠페인 이름</th>\r\n              <th className=\"px-2 font-normal text-[#333]\" style={{ height: '30px' }}>중복</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {campaignIds.map((id, index) => {\r\n              const isDuplicate = groupCampaignIds.has(id);\r\n              return (\r\n                <tr\r\n                  key={id}\r\n                  className={isDuplicate ? 'bg-orange-100' : (index % 2 === 0 ? 'bg-white' : 'bg-gray-50')}\r\n                >\r\n                  <td className=\"px-2 text-center\" style={{ height: '30px' }}>{id}</td>\r\n                  <td className=\"px-2 text-center\" style={{ height: '30px' }}>{getCampaignName(id)}</td>\r\n                  <td className=\"px-2 text-center\" style={{ height: '30px' }}>\r\n                    {isDuplicate && (\r\n                      <button onClick={() => handleRemoveFromPopup(id)} className=\"text-red-500\">\r\n                        x\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const createGroupCampaignListTable = (campaignIds: number[]) => {\r\n    const selectedCampaigns = groupCampaignsData.filter(item =>\r\n      campaignIds.includes(item.campaign_id)\r\n    );\r\n    return (\r\n      <div className=\"max-h-40 overflow-auto border rounded mb-4 border-[#ebebeb]\">\r\n        <table className=\"w-full border-collapse text-sm \">\r\n          <thead>\r\n            <tr className=\"bg-[#F8F8F8] border-b\">\r\n              <th className=\"border-r border-[#ebebeb] px-2 font-normal text-[#333]\" style={{ height: '30px' }}>캠페인 ID</th>\r\n              <th className=\"px-2 font-normal text-[#333]\" style={{ height: '30px' }}>캠페인 이름</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selectedCampaigns.map((campaign, index) => (\r\n              <tr key={campaign.campaign_id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>\r\n                <td className=\"border-r border-[#ebebeb] px-2 text-center\" style={{ height: '30px' }}>{campaign.campaign_id}</td>\r\n                <td className=\"px-2 text-center\" style={{ height: '30px' }}>{getCampaignName(campaign.campaign_id)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // ----------------------------\r\n  //  Popup Actions\r\n  // ----------------------------\r\n  const handleRemoveFromPopup = (campaignId: number) => {\r\n    setSelectedLeftCampaigns(prev =>\r\n      prev.filter(item => {\r\n        const parts = item.split('-');\r\n        return parseInt(parts[1]) !== campaignId;\r\n      })\r\n    );\r\n    setCampaignIdsForPopup(prev => prev.filter(id => id !== campaignId));\r\n  };\r\n\r\n  const moveToGroup = () => {\r\n    const campaignIds = getSelectedCampaignIds();\r\n    if (campaignIds.length === 0) return;\r\n    setCampaignIdsForPopup(campaignIds);\r\n    const alertContent = (\r\n      <div>\r\n        <p className=\"mb-2\">\r\n          {groupName} 에 아래의 {campaignIds.length} 개의 캠페인을 추가하시겠습니까?\r\n        </p>\r\n      </div>\r\n    );\r\n    setAlertMessage(alertContent);\r\n    setConfirmRemove(false);\r\n    setShowAlert(true);\r\n  };\r\n\r\n  const confirmAddToGroup = async () => {\r\n    if (campaignIdsForPopup.length === 0) {\r\n      setShowAlert(false);\r\n      return;\r\n    }\r\n\r\n    // 중복 캠페인 ID 필터링\r\n    const filteredCampaignIds = campaignIdsForPopup.filter(id => !existingCampaignIds.has(id));\r\n\r\n    // 모든 캠페인이 이미 그룹에 존재하는 경우에도 계속 진행하고 알림만 표시\r\n    const duplicateCount = campaignIdsForPopup.length - filteredCampaignIds.length;\r\n\r\n    setProcessingCampaigns(true);\r\n    try {\r\n      // 새로 추가할 캠페인이 있는 경우에만 API 호출\r\n      if (filteredCampaignIds.length > 0) {\r\n        addCampaignToGroup({\r\n          group_id: groupId,\r\n          campaign_ids: filteredCampaignIds,\r\n          tenant_id: Number(tenant_id)\r\n        }, {\r\n          onSuccess: (data: { result_code: string | number }) => {\r\n            if (Number(data.result_code) === 0) {\r\n              if (duplicateCount > 0) {\r\n                toast.success(\r\n                  `${filteredCampaignIds.length}개의 캠페인이 \"${groupName}\" 그룹에 추가되었습니다. ${duplicateCount}개는 이미 존재하는 항목입니다.`\r\n                );\r\n              } else {\r\n                toast.success(`${filteredCampaignIds.length}개의 캠페인이 \"${groupName}\" 그룹에 추가되었습니다.`);\r\n              }\r\n            } else {\r\n              toast.error('캠페인 추가에 실패했습니다.');\r\n            }\r\n\r\n            refetchTreeDataForCampaignGroupTab();\r\n            setCampaignGroupManagerInit(true);\r\n\r\n            setSelectedLeftCampaigns([]);\r\n            setCampaignIdsForPopup([]);\r\n            setProcessingCampaigns(false);\r\n            setShowAlert(false);\r\n          },\r\n          onError: (error) => {\r\n            console.error('캠페인 추가 중 오류 발생:', error);\r\n            toast.error('캠페인 추가 과정에서 오류가 발생했습니다.');\r\n            setProcessingCampaigns(false);\r\n            setShowAlert(false);\r\n          }\r\n        });\r\n      } else {\r\n        // 모든 캠페인이 이미 존재하는 경우\r\n        toast.info(\"추가할 모든 캠페인이 이미 그룹에 존재합니다.\");\r\n        setSelectedLeftCampaigns([]);\r\n        setCampaignIdsForPopup([]);\r\n        setProcessingCampaigns(false);\r\n        setShowAlert(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('캠페인 추가 중 오류 발생:', error);\r\n      toast.error('캠페인 추가 과정에서 오류가 발생했습니다.');\r\n      setProcessingCampaigns(false);\r\n      setShowAlert(false);\r\n    }\r\n  };\r\n\r\n  const moveToAll = () => {\r\n    if (selectedRightCampaigns.length === 0) {\r\n      toast.warn('제거할 캠페인을 선택해주세요.');\r\n      return;\r\n    }\r\n    const tableContent = createGroupCampaignListTable(selectedRightCampaigns);\r\n    const alertContent = (\r\n      <div>\r\n        <p className=\"mb-2\">\r\n          {groupName} 에서 아래의 {selectedRightCampaigns.length} 개의 캠페인을 제거하시겠습니까?\r\n        </p>\r\n        {tableContent}\r\n      </div>\r\n    );\r\n    setAlertMessage(alertContent);\r\n    setConfirmRemove(true);\r\n    setShowAlert(true);\r\n  };\r\n\r\n  const confirmRemoveFromGroup = async () => {\r\n    if (selectedRightCampaigns.length === 0) {\r\n      setShowAlert(false);\r\n      return;\r\n    }\r\n    setRemovingCampaigns(true);\r\n    try {\r\n      removeCampaignFromGroup({\r\n        group_id: groupId,\r\n        campaign_ids: selectedRightCampaigns,\r\n        tenant_id: Number(tenant_id)\r\n      }, {\r\n        onSuccess: (data: { result_code: string | number }) => {\r\n          if (Number(data.result_code) === 0) {\r\n            toast.success(`${selectedRightCampaigns.length}개의 캠페인이 \"${groupName}\" 그룹에서 제거되었습니다.`);\r\n          } else {\r\n            toast.error('캠페인 제거에 실패했습니다.');\r\n          }\r\n          setRemovingCampaigns(false);\r\n          setShowAlert(false);\r\n          setConfirmRemove(false);\r\n          setSelectedRightCampaigns([]);\r\n          refetchTreeDataForCampaignGroupTab();\r\n          setCampaignGroupManagerInit(true);\r\n        },\r\n        onError: (error) => {\r\n          console.error('캠페인 제거 중 오류 발생:', error);\r\n          toast.error('캠페인 제거 과정에서 오류가 발생했습니다.');\r\n          setRemovingCampaigns(false);\r\n          setShowAlert(false);\r\n          setConfirmRemove(false);\r\n          setSelectedRightCampaigns([]);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('캠페인 제거 중 오류 발생:', error);\r\n      toast.error('캠페인 제거 과정에서 오류가 발생했습니다.');\r\n      setRemovingCampaigns(false);\r\n      setShowAlert(false);\r\n      setConfirmRemove(false);\r\n      setSelectedRightCampaigns([]);\r\n    }\r\n  };\r\n\r\n  const handleAlertConfirm = () => {\r\n    if (confirmRemove) {\r\n      confirmRemoveFromGroup();\r\n    } else {\r\n      confirmAddToGroup();\r\n    }\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    const campaignIds = groupCampaignsData.map(item => item.campaign_id);\r\n    if (onSelect) onSelect(campaignIds);\r\n    if (onClose) onClose();\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      <CustomAlert\r\n        title={`${groupName} 에 대해 캠페인 추가`}\r\n        isOpen={isOpen}\r\n        onClose={() => onClose?.()}\r\n        message={\r\n          <div className=\"\">\r\n\r\n              <CustomInput\r\n                type=\"text\"\r\n                placeholder=\"검색\"\r\n                value={searchTerm}\r\n                onChange={e => setSearchTerm(e.target.value)}\r\n              />\r\n\r\n            <div\r\n              className=\"\"\r\n            >\r\n              <div className=\"flex gap-[15px] mt-[20px]\">\r\n                <div className=\"flex-1 \">\r\n                  <TitleWrap title=\"전체 캠페인 목록\" totalCount={totalCampaigns} />\r\n                  <div className=\"border rounded  overflow-hidden\">\r\n                    <ITableForSkillListWithCampaign\r\n                      filteredSkills={filteredSkills}\r\n                      expandedSkills={expandedSkills}\r\n                      selectedLeftCampaigns={selectedLeftCampaigns}\r\n                      isLoading={isLoadingAny}\r\n                      hasError={hasError}\r\n                      toggleSkill={toggleSkill}\r\n                      toggleLeftCampaignSelection={toggleLeftCampaignSelection}\r\n                      toggleAllCampaigns={toggleAllCampaigns}\r\n                      getCampaignName={getCampaignName}\r\n                      getSkillName={getSkillName}\r\n                      setExpandedSkills={setExpandedSkills}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex flex-col items-center gap-2 min-w-[22px] justify-center px-2\">\r\n                  <button\r\n                    className=\"w-[22px] h-[22px] bg-[#60C3CD] text-white rounded-full flex items-center justify-center disabled:opacity-50\"\r\n                    onClick={moveToGroup}\r\n                    disabled={\r\n                      selectedLeftCampaigns.length === 0 ||\r\n                      processingCampaigns ||\r\n                      isAddingCampaign ||\r\n                      removingCampaigns ||\r\n                      isRemovingCampaign\r\n                    }\r\n                    title=\"선택한 캠페인 추가\"\r\n                  >\r\n                    {processingCampaigns || isAddingCampaign ? (\r\n                      <div className=\"w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                    ) : (\r\n                      <span>→</span>\r\n                    )}\r\n                  </button>\r\n                  <button\r\n                    className=\"w-[22px] h-[22px] bg-[#60C3CD] text-white rounded-full flex items-center justify-center disabled:opacity-50\"\r\n                    onClick={moveToAll}\r\n                    disabled={\r\n                      selectedRightCampaigns.length === 0 ||\r\n                      processingCampaigns ||\r\n                      isAddingCampaign ||\r\n                      removingCampaigns ||\r\n                      isRemovingCampaign\r\n                    }\r\n                    title=\"선택한 캠페인 제거\"\r\n                  >\r\n                    {removingCampaigns || isRemovingCampaign ? (\r\n                      <div className=\"w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                    ) : (\r\n                      <span>←</span>\r\n                    )}\r\n                  </button>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                <TitleWrap title=\"그룹 소속 캠페인목록\" totalCount={groupCampaignsData.length} />\r\n                  <div className=\"border rounded overflow-hidden\">\r\n                    <GroupCampaignList\r\n                      isLoading={isLoadingGroup}\r\n                      groupCampaigns={groupCampaignsData}\r\n                      toggleAllGroupCampaigns={toggleAllGroupCampaigns}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-end space-x-2 mt-6\">\r\n\r\n                <CommonButton\r\n                  onClick={onClose}\r\n                >\r\n                  닫기\r\n                </CommonButton>\r\n\r\n            </div>\r\n          </div>\r\n        }\r\n        type=\"custom\"\r\n        width=\"max-w-[1000px]\"\r\n        showButtons={false}\r\n      />\r\n      {showAlert && (\r\n        <CustomAlert\r\n          title={confirmRemove ? '캠페인 제거 확인' : '캠페인 추가 확인'}\r\n          isOpen={showAlert}\r\n          onClose={handleAlertConfirm}\r\n          onCancle={() => setShowAlert(false)}\r\n          message={\r\n            <div>\r\n              {alertMessage}\r\n              {!confirmRemove && createCampaignListTable(campaignIdsForPopup)}\r\n            </div>\r\n          }\r\n          type=\"custom\"\r\n          width=\"max-w-md\"\r\n          confirmDisabled={false} // 항상 확인 버튼 활성화\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CampaignAddPopup;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 13159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13165, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForCampaignGroupNameUpdate.tsx"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForCampaignGroupNameUpdate.ts\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { SuccessResponse } from '../types/typeForCampaignGroupForSideBar';\r\nimport { ApiError } from '../types/typeForCampaignGroup';\r\nimport { apiForUpdateCampaignGroupName } from '@/features/preferences/api/apiForCampaignGroup';\r\n\r\ninterface UpdateCampaignGroupNameParams {\r\n  group_id: number;\r\n  group_name: string;\r\n  tenant_id: number;\r\n}\r\n\r\nexport function useApiForCampaignGroupNameUpdate(\r\n  options?: UseMutationOptions<SuccessResponse, ApiError, UpdateCampaignGroupNameParams>\r\n) {\r\n  return useMutation({\r\n    mutationKey: ['campaignGroupNameUpdate'],\r\n    mutationFn: ({ group_id, group_name, tenant_id }: UpdateCampaignGroupNameParams) => \r\n      apiForUpdateCampaignGroupName(group_id, group_name, tenant_id),\r\n    onSuccess: (data: SuccessResponse, variables, context) => {\r\n      console.log('캠페인 그룹 이름 업데이트 성공:', {\r\n        code: data.result_code,\r\n        message: data.result_msg,\r\n      });\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: ApiError, variables: UpdateCampaignGroupNameParams, context: unknown) => {\r\n      console.error('캠페인 그룹 이름 업데이트 실패:', error);\r\n      // 필요한 경우 여기에 toast 메시지 추가\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,yEAAyE;;;;AAKzE;AAJA;;;;AAYO,SAAS,iCACd,OAAsF;;IAEtF,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAA0B;QACxC,UAAU;4DAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAiC,GAC7E,CAAA,GAAA,+JAAA,CAAA,gCAA6B,AAAD,EAAE,UAAU,YAAY;;QACtD,SAAS;4DAAE,CAAC,MAAuB,WAAW;gBAC5C,QAAQ,GAAG,CAAC,sBAAsB;oBAChC,MAAM,KAAK,WAAW;oBACtB,SAAS,KAAK,UAAU;gBAC1B;gBACA,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;4DAAE,CAAC,OAAiB,WAA0C;gBACnE,QAAQ,KAAK,CAAC,sBAAsB;gBACpC,0BAA0B;gBAC1B,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GApBgB;;QAGP,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 13209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13215, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/dialog/IDialogForUpdateCampaignGroupName.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { FC, useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { useApiForCampaignGroupNameUpdate } from \"@/features/campaignManager/hooks/useApiForCampaignGroupNameUpdate\";\r\nimport { toast } from \"react-toastify\";\r\nimport CustomAlert from \"@/components/shared/layout/CustomAlert\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\ninterface IDialogForUpdateCampaignGroupNameProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  groupId: number;\r\n  tenantId: number;\r\n  currentGroupName: string;\r\n  onSuccess?: () => void;\r\n}\r\n\r\nconst IDialogForUpdateCampaignGroupName: FC<IDialogForUpdateCampaignGroupNameProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  groupId,\r\n  tenantId,\r\n  currentGroupName,\r\n  onSuccess,\r\n}) => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setGroupName(currentGroupName);\r\n      setError(\"\");\r\n    }\r\n  }, [isOpen, currentGroupName]);\r\n\r\n  const { mutate: updateGroupName, isPending } = useApiForCampaignGroupNameUpdate({\r\n    onSuccess: () => {\r\n      toast.success(\"캠페인 그룹 이름이 변경되었습니다.\");\r\n      onClose();\r\n      onSuccess?.();\r\n    },\r\n    onError: (error) => {\r\n      console.error(\"캠페인 그룹 이름 변경 실패:\", error);\r\n      toast.error(\"캠페인 그룹 이름 변경에 실패했습니다.\");\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // 유효성 검사\r\n    if (!groupName.trim()) {\r\n      setError(\"그룹 이름을 입력해주세요.\");\r\n      return;\r\n    }\r\n\r\n    // 이름이 변경되지 않은 경우\r\n    if (groupName === currentGroupName) {\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    // API 호출\r\n    updateGroupName({\r\n      group_id: groupId,\r\n      group_name: groupName,\r\n      tenant_id: tenantId,\r\n    });\r\n  };\r\n\r\n  const content = (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <p className=\"text-sm text-gray-600 mb-4\">\r\n        새로운 캠페인 그룹 이름을 입력해주세요.\r\n      </p>\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"groupName\">그룹 이름</Label>\r\n        <Input\r\n          id=\"groupName\"\r\n          value={groupName}\r\n          onChange={(e) => {\r\n            setGroupName(e.target.value);\r\n            setError(\"\");\r\n          }}\r\n          placeholder=\"그룹 이름을 입력하세요\"\r\n          className={error ? \"border-red-500\" : \"\"}\r\n          disabled={isPending}\r\n        />\r\n        {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n      </div>\r\n      <div className=\"flex justify-end space-x-2 mt-6\">\r\n        <CommonButton\r\n          type=\"button\"\r\n          variant=\"outline\"\r\n          onClick={onClose}\r\n          disabled={isPending}\r\n        >\r\n          취소\r\n        </CommonButton>\r\n        <CommonButton type=\"submit\" disabled={isPending} >\r\n          {isPending ? \"저장 중...\" : \"저장\"}\r\n        </CommonButton>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <CustomAlert\r\n      isOpen={isOpen}\r\n      title=\"캠페인 그룹 이름 변경\"\r\n      message={content}\r\n      onClose={onClose}\r\n      onCancle={onClose}\r\n      type=\"1\"\r\n      showButtons={false} // 내부 커스텀 버튼 사용\r\n    />\r\n  );\r\n};\r\n\r\nexport default IDialogForUpdateCampaignGroupName;\r\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AATA;;;;;;;;AAmBA,MAAM,oCAAgF,CAAC,EACrF,MAAM,EACN,OAAO,EACP,OAAO,EACP,QAAQ,EACR,gBAAgB,EAChB,SAAS,EACV;;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uDAAE;YACR,IAAI,QAAQ;gBACV,aAAa;gBACb,SAAS;YACX;QACF;sDAAG;QAAC;QAAQ;KAAiB;IAE7B,MAAM,EAAE,QAAQ,eAAe,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,mLAAA,CAAA,mCAAgC,AAAD,EAAE;QAC9E,SAAS;kFAAE;gBACT,sJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;gBACd;gBACA;YACF;;QACA,OAAO;kFAAE,CAAC;gBACR,QAAQ,KAAK,CAAC,oBAAoB;gBAClC,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACd;;IACF;IAEA,MAAM,eAAe,CAAC;QACpB,EAAE,cAAc;QAEhB,SAAS;QACT,IAAI,CAAC,UAAU,IAAI,IAAI;YACrB,SAAS;YACT;QACF;QAEA,iBAAiB;QACjB,IAAI,cAAc,kBAAkB;YAClC;YACA;QACF;QAEA,SAAS;QACT,gBAAgB;YACd,UAAU;YACV,YAAY;YACZ,WAAW;QACb;IACF;IAEA,MAAM,wBACJ,6LAAC;QAAK,UAAU;QAAc,WAAU;;0BACtC,6LAAC;gBAAE,WAAU;0BAA6B;;;;;;0BAG1C,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,oIAAA,CAAA,QAAK;wBAAC,SAAQ;kCAAY;;;;;;kCAC3B,6LAAC,oIAAA,CAAA,QAAK;wBACJ,IAAG;wBACH,OAAO;wBACP,UAAU,CAAC;4BACT,aAAa,EAAE,MAAM,CAAC,KAAK;4BAC3B,SAAS;wBACX;wBACA,aAAY;wBACZ,WAAW,QAAQ,mBAAmB;wBACtC,UAAU;;;;;;oBAEX,uBAAS,6LAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;0BAEjD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,wJAAA,CAAA,eAAY;wBACX,MAAK;wBACL,SAAQ;wBACR,SAAS;wBACT,UAAU;kCACX;;;;;;kCAGD,6LAAC,wJAAA,CAAA,eAAY;wBAAC,MAAK;wBAAS,UAAU;kCACnC,YAAY,YAAY;;;;;;;;;;;;;;;;;;IAMjC,qBACE,6LAAC,wJAAA,CAAA,UAAW;QACV,QAAQ;QACR,OAAM;QACN,SAAS;QACT,SAAS;QACT,UAAU;QACV,MAAK;QACL,aAAa;;;;;;AAGnB;GApGM;;QAkB2C,mLAAA,CAAA,mCAAgC;;;KAlB3E;uCAsGS"}},
    {"offset": {"line": 13398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13404, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForDeleteCampaignGroup.tsx"],"sourcesContent":["// src/features/campaignManager/hooks/useApiForDeleteCampaignGroup.ts\r\nimport { useMutation, UseMutationResult, useQueryClient } from '@tanstack/react-query';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { SuccessResponse } from '@/features/campaignManager/types/typeForCampaignGroupForSideBar';\r\nimport { apiForDeleteCampaignGroup } from '@/features/preferences/api/apiForCampaignGroup';\r\n\r\nexport interface DeleteCampaignGroupError {\r\n  message: string;\r\n  status?: number;\r\n}\r\n\r\nexport function useApiForDeleteCampaignGroup(\r\n  options?: UseMutationOptions<\r\n    SuccessResponse, \r\n    DeleteCampaignGroupError, \r\n    number\r\n  >\r\n): UseMutationResult<SuccessResponse, DeleteCampaignGroupError, number, unknown> {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation<SuccessResponse, DeleteCampaignGroupError, number>({\r\n    mutationKey: ['deleteCampaignGroup'],\r\n    mutationFn: (group_id: number) => apiForDeleteCampaignGroup(group_id),\r\n    onSuccess: (data, variables, context) => {\r\n      // 캐시 무효화 - 캠페인 그룹 관련 쿼리 모두 무효화\r\n      queryClient.invalidateQueries({\r\n        queryKey: ['sideMenuTreeData']\r\n      });\r\n      \r\n      console.log('✅ 캠페인 그룹 삭제 성공:', data);\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error, variables, context) => {\r\n      console.error('❌ 캠페인 그룹 삭제 실패:', error);\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,qEAAqE;;;;AAIrE;AAHA;AAAA;;;;AAUO,SAAS,6BACd,OAIC;;IAED,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAqD;QACpE,aAAa;YAAC;SAAsB;QACpC,UAAU;wDAAE,CAAC,WAAqB,CAAA,GAAA,+JAAA,CAAA,4BAAyB,AAAD,EAAE;;QAC5D,SAAS;wDAAE,CAAC,MAAM,WAAW;gBAC3B,+BAA+B;gBAC/B,YAAY,iBAAiB,CAAC;oBAC5B,UAAU;wBAAC;qBAAmB;gBAChC;gBAEA,QAAQ,GAAG,CAAC,mBAAmB;gBAC/B,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;wDAAE,CAAC,OAAO,WAAW;gBAC1B,QAAQ,KAAK,CAAC,mBAAmB;gBACjC,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GA1BgB;;QAOM,yLAAA,CAAA,iBAAc;QAE3B,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 13453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13459, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenus/IContextMenuForCampaignForCampaignGroup.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  ContextMenu,\r\n  ContextMenuContent,\r\n  ContextMenuItem,\r\n  ContextMenuSub,\r\n  ContextMenuSubContent,\r\n  ContextMenuSubTrigger,\r\n  ContextMenuTrigger,\r\n  ContextMenuSeparator,\r\n} from \"@/components/ui/context-menu\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { useSideMenuCampaignGroupTabStore } from \"@/store/storeForSideMenuCampaignGroupTab\";\r\nimport { useAvailableMenuStore } from \"@/store/useAvailableMenuStore\"; // 권한 관리 스토어 추가\r\nimport { Check } from \"lucide-react\";\r\nimport { useState, useRef } from \"react\";\r\nimport BlackListCountPopup from '@/features/campaignManager/components/popups/BlackListCountPopup';\r\nimport { toast } from 'react-toastify';\r\nimport { useApiForCampaignBlacklistCount } from \"@/features/listManager/hooks/useApiForCampaignBlacklistCount\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport Image from \"next/image\";\r\nimport useApiForCampaignListDelete from \"@/features/listManager/hooks/useApiForCampaignListDelete\";\r\nimport { useApiForCampaignStatusUpdate } from \"@/features/campaignManager/hooks/useApiForCampaignStatusUpdate\";\r\nimport IDialogButtonForCampaingDelete from \"../dialog/IDialogButtonForCampaingDelete\";\r\nimport React from \"react\";\r\nimport { useCampainManagerStore } from \"@/store/campainManagerStore\";\r\nimport { useApiForMain } from \"@/features/auth/hooks/useApiForMain\";\r\nimport { useMainStore } from \"@/store/mainStore\";\r\nimport { useAuthStore } from \"@/store/authStore\";\r\n\r\nexport type CampaignStatus = 'started' | 'pending' | 'stopped';\r\n\r\nexport const getStatusIcon = (status?: string) => {\r\n  switch (status) {\r\n    case 'started':\r\n      return '/sidebar-menu/tree_play.svg';\r\n    case 'pending':\r\n      return '/sidebar-menu/tree_pause.svg';\r\n    case 'stopped':\r\n      return '/sidebar-menu/tree_stop.svg';\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\n// 인터페이스 정의\r\ninterface ContextMenuForTreeNodeProps {\r\n  children: React.ReactNode;\r\n  item: {\r\n    id: any;\r\n    label: string;\r\n    type: any;\r\n    status: CampaignStatus;\r\n  };\r\n  onEdit?: () => void;\r\n  onMonitor?: () => void;\r\n  onHandleCampaignCopy?: () => void;\r\n  tenantIdForCampaignTab: any;\r\n}\r\n\r\nexport const getStatusFromFlag = (flag?: number): CampaignStatus => {\r\n  switch (flag) {\r\n    case 1: return 'started';\r\n    case 2: return 'pending';\r\n    case 3: return 'stopped';\r\n    default: return 'stopped';\r\n  }\r\n};\r\n\r\nexport function IContextMenuForCampaignForCampaignGroup({\r\n  children,\r\n  item,\r\n  onEdit,\r\n  onMonitor,\r\n  onHandleCampaignCopy,\r\n  tenantIdForCampaignTab,\r\n}: ContextMenuForTreeNodeProps) {\r\n  const isFolder = item.type === \"folder\";\r\n  const { simulateHeaderMenuClick, setCampaignIdForUpdateFromSideMenu, setCampaignIdForCopyCampaign, addTab, addMultiTab } = useTabStore();\r\n\r\n  // Zustand 스토어에서 updateCampaignStatus 함수 가져오기\r\n  const { updateCampaignStatus, refetchTreeDataForCampaignGroupTab } = useSideMenuCampaignGroupTabStore();\r\n\r\n  // 권한 관리 스토어에서 사용 가능한 메뉴 ID 가져오기\r\n  const availableMenuIds = useAvailableMenuStore(\r\n    (state) => state.availableMenuIdsForCampaignGroupTabCampaign\r\n  );\r\n\r\n  const [isBlacklistPopupOpen, setIsBlacklistPopupOpen] = useState(false);\r\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n  const [currentStatus, setCurrentStatus] = useState<CampaignStatus>(item.status);\r\n  const [blackListCount, setBlackListCount] = useState<number>(0);\r\n  const preventCloseRef = useRef(false);\r\n\r\n  const { tenant_id, role_id, session_key } = useAuthStore();\r\n\r\n  const { tenants\r\n    , setCampaigns\r\n    , selectedCampaign\r\n    , setSelectedCampaign\r\n  } = useMainStore();\r\n\r\n  const { mutate: fetchMain } = useApiForMain({\r\n    onSuccess: (data) => {\r\n      setCampaigns(data.result_data);\r\n      // if( tenant_id === 0){\r\n      //   setCampaigns(data.result_data);\r\n      // }else{\r\n      //   setCampaigns(data.result_data.filter(data=>data.tenant_id === tenant_id));\r\n      // }\r\n      setSelectedCampaign(data.result_data.filter((campaign) => campaign.campaign_id === selectedCampaign?.campaign_id)[0]);\r\n    }\r\n  });\r\n\r\n  // 상태 관련 정보\r\n  const statusInfo = {\r\n    started: { label: \"시작\", color: \"#22c55e\" },\r\n    pending: { label: \"멈춤\", color: \"#eab308\" },\r\n    stopped: { label: \"중지\", color: \"#ef4444\" },\r\n  };\r\n\r\n  const updateCampaignStatusMutation = useApiForCampaignStatusUpdate({\r\n    onSuccess: (data) => {\r\n      // toast.success(\"캠페인 상태가 변경되었습니다22.\");\r\n      preventCloseRef.current = true;\r\n      \r\n      console.log(\"캠페인 상태 업데이트\");\r\n    \r\n      fetchMain({\r\n        session_key: session_key,\r\n        tenant_id: tenant_id\r\n      });\r\n\r\n    },\r\n    onError: (error) => {\r\n      toast.error(error.message || \"상태 변경 중 오류가 발생했습니다.\");\r\n    },\r\n  });\r\n\r\n  const { mutate: deleteCampaignList } = useApiForCampaignListDelete({\r\n    // onSuccess: (data) => {\r\n    //   toast.success(\".\");\r\n    // },\r\n    // onError: (error) => {\r\n    //   toast.error(error.message || \"리스트 삭제 중 오류가 발생했습니다.\");\r\n    // },\r\n  });\r\n\r\n  const handleCampaignListDelete = (campaignId: any) => {\r\n    if (currentStatus !== 'stopped') {\r\n      toast.error(\"캠페인이 중지 상태일 때만 리스트를 삭제할 수 있습니다.\");\r\n      return;\r\n    }\r\n    deleteCampaignList(campaignId);\r\n  };\r\n\r\n  const handleEditMenuClick = () => {\r\n    if (onEdit) {\r\n      onEdit();\r\n      return;\r\n    }\r\n\r\n    simulateHeaderMenuClick(2);\r\n    setCampaignIdForUpdateFromSideMenu(item.id);\r\n  };\r\n\r\n  const handleProgressInfoClick = (campaignId: any, campaignName: string) => {\r\n    const uniqueKey = `progress-info-${campaignId}-${Date.now()}`;\r\n\r\n    addMultiTab({\r\n      id: 21,\r\n      uniqueKey: uniqueKey,\r\n      title: `캠페인 진행정보 - ${campaignName}`,\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n      campaignId: campaignId\r\n    });\r\n  };\r\n\r\n  const handleRebroadcastClick = (campaignId: any) => {\r\n    setCampaignIdForUpdateFromSideMenu(campaignId);\r\n    addTab({\r\n      id: 20,\r\n      uniqueKey: '20',\r\n      title: '재발신 설정',\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n    });\r\n  };\r\n\r\n  const handleMonitorClick = (tenantIdForCampaignTab:any , campaignId: any, campaignName: string) => {\r\n    // if (onMonitor) {\r\n    //   onMonitor();\r\n    //   return;\r\n    // }\r\n\r\n    console.log(\"캠페인 그룹에서 상담원 상태 모니터 클릭 했을때 tenantId : \", tenantIdForCampaignTab);\r\n    \r\n\r\n    const uniqueKey = `monitor-${Date.now()}`;\r\n\r\n    addMultiTab({\r\n      id: 22,\r\n      uniqueKey: uniqueKey,\r\n      title: `상담사 상태 모니터 - ${campaignName}`,\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n      campaignId: campaignId,\r\n      params: {\r\n        campaignId: campaignId,\r\n        campaignName: campaignName,\r\n        tenantId: tenantIdForCampaignTab,\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCampaignCopy = () => {\r\n    if (onHandleCampaignCopy) {\r\n      onHandleCampaignCopy();\r\n      return;\r\n    }\r\n\r\n    console.log(`캠페인 복사: ${item.label} (ID: ${item.id})`);\r\n    setCampaignIdForUpdateFromSideMenu(item.id);\r\n    setCampaignIdForCopyCampaign(item.id);\r\n    addTab({\r\n      id: 130,\r\n      uniqueKey: \"130\",\r\n      title: \"캠페인 복사\",\r\n      icon: \"\",\r\n      href: \"\",\r\n      content: null,\r\n    });\r\n  };\r\n\r\n  const onCampaignDelete = (status: string) => {\r\n    if (status !== 'stopped') {\r\n      toast.error(\"캠페인이 중지 상태일 때만 삭제할 수 있습니다.\");\r\n      return;\r\n    }\r\n\r\n    // 다이얼로그 열기\r\n    setIsDeleteDialogOpen(true);\r\n  };\r\n\r\n  const getStatusNumber = (status: CampaignStatus): number => {\r\n    switch (status) {\r\n      case 'started': return 1;\r\n      case 'pending': return 2;\r\n      case 'stopped': return 3;\r\n      default: return 0;\r\n    }\r\n  };\r\n\r\n  const handleStartClick = async (status: CampaignStatus) => {\r\n    if (currentStatus === status || updateCampaignStatusMutation.isPending) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      preventCloseRef.current = true;\r\n\r\n      // 상태 번호 얻기\r\n      const statusNumber = getStatusNumber(status);\r\n\r\n      // API 호출\r\n      await updateCampaignStatusMutation.mutateAsync({\r\n        campaign_id: Number(item.id),\r\n        campaign_status: statusNumber\r\n      });\r\n\r\n      // 로컬 상태 업데이트\r\n      setCurrentStatus(status);\r\n\r\n      // 트리 데이터의 상태도 업데이트 (API 호출이 성공한 후)\r\n      updateCampaignStatus(item.id, statusNumber);\r\n\r\n      // 전체 트리 데이터 다시 가져오기 (렌더링 강제)\r\n      await refetchTreeDataForCampaignGroupTab();\r\n\r\n    } catch (error) {\r\n      console.error('Error changing campaign status:', error);\r\n    }\r\n  };\r\n\r\n  // 캠페인 블랙리스트 건수 조회 API 호출\r\n  const { mutate: fetchCampaignBlacklistCount } = useApiForCampaignBlacklistCount({\r\n    onSuccess: (data) => {\r\n      setBlackListCount(data.result_data.blacklist_count);\r\n      setTimeout(() => {\r\n        setIsBlacklistPopupOpen(true);\r\n      }, 100);\r\n    }\r\n  });\r\n\r\n  // 캠페인 블랙리스트 건수 조회 클릭 이벤트\r\n  const handleBlacklistCountCheckClick = () => {\r\n    fetchCampaignBlacklistCount(Number(item.id));\r\n  };\r\n\r\n  // 메뉴 아이템 정의 (JSON의 SGC 값 기준)\r\n  const menuItems = [\r\n    // 첫 번째 그룹\r\n    {\r\n      id: 46,\r\n      group: 1,\r\n      key: \"edit-campaign\",\r\n      label: \"캠페인 수정\",\r\n      action: handleEditMenuClick\r\n    },\r\n    {\r\n      id: 47,\r\n      group: 1,\r\n      key: \"start-division\",\r\n      label: \"시작구분\",\r\n      isSubmenu: true,\r\n      subItems: [\r\n        { id: 48, key: \"start\", label: \"시작\", status: \"started\" },\r\n        { id: 49, key: \"pause\", label: \"멈춤\", status: \"pending\" },\r\n        { id: 50, key: \"stop\", label: \"중지\", status: \"stopped\" }\r\n      ],\r\n      render: () => (\r\n        <ContextMenuSub>\r\n          <ContextMenuSubTrigger onPointerDown={() => { preventCloseRef.current = false; }}>\r\n            <span className=\"flex items-center\">\r\n              시작구분:\r\n              <span className=\"ml-1 flex items-center\">\r\n                <div className=\"w-4 h-4 mr-1\">\r\n                  <Image\r\n                    src={getStatusIcon(currentStatus) || ''}\r\n                    alt={currentStatus}\r\n                    width={16}\r\n                    height={16}\r\n                  />\r\n                </div>\r\n                {statusInfo[currentStatus].label}\r\n              </span>\r\n            </span>\r\n          </ContextMenuSubTrigger>\r\n\r\n          <ContextMenuSubContent\r\n            className=\"min-w-[110px] p-1\"\r\n            onPointerDownOutside={(e) => {\r\n              if (preventCloseRef.current) {\r\n                e.preventDefault();\r\n                preventCloseRef.current = false;\r\n              }\r\n            }}\r\n          >\r\n            {(Object.keys(statusInfo) as Array<CampaignStatus>).map((status) => (\r\n              <ContextMenuItem\r\n                key={status}\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  handleStartClick(status);\r\n                  preventCloseRef.current = true;\r\n                }}\r\n                className={cn(\r\n                  \"flex items-center justify-between text-sm px-2 py-1.5\",\r\n                  currentStatus === status ? \"bg-gray-50\" : \"\",\r\n                  updateCampaignStatusMutation.isPending ? \"opacity-70\" : \"\"\r\n                )}\r\n                disabled={updateCampaignStatusMutation.isPending}\r\n              >\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-4 h-4 mr-2\">\r\n                    <Image\r\n                      src={getStatusIcon(status) || ''}\r\n                      alt={status}\r\n                      width={16}\r\n                      height={16}\r\n                    />\r\n                  </div>\r\n                  <span>{statusInfo[status].label}</span>\r\n                </div>\r\n\r\n                {currentStatus === status && (\r\n                  <Check className=\"h-3 w-3 text-green-500\" />\r\n                )}\r\n              </ContextMenuItem>\r\n            ))}\r\n          </ContextMenuSubContent>\r\n        </ContextMenuSub>\r\n      )\r\n    },\r\n    {\r\n      id: 51,\r\n      group: 1,\r\n      key: \"progress-info\",\r\n      label: \"캠페인 진행정보\",\r\n      action: () => handleProgressInfoClick(item.id, item.label)\r\n    },\r\n\r\n    // 두 번째 그룹\r\n    {\r\n      id: 52,\r\n      group: 2,\r\n      key: \"rebroadcast\",\r\n      label: \"재발신\",\r\n      action: () => handleRebroadcastClick(item.id)\r\n    },\r\n\r\n    // 세 번째 그룹\r\n    {\r\n      id: 53,\r\n      group: 3,\r\n      key: \"copy-campaign\",\r\n      label: \"캠페인 복사\",\r\n      action: handleCampaignCopy\r\n    },\r\n    {\r\n      id: 54,\r\n      group: 3,\r\n      key: \"delete-campaign\",\r\n      label: \"캠페인 삭제\",\r\n      action: () => onCampaignDelete(currentStatus),\r\n      className: \"text-red-500\",\r\n      condition: !isFolder\r\n    },\r\n\r\n    // 네 번째 그룹\r\n    {\r\n      id: 55,\r\n      group: 4,\r\n      key: \"delete-campaign-list\",\r\n      label: \"캠페인 리스트 삭제\",\r\n      action: () => handleCampaignListDelete(item.id),\r\n      condition: currentStatus === 'stopped'\r\n    },\r\n    {\r\n      id: 56,\r\n      group: 4,\r\n      key: \"monitor\",\r\n      label: \"상담사 상태 모니터22\",\r\n      action: () => handleMonitorClick(tenantIdForCampaignTab, item.id, item.label)\r\n    },\r\n    {\r\n      id: 57,\r\n      group: 4,\r\n      key: \"blacklist-count\",\r\n      label: \"블랙리스트 건수 조회\",\r\n      action: handleBlacklistCountCheckClick\r\n    }\r\n  ];\r\n\r\n  // 권한에 따라 메뉴 항목 필터링\r\n  const visibleMenuItems = availableMenuIds?.length > 0\r\n    ? menuItems.filter(item =>\r\n      availableMenuIds.includes(item.id) &&\r\n      (item.condition === undefined || item.condition)\r\n    )\r\n    : [];\r\n\r\n  // 표시할 메뉴 항목이 없으면 기본 컨텍스트 메뉴만 표시\r\n  if (visibleMenuItems.length === 0) {\r\n    return (\r\n      <ContextMenu>\r\n        <ContextMenuTrigger asChild>{children}</ContextMenuTrigger>\r\n        <ContextMenuContent className=\"w-[150px]\">\r\n          <ContextMenuItem disabled>\r\n            권한이 없습니다\r\n          </ContextMenuItem>\r\n        </ContextMenuContent>\r\n      </ContextMenu>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ContextMenu>\r\n        <ContextMenuTrigger asChild>{children}</ContextMenuTrigger>\r\n        <ContextMenuContent className=\"w-[150px]\">\r\n          {visibleMenuItems.map((item, index, arr) => {\r\n            // 현재 아이템과 이전 아이템이 다른 그룹인 경우 구분선 추가\r\n            const prevItem = index > 0 ? arr[index - 1] : null;\r\n            const showSeparator = prevItem && prevItem.group !== item.group;\r\n\r\n            return (\r\n              <React.Fragment key={item.key}>\r\n                {showSeparator && <ContextMenuSeparator className=\"my-1\" />}\r\n\r\n                {item.isSubmenu ? (\r\n                  item.render()\r\n                ) : (\r\n                  <ContextMenuItem\r\n                    onClick={item.action}\r\n                    className={item.className}\r\n                  >\r\n                    {item.label}\r\n                  </ContextMenuItem>\r\n                )}\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </ContextMenuContent>\r\n      </ContextMenu>\r\n\r\n      {/* 블랙리스트 팝업 */}\r\n      {isBlacklistPopupOpen && (\r\n        <BlackListCountPopup\r\n          campaignId={item.id}\r\n          blackListCount={blackListCount}\r\n          isOpen={isBlacklistPopupOpen}\r\n          onConfirm={() => setIsBlacklistPopupOpen(false)}\r\n          onCancel={() => setIsBlacklistPopupOpen(false)}\r\n        />\r\n      )}\r\n\r\n      {/* 캠페인 삭제 다이얼로그 */}\r\n      {isDeleteDialogOpen && (\r\n        <IDialogButtonForCampaingDelete\r\n          isOpen={isDeleteDialogOpen}\r\n          onOpenChange={(open) => setIsDeleteDialogOpen(open)}\r\n          campaignId={item.id}\r\n          campaignName={item.label}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}"],"names":[],"mappings":";;;;;;AAEA;AAUA;AACA;AACA,+OAAuE,eAAe;AAEtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAdA;;;AAfA;;;;;;;;;;;;;;;;;;;AAiCO,MAAM,gBAAgB,CAAC;IAC5B,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAiBO,MAAM,oBAAoB,CAAC;IAChC,OAAQ;QACN,KAAK;YAAG,OAAO;QACf,KAAK;YAAG,OAAO;QACf,KAAK;YAAG,OAAO;QACf;YAAS,OAAO;IAClB;AACF;AAEO,SAAS,wCAAwC,EACtD,QAAQ,EACR,IAAI,EACJ,MAAM,EACN,SAAS,EACT,oBAAoB,EACpB,sBAAsB,EACM;;IAC5B,MAAM,WAAW,KAAK,IAAI,KAAK;IAC/B,MAAM,EAAE,uBAAuB,EAAE,kCAAkC,EAAE,4BAA4B,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;IAErI,6CAA6C;IAC7C,MAAM,EAAE,oBAAoB,EAAE,kCAAkC,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,mCAAgC,AAAD;IAEpG,gCAAgC;IAChC,MAAM,mBAAmB,CAAA,GAAA,wIAAA,CAAA,wBAAqB,AAAD;2FAC3C,CAAC,QAAU,MAAM,2CAA2C;;IAG9D,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB,KAAK,MAAM;IAC9E,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC7D,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAE/B,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAEvD,MAAM,EAAE,OAAO,EACX,YAAY,EACZ,gBAAgB,EAChB,mBAAmB,EACtB,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAEf,MAAM,EAAE,QAAQ,SAAS,EAAE,GAAG,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE;QAC1C,SAAS;qEAAE,CAAC;gBACV,aAAa,KAAK,WAAW;gBAC7B,wBAAwB;gBACxB,oCAAoC;gBACpC,SAAS;gBACT,+EAA+E;gBAC/E,IAAI;gBACJ,oBAAoB,KAAK,WAAW,CAAC,MAAM;6EAAC,CAAC,WAAa,SAAS,WAAW,KAAK,kBAAkB;2EAAY,CAAC,EAAE;YACtH;;IACF;IAEA,WAAW;IACX,MAAM,aAAa;QACjB,SAAS;YAAE,OAAO;YAAM,OAAO;QAAU;QACzC,SAAS;YAAE,OAAO;YAAM,OAAO;QAAU;QACzC,SAAS;YAAE,OAAO;YAAM,OAAO;QAAU;IAC3C;IAEA,MAAM,+BAA+B,CAAA,GAAA,+KAAA,CAAA,gCAA6B,AAAD,EAAE;QACjE,SAAS;mHAAE,CAAC;gBACV,uCAAuC;gBACvC,gBAAgB,OAAO,GAAG;gBAE1B,QAAQ,GAAG,CAAC;gBAEZ,UAAU;oBACR,aAAa;oBACb,WAAW;gBACb;YAEF;;QACA,OAAO;mHAAE,CAAC;gBACR,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO,IAAI;YAC/B;;IACF;IAEA,MAAM,EAAE,QAAQ,kBAAkB,EAAE,GAAG,CAAA,GAAA,yKAAA,CAAA,UAA2B,AAAD,EAAE;IAOnE;IAEA,MAAM,2BAA2B,CAAC;QAChC,IAAI,kBAAkB,WAAW;YAC/B,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ;QACF;QACA,mBAAmB;IACrB;IAEA,MAAM,sBAAsB;QAC1B,IAAI,QAAQ;YACV;YACA;QACF;QAEA,wBAAwB;QACxB,mCAAmC,KAAK,EAAE;IAC5C;IAEA,MAAM,0BAA0B,CAAC,YAAiB;QAChD,MAAM,YAAY,CAAC,cAAc,EAAE,WAAW,CAAC,EAAE,KAAK,GAAG,IAAI;QAE7D,YAAY;YACV,IAAI;YACJ,WAAW;YACX,OAAO,CAAC,WAAW,EAAE,cAAc;YACnC,MAAM;YACN,MAAM;YACN,SAAS;YACT,YAAY;QACd;IACF;IAEA,MAAM,yBAAyB,CAAC;QAC9B,mCAAmC;QACnC,OAAO;YACL,IAAI;YACJ,WAAW;YACX,OAAO;YACP,MAAM;YACN,MAAM;YACN,SAAS;QACX;IACF;IAEA,MAAM,qBAAqB,CAAC,wBAA6B,YAAiB;QACxE,mBAAmB;QACnB,iBAAiB;QACjB,YAAY;QACZ,IAAI;QAEJ,QAAQ,GAAG,CAAC,0CAA0C;QAGtD,MAAM,YAAY,CAAC,QAAQ,EAAE,KAAK,GAAG,IAAI;QAEzC,YAAY;YACV,IAAI;YACJ,WAAW;YACX,OAAO,CAAC,aAAa,EAAE,cAAc;YACrC,MAAM;YACN,MAAM;YACN,SAAS;YACT,YAAY;YACZ,QAAQ;gBACN,YAAY;gBACZ,cAAc;gBACd,UAAU;YACZ;QACF;IACF;IAEA,MAAM,qBAAqB;QACzB,IAAI,sBAAsB;YACxB;YACA;QACF;QAEA,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACpD,mCAAmC,KAAK,EAAE;QAC1C,6BAA6B,KAAK,EAAE;QACpC,OAAO;YACL,IAAI;YACJ,WAAW;YACX,OAAO;YACP,MAAM;YACN,MAAM;YACN,SAAS;QACX;IACF;IAEA,MAAM,mBAAmB,CAAC;QACxB,IAAI,WAAW,WAAW;YACxB,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ;QACF;QAEA,WAAW;QACX,sBAAsB;IACxB;IAEA,MAAM,kBAAkB,CAAC;QACvB,OAAQ;YACN,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAW,OAAO;YACvB;gBAAS,OAAO;QAClB;IACF;IAEA,MAAM,mBAAmB,OAAO;QAC9B,IAAI,kBAAkB,UAAU,6BAA6B,SAAS,EAAE;YACtE;QACF;QAEA,IAAI;YACF,gBAAgB,OAAO,GAAG;YAE1B,WAAW;YACX,MAAM,eAAe,gBAAgB;YAErC,SAAS;YACT,MAAM,6BAA6B,WAAW,CAAC;gBAC7C,aAAa,OAAO,KAAK,EAAE;gBAC3B,iBAAiB;YACnB;YAEA,aAAa;YACb,iBAAiB;YAEjB,mCAAmC;YACnC,qBAAqB,KAAK,EAAE,EAAE;YAE9B,6BAA6B;YAC7B,MAAM;QAER,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;QACnD;IACF;IAEA,yBAAyB;IACzB,MAAM,EAAE,QAAQ,2BAA2B,EAAE,GAAG,CAAA,GAAA,6KAAA,CAAA,kCAA+B,AAAD,EAAE;QAC9E,SAAS;uFAAE,CAAC;gBACV,kBAAkB,KAAK,WAAW,CAAC,eAAe;gBAClD;+FAAW;wBACT,wBAAwB;oBAC1B;8FAAG;YACL;;IACF;IAEA,yBAAyB;IACzB,MAAM,iCAAiC;QACrC,4BAA4B,OAAO,KAAK,EAAE;IAC5C;IAEA,6BAA6B;IAC7B,MAAM,YAAY;QAChB,UAAU;QACV;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ;QACV;QACA;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,WAAW;YACX,UAAU;gBACR;oBAAE,IAAI;oBAAI,KAAK;oBAAS,OAAO;oBAAM,QAAQ;gBAAU;gBACvD;oBAAE,IAAI;oBAAI,KAAK;oBAAS,OAAO;oBAAM,QAAQ;gBAAU;gBACvD;oBAAE,IAAI;oBAAI,KAAK;oBAAQ,OAAO;oBAAM,QAAQ;gBAAU;aACvD;YACD,QAAQ,kBACN,6LAAC,8IAAA,CAAA,iBAAc;;sCACb,6LAAC,8IAAA,CAAA,wBAAqB;4BAAC,eAAe;gCAAQ,gBAAgB,OAAO,GAAG;4BAAO;sCAC7E,cAAA,6LAAC;gCAAK,WAAU;;oCAAoB;kDAElC,6LAAC;wCAAK,WAAU;;0DACd,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;oDACJ,KAAK,cAAc,kBAAkB;oDACrC,KAAK;oDACL,OAAO;oDACP,QAAQ;;;;;;;;;;;4CAGX,UAAU,CAAC,cAAc,CAAC,KAAK;;;;;;;;;;;;;;;;;;sCAKtC,6LAAC,8IAAA,CAAA,wBAAqB;4BACpB,WAAU;4BACV,sBAAsB,CAAC;gCACrB,IAAI,gBAAgB,OAAO,EAAE;oCAC3B,EAAE,cAAc;oCAChB,gBAAgB,OAAO,GAAG;gCAC5B;4BACF;sCAEC,AAAC,OAAO,IAAI,CAAC,YAAsC,GAAG,CAAC,CAAC,uBACvD,6LAAC,8IAAA,CAAA,kBAAe;oCAEd,SAAS,CAAC;wCACR,EAAE,eAAe;wCACjB,iBAAiB;wCACjB,gBAAgB,OAAO,GAAG;oCAC5B;oCACA,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,yDACA,kBAAkB,SAAS,eAAe,IAC1C,6BAA6B,SAAS,GAAG,eAAe;oCAE1D,UAAU,6BAA6B,SAAS;;sDAEhD,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;8DACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;wDACJ,KAAK,cAAc,WAAW;wDAC9B,KAAK;wDACL,OAAO;wDACP,QAAQ;;;;;;;;;;;8DAGZ,6LAAC;8DAAM,UAAU,CAAC,OAAO,CAAC,KAAK;;;;;;;;;;;;wCAGhC,kBAAkB,wBACjB,6LAAC,uMAAA,CAAA,QAAK;4CAAC,WAAU;;;;;;;mCA1Bd;;;;;;;;;;;;;;;;QAiCjB;QACA;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ,IAAM,wBAAwB,KAAK,EAAE,EAAE,KAAK,KAAK;QAC3D;QAEA,UAAU;QACV;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ,IAAM,uBAAuB,KAAK,EAAE;QAC9C;QAEA,UAAU;QACV;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ;QACV;QACA;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ,IAAM,iBAAiB;YAC/B,WAAW;YACX,WAAW,CAAC;QACd;QAEA,UAAU;QACV;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ,IAAM,yBAAyB,KAAK,EAAE;YAC9C,WAAW,kBAAkB;QAC/B;QACA;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ,IAAM,mBAAmB,wBAAwB,KAAK,EAAE,EAAE,KAAK,KAAK;QAC9E;QACA;YACE,IAAI;YACJ,OAAO;YACP,KAAK;YACL,OAAO;YACP,QAAQ;QACV;KACD;IAED,mBAAmB;IACnB,MAAM,mBAAmB,kBAAkB,SAAS,IAChD,UAAU,MAAM,CAAC,CAAA,OACjB,iBAAiB,QAAQ,CAAC,KAAK,EAAE,KACjC,CAAC,KAAK,SAAS,KAAK,aAAa,KAAK,SAAS,KAE/C,EAAE;IAEN,gCAAgC;IAChC,IAAI,iBAAiB,MAAM,KAAK,GAAG;QACjC,qBACE,6LAAC,8IAAA,CAAA,cAAW;;8BACV,6LAAC,8IAAA,CAAA,qBAAkB;oBAAC,OAAO;8BAAE;;;;;;8BAC7B,6LAAC,8IAAA,CAAA,qBAAkB;oBAAC,WAAU;8BAC5B,cAAA,6LAAC,8IAAA,CAAA,kBAAe;wBAAC,QAAQ;kCAAC;;;;;;;;;;;;;;;;;IAMlC;IAEA,qBACE;;0BACE,6LAAC,8IAAA,CAAA,cAAW;;kCACV,6LAAC,8IAAA,CAAA,qBAAkB;wBAAC,OAAO;kCAAE;;;;;;kCAC7B,6LAAC,8IAAA,CAAA,qBAAkB;wBAAC,WAAU;kCAC3B,iBAAiB,GAAG,CAAC,CAAC,MAAM,OAAO;4BAClC,mCAAmC;4BACnC,MAAM,WAAW,QAAQ,IAAI,GAAG,CAAC,QAAQ,EAAE,GAAG;4BAC9C,MAAM,gBAAgB,YAAY,SAAS,KAAK,KAAK,KAAK,KAAK;4BAE/D,qBACE,6LAAC,6JAAA,CAAA,UAAK,CAAC,QAAQ;;oCACZ,+BAAiB,6LAAC,8IAAA,CAAA,uBAAoB;wCAAC,WAAU;;;;;;oCAEjD,KAAK,SAAS,GACb,KAAK,MAAM,mBAEX,6LAAC,8IAAA,CAAA,kBAAe;wCACd,SAAS,KAAK,MAAM;wCACpB,WAAW,KAAK,SAAS;kDAExB,KAAK,KAAK;;;;;;;+BAVI,KAAK,GAAG;;;;;wBAejC;;;;;;;;;;;;YAKH,sCACC,6LAAC,qLAAA,CAAA,UAAmB;gBAClB,YAAY,KAAK,EAAE;gBACnB,gBAAgB;gBAChB,QAAQ;gBACR,WAAW,IAAM,wBAAwB;gBACzC,UAAU,IAAM,wBAAwB;;;;;;YAK3C,oCACC,6LAAC,6MAAA,CAAA,UAA8B;gBAC7B,QAAQ;gBACR,cAAc,CAAC,OAAS,sBAAsB;gBAC9C,YAAY,KAAK,EAAE;gBACnB,cAAc,KAAK,KAAK;;;;;;;;AAKlC;GArcgB;;QAS6G,2HAAA,CAAA,cAAW;QAGjE,mJAAA,CAAA,mCAAgC;QAG5E,wIAAA,CAAA,wBAAqB;QAUF,4HAAA,CAAA,eAAY;QAMpD,4HAAA,CAAA,eAAY;QAEc,oJAAA,CAAA,gBAAa;QAmBN,+KAAA,CAAA,gCAA6B;QAkB3B,yKAAA,CAAA,UAA2B;QAsJlB,6KAAA,CAAA,kCAA+B;;;KA5NjE"}},
    {"offset": {"line": 14079, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14085, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenus/IContextMenuForCampaignGroupAtCampaignGroup.tsx"],"sourcesContent":["// // src/features/campaignManager/components/ContextMenus/IContextMenuForCampaignGroupAtCampaignGroup.tsx\r\n// import React from \"react\";\r\n// import { useTabStore } from \"@/store/tabStore\";\r\n// import { Item, Separator } from \"react-contexify\";\r\n\r\n// interface IContextMenuForCampaignGroupAtCampaignGroupProps {\r\n//   node: any;\r\n//   setIsCampaignAddPopupOpen: (open: boolean) => void;\r\n//   setIsDeleteDialogOpen: (open: boolean) => void;\r\n//   setIsRenameDialogOpen: (open: boolean) => void;\r\n// }\r\n\r\n// // 공통 스타일 설정\r\n// const itemStyle: React.CSSProperties = {\r\n//   fontSize: \"13px\",       // 글씨 크기\r\n//   padding: \"4px 6px\",     // 아이템 여백\r\n//   borderRadius: \"3px\",\r\n// };\r\n\r\n// const IContextMenuForCampaignGroupAtCampaignGroup: React.FC<IContextMenuForCampaignGroupAtCampaignGroupProps> = ({\r\n//   node,\r\n//   setIsCampaignAddPopupOpen,\r\n//   setIsDeleteDialogOpen,\r\n//   setIsRenameDialogOpen,\r\n// }) => {\r\n//   const { addTabCurrentOnly } = useTabStore.getState();\r\n\r\n//   return (\r\n//     <>\r\n//       <div\r\n//         key=\"bulk-update\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => {\r\n//           console.log(`캠페인 그룹 일괄 수정: ${node.name}`);\r\n//           addTabCurrentOnly({\r\n//             id: 1,\r\n//             title: `캠페인 그룹 관리: ${node.name}`,\r\n//             uniqueKey: `groupBulkUpdate_${node.group_id}_${Date.now()}`,\r\n//             params: {\r\n//               groupId: node.group_id,\r\n//               groupName: node.name,\r\n//             },\r\n//           });\r\n//         }}\r\n//       >\r\n//         캠페인 그룹 일괄 수정\r\n//       </div>\r\n\r\n//       <div\r\n//         key=\"bulk-start\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => console.log(`캠페인 그룹 일괄 시작: ${node.name}`)}\r\n//       >\r\n//         캠페인 그룹 일괄 시작\r\n//       </div>\r\n\r\n//       <div\r\n//         key=\"bulk-complete\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => console.log(`캠페인 그룹 일괄 완료: ${node.name}`)}\r\n//       >\r\n//         캠페인 그룹 일괄 완료\r\n//       </div>\r\n\r\n//       <div\r\n//         key=\"bulk-stop\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => console.log(`캠페인 그룹 일괄 중지: ${node.name}`)}\r\n//       >\r\n//         캠페인 그룹 일괄 중지\r\n//       </div>\r\n\r\n//       <Separator key=\"separator-1\" />\r\n\r\n//       <div\r\n//         key=\"rename\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => {\r\n//           console.log(\"캠페인 그룹 이름 변경:\", node);\r\n//           setIsRenameDialogOpen(true);\r\n//         }}\r\n//       >\r\n//         캠페인 그룹 이름 변경\r\n//       </div>\r\n\r\n//       <div\r\n//         key=\"delete\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => {\r\n//           console.log(`캠페인 그룹 삭제: ${node.name}`);\r\n//           setIsDeleteDialogOpen(true);\r\n//         }}\r\n//       >\r\n//         캠페인 그룹 삭제\r\n//       </div>\r\n\r\n//       <Separator key=\"separator-2\" />\r\n\r\n//       <div\r\n//         key=\"add-campaign\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => {\r\n//           console.log(`캠페인 추가/제외: ${node.name}`);\r\n//           setIsCampaignAddPopupOpen(true);\r\n//         }}\r\n//       >\r\n//         캠페인 그룹에 캠페인 추가\r\n//       </div>\r\n\r\n//       <div\r\n//         key=\"resend\"\r\n//         style={itemStyle}\r\n//         className=\"contexify-custom-item\"\r\n//         onClick={() => console.log(`캠페인 그룹 실시간 재발신: ${node.name}`)}\r\n//       >\r\n//         캠페인 그룹 실시간 재발신\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default IContextMenuForCampaignGroupAtCampaignGroup;\r\n\r\nimport React, { JSX } from \"react\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { useAvailableMenuStore } from \"@/store/useAvailableMenuStore\";\r\nimport { Item, Separator } from \"react-contexify\";\r\n\r\ninterface IContextMenuForCampaignGroupAtCampaignGroupProps {\r\n  node: any;\r\n  setIsCampaignAddPopupOpen: (open: boolean) => void;\r\n  setIsDeleteDialogOpen: (open: boolean) => void;\r\n  setIsRenameDialogOpen: (open: boolean) => void;\r\n}\r\n\r\n// 공통 스타일 설정\r\nconst itemStyle: React.CSSProperties = {\r\n  fontSize: \"13px\",       // 글씨 크기\r\n  padding: \"4px 6px\",     // 아이템 여백\r\n  borderRadius: \"3px\",\r\n};\r\n\r\nconst IContextMenuForCampaignGroupAtCampaignGroup: React.FC<IContextMenuForCampaignGroupAtCampaignGroupProps> = ({\r\n  node,\r\n  setIsCampaignAddPopupOpen,\r\n  setIsDeleteDialogOpen,\r\n  setIsRenameDialogOpen,\r\n}) => {\r\n  const { addTabCurrentOnly } = useTabStore.getState();\r\n  \r\n  // Get available menu IDs from the store\r\n  const availableMenuIds = useAvailableMenuStore(\r\n    (state) => state.availableMenuIdsForCampaignGroupTabCampaignGroup\r\n  );\r\n\r\n  // 메뉴 아이템 정의 (메뉴 ID, 그룹, 레이블, 동작 함수)\r\n  const menuItems = [\r\n    // 첫 번째 그룹 (일괄 작업)\r\n    {\r\n      id: 38,\r\n      group: 1,\r\n      key: \"bulk-update\",\r\n      label: \"캠페인 그룹 일괄 수정\",\r\n      action: () => {\r\n        console.log(`캠페인 그룹 일괄 수정: ${node.name}`);\r\n        addTabCurrentOnly({\r\n          id: 1,\r\n          title: `캠페인 그룹 관리: ${node.name}`,\r\n          uniqueKey: `groupBulkUpdate_${node.group_id}_${Date.now()}`,\r\n          params: {\r\n            groupId: node.group_id,\r\n            groupName: node.name,\r\n          },\r\n        });\r\n      }\r\n    },\r\n    {\r\n      id: 39,\r\n      group: 1,\r\n      key: \"bulk-start\",\r\n      label: \"캠페인 그룹 일괄 시작\",\r\n      action: () => console.log(`캠페인 그룹 일괄 시작: ${node.name}`)\r\n    },\r\n    {\r\n      id: 40,\r\n      group: 1,\r\n      key: \"bulk-complete\",\r\n      label: \"캠페인 그룹 일괄 멈춤\",\r\n      action: () => console.log(`캠페인 그룹 일괄 멈춤: ${node.name}`)\r\n    },\r\n    {\r\n      id: 41,\r\n      group: 1,\r\n      key: \"bulk-stop\",\r\n      label: \"캠페인 그룹 일괄 중지\",\r\n      action: () => console.log(`캠페인 그룹 일괄 중지: ${node.name}`)\r\n    },\r\n    \r\n    // 두 번째 그룹 (이름 변경, 삭제)\r\n    {\r\n      id: 42,\r\n      group: 2,\r\n      key: \"rename\",\r\n      label: \"캠페인 그룹 이름 변경\",\r\n      action: () => {\r\n        console.log(\"캠페인 그룹 이름 변경:\", node);\r\n        setIsRenameDialogOpen(true);\r\n      }\r\n    },\r\n    {\r\n      id: 43,\r\n      group: 2,\r\n      key: \"delete\",\r\n      label: \"캠페인 그룹 삭제\",\r\n      action: () => {\r\n        console.log(`캠페인 그룹 삭제: ${node.name}`);\r\n        setIsDeleteDialogOpen(true);\r\n      }\r\n    },\r\n    \r\n    // 세 번째 그룹 (캠페인 추가, 재발신)\r\n    {\r\n      id: 44,\r\n      group: 3,\r\n      key: \"add-campaign\",\r\n      label: \"캠페인 그룹에 캠페인 추가\",\r\n      action: () => {\r\n        console.log(`캠페인 추가/제외: ${node.name}`);\r\n        setIsCampaignAddPopupOpen(true);\r\n      }\r\n    },\r\n    {\r\n      id: 45,\r\n      group: 3,\r\n      key: \"resend\",\r\n      label: \"캠페인 그룹 실시간 재발신\",\r\n      action: () => {\r\n        console.log(`캠페인 그룹 실시간 재발신: ${node.name}`)\r\n        addTabCurrentOnly({\r\n          id: 24,\r\n          title: `재발신: ${node.name}`,\r\n          campaignId: node.group_id,\r\n          campaignName: node.name,\r\n          uniqueKey: `groupBulkUpdate_${node.group_id}_${Date.now()}`,\r\n          params: {\r\n            groupId: node.group_id,\r\n            groupName: node.name,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  ];\r\n\r\n  // 허용된 메뉴 ID에 따라 메뉴 아이템 필터링\r\n  const visibleMenuItems = availableMenuIds?.length > 0\r\n    ? menuItems.filter(item => availableMenuIds.includes(item.id))\r\n    : [];\r\n\r\n  // 표시할 메뉴 아이템이 없으면 null 반환\r\n  if (visibleMenuItems.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // 메뉴 렌더링 함수 (구분선 처리 포함)\r\n  const renderMenuItems = () => {\r\n    const elements: JSX.Element[] = [];\r\n    let currentGroup = -1;\r\n\r\n    visibleMenuItems.forEach(item => {\r\n      // 그룹이 변경되면 구분선 추가 (첫 그룹 제외)\r\n      if (currentGroup !== -1 && item.group !== currentGroup) {\r\n        elements.push(<Separator key={`separator-${item.group}`} />);\r\n      }\r\n      \r\n      // 메뉴 아이템 추가\r\n      elements.push(\r\n        <div\r\n          key={item.key}\r\n          style={itemStyle}\r\n          className=\"contexify-custom-item\"\r\n          onClick={item.action}\r\n        >\r\n          {item.label}\r\n        </div>\r\n      );\r\n      \r\n      // 현재 그룹 업데이트\r\n      currentGroup = item.group;\r\n    });\r\n    \r\n    return elements;\r\n  };\r\n\r\n  return <>{renderMenuItems()}</>;\r\n};\r\n\r\nexport default IContextMenuForCampaignGroupAtCampaignGroup;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 14371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14377, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/ContextMenus/IContextMenuForTenantAtCampaignGroup.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useAvailableMenuStore } from \"@/store/useAvailableMenuStore\"; // Adjust path if needed\r\n\r\ninterface IContextMenuForTenantAtCampaignGroupProps {\r\n  nodeName: string;\r\n  onAddGroup: () => void;\r\n}\r\n\r\n// Menu items configuration with ID\r\nconst MENU_ITEMS = [\r\n  {\r\n    id: 37,\r\n    label: \"캠페인 그룹 추가\",\r\n    action: (nodeName: string, callback: () => void) => {\r\n      console.log(`캠페인 그룹 추가: ${nodeName}`);\r\n      callback();\r\n    }\r\n  }\r\n];\r\n\r\nconst IContextMenuForTenantAtCampaignGroup: React.FC<IContextMenuForTenantAtCampaignGroupProps> = ({\r\n  nodeName,\r\n  onAddGroup\r\n}) => {\r\n  // Get the allowed menu IDs from the Zustand store\r\n  const availableMenuIds = useAvailableMenuStore(\r\n    (state) => state.availableMenuIdsForCampaignGroupTabTenant\r\n  );\r\n\r\n  // Filter menu items based on whether they exist in the allowed menu IDs\r\n  const visibleMenuItems = MENU_ITEMS.filter(item => \r\n    availableMenuIds.includes(item.id)\r\n  );\r\n\r\n  // If no menu items are visible, return null\r\n  if (visibleMenuItems.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {visibleMenuItems.map(item => (\r\n        <div\r\n          key={item.id}\r\n          className=\"contexify-custom-item\"\r\n          onClick={() => item.action(nodeName, onAddGroup)}\r\n        >\r\n          {item.label}\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IContextMenuForTenantAtCampaignGroup;"],"names":[],"mappings":";;;;AACA,+OAAuE,wBAAwB;;;;AAO/F,mCAAmC;AACnC,MAAM,aAAa;IACjB;QACE,IAAI;QACJ,OAAO;QACP,QAAQ,CAAC,UAAkB;YACzB,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,UAAU;YACpC;QACF;IACF;CACD;AAED,MAAM,uCAA4F,CAAC,EACjG,QAAQ,EACR,UAAU,EACX;;IACC,kDAAkD;IAClD,MAAM,mBAAmB,CAAA,GAAA,wIAAA,CAAA,wBAAqB,AAAD;wFAC3C,CAAC,QAAU,MAAM,yCAAyC;;IAG5D,wEAAwE;IACxE,MAAM,mBAAmB,WAAW,MAAM,CAAC,CAAA,OACzC,iBAAiB,QAAQ,CAAC,KAAK,EAAE;IAGnC,4CAA4C;IAC5C,IAAI,iBAAiB,MAAM,KAAK,GAAG;QACjC,OAAO;IACT;IAEA,qBACE;kBACG,iBAAiB,GAAG,CAAC,CAAA,qBACpB,6LAAC;gBAEC,WAAU;gBACV,SAAS,IAAM,KAAK,MAAM,CAAC,UAAU;0BAEpC,KAAK,KAAK;eAJN,KAAK,EAAE;;;;;;AAStB;GAhCM;;QAKqB,wIAAA,CAAA,wBAAqB;;;KAL1C;uCAkCS"}},
    {"offset": {"line": 14432, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14438, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/TreeNodeForSideBarCampaignGroupTab.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Building } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { Menu, useContextMenu } from \"react-contexify\";\r\nimport \"react-contexify/dist/ReactContexify.css\";\r\nimport { TreeNode } from \"@/features/campaignManager/types/typeForCampaignGroupForSideBar\";\r\nimport AddCampaignGroupDialog from \"./dialog/AddCampaignGroupDialog\";\r\nimport { useTabStore } from \"@/store/tabStore\";\r\nimport { useCampainManagerStore } from '@/store/campainManagerStore';\r\nimport CampaignAddPopup from '@/features/campaignManager/components/popups/CampaignAddPopup';\r\nimport { createPortal } from \"react-dom\";\r\nimport IDialogForUpdateCampaignGroupName from \"./dialog/IDialogForUpdateCampaignGroupName\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useApiForDeleteCampaignGroup } from \"@/features/campaignManager/hooks/useApiForDeleteCampaignGroup\";\r\nimport { IContextMenuForCampaignForCampaignGroup, CampaignStatus } from \"./ContextMenus/IContextMenuForCampaignForCampaignGroup\";\r\nimport IContextMenuForCampaignGroupAtCampaignGroup from \"./ContextMenus/IContextMenuForCampaignGroupAtCampaignGroup\";\r\nimport IContextMenuForTenantAtCampaignGroup from \"./ContextMenus/IContextMenuForTenantAtCampaignGroup\";\r\nimport { useSideMenuCampaignGroupTabStore } from \"@/store/storeForSideMenuCampaignGroupTab\";\r\nimport IDialogButtonForDeleteCampaignGroup from \"@/widgets/sidebar/dialogs/IDialogButtonForDeleteCampaignGroup\";\r\n\r\ninterface TreeNodeProps {\r\n  node: TreeNode;\r\n  level: number;\r\n  expandedNodes: Set<string>;\r\n  selectedNodeId?: string;\r\n  onNodeToggle: (nodeId: string) => void;\r\n  onNodeSelect: (nodeId: string) => void;\r\n}\r\n\r\nconst getStatusIcon = (status?: number) => {\r\n  switch (status) {\r\n    case 1:\r\n      return '/sidebar-menu/tree_play.svg';\r\n    case 2:\r\n      return '/sidebar-menu/tree_pause.svg';\r\n    case 3:\r\n      return '/sidebar-menu/tree_stop.svg';\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst getStatusFromFlag = (flag?: number): CampaignStatus => {\r\n  switch (flag) {\r\n    case 1: return 'started';\r\n    case 2: return 'pending';\r\n    case 3: return 'stopped';\r\n    default: return 'stopped';\r\n  }\r\n};\r\n\r\nexport function TreeNodeForSideBarCampaignGroupTab({\r\n  node,\r\n  level,\r\n  expandedNodes,\r\n  selectedNodeId,\r\n  onNodeToggle,\r\n  onNodeSelect,\r\n}: TreeNodeProps) {\r\n  const [isAddGroupDialogOpen, setIsAddGroupDialogOpen] = useState(false);\r\n  const [isCampaignAddPopupOpen, setIsCampaignAddPopupOpen] = useState(false);\r\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n  const [isRenameDialogOpen, setIsRenameDialogOpen] = useState(false);\r\n  const recentlyClosedDialogRef = useRef(false);\r\n  const { refetchTreeDataForCampaignGroupTab } = useSideMenuCampaignGroupTabStore();\r\n  const { setCampaignGroupManagerInit } = useCampainManagerStore();\r\n\r\n  const [isBrowser, setIsBrowser] = useState(false);\r\n  useEffect(() => {\r\n    setIsBrowser(true);\r\n  }, []);\r\n\r\n  const { mutate: deleteCampaignGroup, isPending: isDeleting } = useApiForDeleteCampaignGroup({\r\n    onSuccess: () => {\r\n      toast.success(\"캠페인 그룹이 삭제되었습니다.\");\r\n      setIsDeleteDialogOpen(false);\r\n      refetchTreeDataForCampaignGroupTab();\r\n      setCampaignGroupManagerInit(true);\r\n    },\r\n    onError: (error) => {\r\n      alert(`캠페인 그룹 삭제 실패: ${error.message}`);\r\n    }\r\n  });\r\n\r\n  const tenantMenuId = `tenant-menu-${node.id}`;\r\n  const groupMenuId = `group-menu-${node.id}`;\r\n\r\n  const { show: showTenantMenu } = useContextMenu({ id: tenantMenuId });\r\n  const { show: showGroupMenu } = useContextMenu({ id: groupMenuId });\r\n\r\n  const hasChildren = node.children && node.children.length > 0;\r\n  const isExpanded = expandedNodes.has(node.id);\r\n  const isSelected = selectedNodeId === node.id;\r\n\r\n  useEffect(() => {\r\n    if (node.type === \"group\" && hasChildren) {\r\n      console.log(`그룹 노드 ${node.name}에 캠페인 ${node.children?.length}개 있음, 확장 상태: ${isExpanded}`);\r\n    }\r\n  }, [node, hasChildren, isExpanded]);\r\n\r\n  const handleClick = useCallback(() => {\r\n    onNodeSelect(node.id);\r\n    if (hasChildren) {\r\n      console.log(`노드 클릭 (타입: ${node.type}, ID: ${node.id}), 자식 수: ${node.children?.length}`);\r\n      onNodeToggle(node.id);\r\n    }\r\n  }, [node.id, node.type, hasChildren, node.children?.length, onNodeSelect, onNodeToggle]);\r\n\r\n  const handleContextMenuEvent = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    onNodeSelect(node.id);\r\n    if (node.type === \"tenant\") {\r\n      showTenantMenu({ event: e });\r\n    } else if (node.type === \"group\") {\r\n      showGroupMenu({ event: e });\r\n    }\r\n  };\r\n\r\n  const handleCloseAddGroupDialog = useCallback(() => {\r\n    setIsAddGroupDialogOpen(false);\r\n    recentlyClosedDialogRef.current = true;\r\n    setTimeout(() => {\r\n      recentlyClosedDialogRef.current = false;\r\n      setCampaignGroupManagerInit(true);\r\n    }, 300);\r\n  }, []);\r\n\r\n  // 캠페인 이름 수정 후 리패치 처리\r\n  const handleCloseRenameDialog = useCallback(async () => {\r\n    setIsRenameDialogOpen(false);\r\n    recentlyClosedDialogRef.current = true;\r\n    setTimeout(() => {\r\n      recentlyClosedDialogRef.current = false;\r\n    }, 300);\r\n    setCampaignGroupManagerInit(true);\r\n    await refetchTreeDataForCampaignGroupTab();\r\n  }, []);\r\n\r\n  const handleRenameSuccess = useCallback(() => {\r\n    // 필요한 경우 리렌더링이나 데이터 갱신 로직 추가\r\n  }, []);\r\n\r\n  const handleCloseDeleteDialog = useCallback(() => {\r\n    setIsDeleteDialogOpen(false);\r\n    recentlyClosedDialogRef.current = true;\r\n    setTimeout(() => {\r\n      recentlyClosedDialogRef.current = false;\r\n    }, 300);\r\n  }, []);\r\n\r\n  const confirmDelete = useCallback(() => {\r\n    if (node && node.group_id) {\r\n      deleteCampaignGroup(node.group_id);\r\n    }\r\n  }, [node, deleteCampaignGroup]);\r\n\r\n  const handleAddGroup = useCallback((groupName: string, groupCode: string) => {\r\n    console.log(\"새 그룹 추가:\", {\r\n      tenantId: node.tenant_id,\r\n      tenantName: node.name,\r\n      groupName,\r\n      groupCode,\r\n    });\r\n  }, [node.tenant_id, node.name]);\r\n\r\n  const getNodeStyle = useCallback(() => {\r\n    let baseStyle = `flex items-center hover:bg-[#FFFAEE] px-2 py-0.5 cursor-pointer transition-colors duration-150`;\r\n    if (isSelected) {\r\n      baseStyle += \" bg-[#FFFAEE] text-555\";\r\n    }\r\n    if (node.type === \"campaign\") {\r\n      baseStyle += isSelected ? \"\" : \" text-green-600\";\r\n    }\r\n    return baseStyle;\r\n  }, [isSelected, node.type]);\r\n\r\n  const renderIcon = useCallback(() => {\r\n    switch (node.type?.toLowerCase()) {\r\n      case \"root\":\r\n        return <Image src=\"/tree-menu/organization.png\" alt=\"조직\" width={14} height={12} />;\r\n      case \"tenant\":\r\n        return <Image src=\"/tree-menu/folder.png\" alt=\"폴더\" width={14} height={12} />;\r\n      case \"group\":\r\n        return <Image src=\"/tree-menu/folder2.png\" alt=\"폴더2\" width={15} height={12} />;\r\n      case \"campaign\":\r\n        return <span></span>;\r\n      default:\r\n        return <Building className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  }, [node.type]);\r\n\r\n  const renderAllDialogs = () => {\r\n    if (!isBrowser) return null;\r\n\r\n    return (\r\n      <>\r\n        {isAddGroupDialogOpen && createPortal(\r\n          <AddCampaignGroupDialog\r\n            isOpen={isAddGroupDialogOpen}\r\n            onClose={handleCloseAddGroupDialog}\r\n            tenantId={node.tenant_id ? node.tenant_id : 0}\r\n            tenantName={node.name}\r\n            onAddGroup={handleAddGroup}\r\n          />,\r\n          document.body\r\n        )}\r\n\r\n        {isCampaignAddPopupOpen && createPortal(\r\n          <CampaignAddPopup\r\n            isOpen={isCampaignAddPopupOpen}\r\n            groupId={node.group_id || 0}\r\n            groupName={node.name || ''}\r\n            onClose={() => setIsCampaignAddPopupOpen(false)}\r\n          />,\r\n          document.body\r\n        )}\r\n\r\n        {isDeleteDialogOpen && createPortal(\r\n          <IDialogButtonForDeleteCampaignGroup\r\n            isOpen={isDeleteDialogOpen}\r\n            groupName={node.name}\r\n            onCancel={handleCloseDeleteDialog}\r\n            onDelete={confirmDelete}\r\n            isDeleting={isDeleting}\r\n          />,\r\n          document.body\r\n        )}\r\n\r\n        {isRenameDialogOpen && node.group_id !== undefined && createPortal(\r\n          <IDialogForUpdateCampaignGroupName\r\n            isOpen={isRenameDialogOpen}\r\n            onClose={handleCloseRenameDialog}\r\n            groupId={node.group_id}\r\n            tenantId={node?.tenant_id || 0}\r\n            currentGroupName={node?.name || ''}\r\n            onSuccess={handleRenameSuccess}\r\n          />,\r\n          document.body\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderNodeUI = () => (\r\n    <div\r\n      className={getNodeStyle()}\r\n      onClick={handleClick}\r\n      onContextMenu={node.type === \"campaign\" ? undefined : handleContextMenuEvent}\r\n      style={{ paddingLeft: `${level * 16 + 8}px` }}\r\n    >\r\n      <div className=\"flex items-center w-full gap-2\">\r\n        {hasChildren ? (\r\n          isExpanded ? (\r\n            <Image src=\"/tree-menu/minus_for_tree.png\" alt=\"접기\" width={12} height={12} />\r\n          ) : (\r\n            <Image src=\"/tree-menu/plus_icon_for_tree.png\" alt=\"펼치기\" width={12} height={12} />\r\n          )\r\n        ) : (\r\n          <span className=\"w-3\" />\r\n        )}\r\n        {renderIcon()}\r\n        <span className={`flex text-sm ${isSelected ? \"font-medium text-555\" : \"text-555\"}`}>\r\n          {getStatusIcon(node.start_flag) && <Image src={getStatusIcon(node.start_flag) || ''} alt=\"상태\" width={12} height={12} className=\"mr-1\" />}\r\n          {/* {node.campaign_id}  */}\r\n          {node.name}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const handleEditCampaign = useCallback(() => {\r\n    const { simulateHeaderMenuClick, setCampaignIdForUpdateFromSideMenu } = useTabStore.getState();\r\n    simulateHeaderMenuClick(2);\r\n    setCampaignIdForUpdateFromSideMenu(node.campaign_id?.toString() || \"\");\r\n  }, [node.campaign_id]);\r\n\r\n  const handleMonitorCampaign = useCallback(() => {\r\n    const { addMultiTab } = useTabStore.getState();\r\n    const uniqueKey = `monitor-${Date.now()}`;\r\n    addMultiTab({\r\n      id: 22,\r\n      uniqueKey: uniqueKey,\r\n      title: `상담사 상태 모니터 - ${node.name}`,\r\n      icon: '',\r\n      href: '',\r\n      content: null,\r\n      campaignId: node.campaign_id?.toString()\r\n    });\r\n  }, [node.name, node.campaign_id]);\r\n\r\n  const handleCopyCampaign = useCallback(() => {\r\n    console.log(`캠페인 복사: ${node.name} (ID: ${node.campaign_id})`);\r\n    toast.info(\"캠페인 복사 기능이 준비 중입니다.\");\r\n  }, [node.name, node.campaign_id]);\r\n\r\n  const renderNodeWithProperContextMenu = () => {\r\n    if (node.type === \"campaign\") {\r\n      const campaignItem = {\r\n        id: node.campaign_id,\r\n        label: node.name,\r\n        type: node.type,\r\n        status: getStatusFromFlag(node.start_flag)\r\n      };\r\n\r\n      return (\r\n        <IContextMenuForCampaignForCampaignGroup\r\n          item={campaignItem}\r\n          onEdit={handleEditCampaign}\r\n          onMonitor={handleMonitorCampaign}\r\n          onHandleCampaignCopy={handleCopyCampaign}\r\n\r\n          // tofix 0409 tenantId 전달 해야함 캠페인의 tenantId\r\n          tenantIdForCampaignTab= {node.tenant_id}\r\n        >\r\n          {renderNodeUI()} \r\n        </IContextMenuForCampaignForCampaignGroup>\r\n      );\r\n    }\r\n    return renderNodeUI();\r\n  };\r\n\r\n  return (\r\n    <div className=\"select-none\" data-node-type={node.type} data-node-id={node.id}>\r\n      {renderNodeWithProperContextMenu()}\r\n\r\n      {/* 테넌트 노드 컨텍스트 메뉴 */}\r\n      <Menu id={tenantMenuId} className=\"compact-menu\">\r\n        <IContextMenuForTenantAtCampaignGroup\r\n          nodeName={node.name}\r\n          onAddGroup={() => setIsAddGroupDialogOpen(true)}\r\n        />\r\n      </Menu>\r\n\r\n      {/* 그룹 노드 컨텍스트 메뉴 */}\r\n      <Menu id={groupMenuId} className=\"compact-menu\">\r\n        <IContextMenuForCampaignGroupAtCampaignGroup\r\n          node={node}\r\n          setIsCampaignAddPopupOpen={setIsCampaignAddPopupOpen}\r\n          setIsDeleteDialogOpen={setIsDeleteDialogOpen}\r\n          setIsRenameDialogOpen={setIsRenameDialogOpen}\r\n        />\r\n      </Menu>\r\n\r\n      {hasChildren && isExpanded && (\r\n        <div className=\"children-container\">\r\n          {node.children?.map((child) => (\r\n            <TreeNodeForSideBarCampaignGroupTab\r\n              key={child.id}\r\n              node={child}\r\n              level={level + 1}\r\n              expandedNodes={expandedNodes}\r\n              selectedNodeId={selectedNodeId}\r\n              onNodeToggle={onNodeToggle}\r\n              onNodeSelect={onNodeSelect}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {renderAllDialogs()}\r\n\r\n      <style jsx>{`\r\n        .compact-menu {\r\n          font-size: 20px;\r\n          padding: 4px;\r\n          border-radius: 4px;\r\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n        }\r\n        .compact-menu .react-contexify__item {\r\n          padding: 4px 8px;\r\n          min-height: auto;\r\n          transition: background-color 0.2s ease;\r\n        }\r\n        .compact-menu .react-contexify__item:hover {\r\n          background-color: #f3f3f3;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 14987, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14993, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/searchbar/SearchBarForSideMenuForCampaignGroupTab.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Search } from \"lucide-react\";\r\nimport { useSideMenuCampaignGroupTabStore } from \"@/store/storeForSideMenuCampaignGroupTab\";\r\n\r\n/**\r\n * 캠페인/그룹 검색 바 컴포넌트\r\n */\r\ninterface SearchBarForSideMenuForCampaignGroupTabProps {\r\n  placeholder?: string;\r\n}\r\n\r\nexport const SearchBarForSideMenuForCampaignGroupTab: React.FC<SearchBarForSideMenuForCampaignGroupTabProps> = ({\r\n  placeholder = \"캠페인 또는 그룹 검색...\"\r\n}) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchFeedback, setSearchFeedback] = useState<{\r\n    message: string;\r\n    type: \"success\" | \"error\" | \"idle\";\r\n  }>({ message: \"\", type: \"idle\" });\r\n\r\n  // Get searchNode function directly from the store\r\n  const searchNode = useSideMenuCampaignGroupTabStore(state => state.searchNode);\r\n\r\n  // 피드백 메시지가 표시된 후 일정 시간 후에 자동으로 사라지게 처리\r\n  useEffect(() => {\r\n    if (searchFeedback.type !== \"idle\") {\r\n      const timer = setTimeout(() => {\r\n        setSearchFeedback({ message: \"\", type: \"idle\" });\r\n      }, 3000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [searchFeedback]);\r\n\r\n  const handleSearch = () => {\r\n    if (searchTerm.trim()) {\r\n      // Use the store's searchNode function\r\n      const foundNodeId = searchNode(searchTerm);\r\n      \r\n      if (foundNodeId) {\r\n        setSearchFeedback({ \r\n          message: \"항목을 찾았습니다.\", \r\n          type: \"success\"\r\n        });\r\n      } else {\r\n        setSearchFeedback({ \r\n          message: \"검색 결과가 없습니다.\", \r\n          type: \"error\" \r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full px-2 py-1\">\r\n      <div className=\"relative\">\r\n        {/* 검색창 */}\r\n        <div className=\"flex items-center border rounded w-full relative\">\r\n          <input\r\n            type=\"text\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            className=\"border-none rounded outline-none pl-2 pr-7 py-1 text-sm w-full\"\r\n            placeholder={placeholder}\r\n          />\r\n          <button\r\n            onClick={handleSearch}\r\n            className=\"absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n            aria-label=\"검색\"\r\n          >\r\n            <Search size={14}/>\r\n          </button>\r\n        </div>\r\n        \r\n        {/* 피드백 메시지 */}\r\n        {searchFeedback.message && (\r\n          <div \r\n            className={`text-xs mt-1 px-2 py-1 rounded ${\r\n              searchFeedback.type === \"success\" \r\n                ? \"bg-green-100 text-green-800\" \r\n                : \"bg-red-100 text-red-800\"\r\n            }`}\r\n          >\r\n            {searchFeedback.message}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBarForSideMenuForCampaignGroupTab;"],"names":[],"mappings":";;;;;AAAA;AAEA;AADA;;;;;;AAUO,MAAM,0CAAkG,CAAC,EAC9G,cAAc,iBAAiB,EAChC;;IACC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAGhD;QAAE,SAAS;QAAI,MAAM;IAAO;IAE/B,kDAAkD;IAClD,MAAM,aAAa,CAAA,GAAA,mJAAA,CAAA,mCAAgC,AAAD;gGAAE,CAAA,QAAS,MAAM,UAAU;;IAE7E,uCAAuC;IACvC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;6DAAE;YACR,IAAI,eAAe,IAAI,KAAK,QAAQ;gBAClC,MAAM,QAAQ;+EAAW;wBACvB,kBAAkB;4BAAE,SAAS;4BAAI,MAAM;wBAAO;oBAChD;8EAAG;gBAEH;yEAAO,IAAM,aAAa;;YAC5B;QACF;4DAAG;QAAC;KAAe;IAEnB,MAAM,eAAe;QACnB,IAAI,WAAW,IAAI,IAAI;YACrB,sCAAsC;YACtC,MAAM,cAAc,WAAW;YAE/B,IAAI,aAAa;gBACf,kBAAkB;oBAChB,SAAS;oBACT,MAAM;gBACR;YACF,OAAO;gBACL,kBAAkB;oBAChB,SAAS;oBACT,MAAM;gBACR;YACF;QACF;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,IAAI,EAAE,GAAG,KAAK,SAAS;YACrB;QACF;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BAEb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BACC,MAAK;4BACL,OAAO;4BACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;4BAC7C,WAAW;4BACX,WAAU;4BACV,aAAa;;;;;;sCAEf,6LAAC;4BACC,SAAS;4BACT,WAAU;4BACV,cAAW;sCAEX,cAAA,6LAAC,yMAAA,CAAA,SAAM;gCAAC,MAAM;;;;;;;;;;;;;;;;;gBAKjB,eAAe,OAAO,kBACrB,6LAAC;oBACC,WAAW,CAAC,+BAA+B,EACzC,eAAe,IAAI,KAAK,YACpB,gCACA,2BACJ;8BAED,eAAe,OAAO;;;;;;;;;;;;;;;;;AAMnC;GArFa;;QAUQ,mJAAA,CAAA,mCAAgC;;;KAVxC;uCAuFE"}},
    {"offset": {"line": 15133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15139, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/components/treeMenus/TreeMenusForCampaignGroupTab.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { TreeNodeForSideBarCampaignGroupTab } from \"./TreeNodeForSideBarCampaignGroupTab\";\r\nimport { useAuthStore } from \"@/store/authStore\";\r\nimport { useSideMenuCampaignGroupTabStore } from \"@/store/storeForSideMenuCampaignGroupTab\";\r\nimport SearchBarForSideMenuForCampaignGroupTab from \"./searchbar/SearchBarForSideMenuForCampaignGroupTab\";\r\nimport { useApiForGetTreeDataForCampaignGroupTab } from \"@/features/campaignManager/hooks/useApiForGetTreeDataForCampaignGroupTab\";\r\n\r\nexport function TreeMenusForCampaignGroupTab() {\r\n  const { tenant_id } = useAuthStore();\r\n  \r\n  console.log(\"tenant_id :!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \", tenant_id);\r\n  \r\n\r\n  // TanStack Query 커스텀 훅 사용 (tenant_id 자동 적용)\r\n  const { isLoading, error, data } = useApiForGetTreeDataForCampaignGroupTab(tenant_id);\r\n  \r\n  // Zustand 스토어에서 UI 상태 가져오기\r\n  const { \r\n    treeData, \r\n    expandedNodes, \r\n    selectedNodeId,\r\n    toggleNode, \r\n    selectNode,\r\n    expandTenantAndGroup\r\n  } = useSideMenuCampaignGroupTabStore();\r\n\r\n  console.log(\"treeData 메뉴 캠페인 탭: \", treeData);\r\n  \r\n  // 데이터가 로드된 후 테넌트와 그룹 레벨 확장\r\n  useEffect(() => {\r\n    if (treeData.length > 0) {\r\n      // 테넌트와 그룹 레벨까지만 확장\r\n      useSideMenuCampaignGroupTabStore.getState().expandTenantAndGroup();\r\n    }\r\n  }, [treeData]);\r\n  \r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex items-center border-b\">\r\n        <SearchBarForSideMenuForCampaignGroupTab/>\r\n      </div>\r\n      <div className=\"flex flex-grow overflow-y-auto min-h-0 tree-node\">\r\n        <div className=\"w-full\">\r\n          {isLoading ? (\r\n            <div className=\"p-4 text-center text-gray-500\">데이터를 불러오는 중...</div>\r\n          ) : error ? (\r\n            <div className=\"p-4 text-center text-red-500\">오류 발생: {error.message}</div>\r\n          ) : treeData.length === 0 ? (\r\n            <div className=\"p-4 text-center text-gray-500\">표시할 데이터가 없습니다</div>\r\n          ) : (\r\n            treeData.map((node) => (\r\n              <TreeNodeForSideBarCampaignGroupTab\r\n                key={node.id}\r\n                node={node}\r\n                level={0}\r\n                expandedNodes={expandedNodes}\r\n                selectedNodeId={selectedNodeId}\r\n                onNodeToggle={toggleNode}\r\n                onNodeSelect={selectNode}\r\n              />\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAPA;;;;;;;AASO,SAAS;;IACd,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAEjC,QAAQ,GAAG,CAAC,uEAAuE;IAGnF,4CAA4C;IAC5C,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,0LAAA,CAAA,0CAAuC,AAAD,EAAE;IAE3E,2BAA2B;IAC3B,MAAM,EACJ,QAAQ,EACR,aAAa,EACb,cAAc,EACd,UAAU,EACV,UAAU,EACV,oBAAoB,EACrB,GAAG,CAAA,GAAA,mJAAA,CAAA,mCAAgC,AAAD;IAEnC,QAAQ,GAAG,CAAC,uBAAuB;IAEnC,2BAA2B;IAC3B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kDAAE;YACR,IAAI,SAAS,MAAM,GAAG,GAAG;gBACvB,mBAAmB;gBACnB,mJAAA,CAAA,mCAAgC,CAAC,QAAQ,GAAG,oBAAoB;YAClE;QACF;iDAAG;QAAC;KAAS;IAEb,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,yNAAA,CAAA,UAAuC;;;;;;;;;;0BAE1C,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACZ,0BACC,6LAAC;wBAAI,WAAU;kCAAgC;;;;;+BAC7C,sBACF,6LAAC;wBAAI,WAAU;;4BAA+B;4BAAQ,MAAM,OAAO;;;;;;+BACjE,SAAS,MAAM,KAAK,kBACtB,6LAAC;wBAAI,WAAU;kCAAgC;;;;;+BAE/C,SAAS,GAAG,CAAC,CAAC,qBACZ,6LAAC,uMAAA,CAAA,qCAAkC;4BAEjC,MAAM;4BACN,OAAO;4BACP,eAAe;4BACf,gBAAgB;4BAChB,cAAc;4BACd,cAAc;2BANT,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;AAc5B;GA3DgB;;QACQ,4HAAA,CAAA,eAAY;QAMC,0LAAA,CAAA,0CAAuC;QAUtE,mJAAA,CAAA,mCAAgC;;;KAjBtB"}},
    {"offset": {"line": 15263, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15269, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/auth/api/mainTenants.ts"],"sourcesContent":["// src/features/auth/api/fetchCampaigns.ts\r\nimport { axiosInstance } from '@/lib/axios';\r\nimport { MainCredentials, TenantListResponse } from '../types/mainIndex';\r\n\r\n// 테넌트 리스트 요청\r\nexport const fetchTenants = async (credentials:MainCredentials): Promise<TenantListResponse> => {\r\n  const tenantRequestData = {\r\n    filter: {      \r\n      tenant_id: {\r\n        start: credentials.tenant_id > 0?credentials.tenant_id: 0,\r\n        end: credentials.tenant_id > 0?credentials.tenant_id:9999999\r\n      },\r\n    },\r\n    sort: {\r\n      tenant_id: 0,\r\n    },\r\n    page: {\r\n      index: 1,\r\n      items: 10,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const { data } = await axiosInstance.post<TenantListResponse>(\r\n      '/collections/tenant', \r\n      tenantRequestData\r\n    );\r\n    return data;\r\n  } catch (error: any) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('세션이 만료되었습니다. 다시 로그인해주세요.');\r\n    }\r\n    // throw new Error(error.response?.data?.result_code + '||' + error.response?.data?.result_msg || '데이터 가져오기 실패');\r\n    throw error;\r\n  }\r\n};"],"names":[],"mappings":"AAAA,0CAA0C;;;;AAC1C;;AAIO,MAAM,eAAe,OAAO;IACjC,MAAM,oBAAoB;QACxB,QAAQ;YACN,WAAW;gBACT,OAAO,YAAY,SAAS,GAAG,IAAE,YAAY,SAAS,GAAE;gBACxD,KAAK,YAAY,SAAS,GAAG,IAAE,YAAY,SAAS,GAAC;YACvD;QACF;QACA,MAAM;YACJ,WAAW;QACb;QACA,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;IAEA,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAAC,IAAI,CACvC,uBACA;QAEF,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB;QACA,iHAAiH;QACjH,MAAM;IACR;AACF"}},
    {"offset": {"line": 15305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15311, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/auth/hooks/useApiForTenants.ts"],"sourcesContent":["// src/features/auth/hooks/useApiForLogin.tsx\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport { fetchTenants } from '../api/mainTenants';\r\nimport { toast } from 'react-toastify';\r\nimport { UseMutationOptions } from '@tanstack/react-query';\r\nimport { MainCredentials, TenantListResponse, AuthApiError } from '../types/mainIndex';\r\nimport { useRef } from 'react';\r\n// import Router, { useRouter } from 'next/router';\r\n\r\nexport function useApiForTenants(\r\n  options?: UseMutationOptions<TenantListResponse, AuthApiError, MainCredentials>\r\n) {\r\n  const isFetching = useRef(false); // 요청 중인지 확인하는 상태\r\n\r\n  return useMutation({\r\n    mutationKey: ['mainTenants'],\r\n    mutationFn: async (variables: MainCredentials) => {\r\n      // if (isFetching.current) {\r\n      //   throw new Error('이미 요청이 진행 중입니다.'); // 요청 중일 때는 에러를 던짐\r\n      // }\r\n      isFetching.current = true; // 요청 시작\r\n      try {\r\n        const response = await fetchTenants(variables);\r\n        return response;\r\n      } finally {\r\n        isFetching.current = false; // 요청 완료 후 상태 초기화\r\n      }\r\n    },\r\n    gcTime: 10 * 60 * 1000, // 10분\r\n    onSuccess: (data, variables, context) => {\r\n      options?.onSuccess?.(data, variables, context);\r\n    },\r\n    onError: (error: any, variables: MainCredentials, context: unknown) => {\r\n      console.error('API Error:', error);\r\n\r\n      if (error.response?.data?.result_code === 5) {\r\n        console.log('세션 만료, 로그인으로 이동');\r\n        window.location.href = '/login';\r\n      } else {\r\n        console.log('다른 에러:', error.response?.data?.result_code);\r\n      }\r\n\r\n      options?.onError?.(error, variables, context);\r\n    },\r\n  });\r\n}"],"names":[],"mappings":"AAAA,6CAA6C;;;;AAE7C;AAIA;AALA;;;;;AAQO,SAAS,iBACd,OAA+E;;IAE/E,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE,QAAQ,iBAAiB;IAEnD,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE;QACjB,aAAa;YAAC;SAAc;QAC5B,UAAU;4CAAE,OAAO;gBACjB,4BAA4B;gBAC5B,2DAA2D;gBAC3D,IAAI;gBACJ,WAAW,OAAO,GAAG,MAAM,QAAQ;gBACnC,IAAI;oBACF,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,eAAY,AAAD,EAAE;oBACpC,OAAO;gBACT,SAAU;oBACR,WAAW,OAAO,GAAG,OAAO,iBAAiB;gBAC/C;YACF;;QACA,QAAQ,KAAK,KAAK;QAClB,SAAS;4CAAE,CAAC,MAAM,WAAW;gBAC3B,SAAS,YAAY,MAAM,WAAW;YACxC;;QACA,OAAO;4CAAE,CAAC,OAAY,WAA4B;gBAChD,QAAQ,KAAK,CAAC,cAAc;gBAE5B,IAAI,MAAM,QAAQ,EAAE,MAAM,gBAAgB,GAAG;oBAC3C,QAAQ,GAAG,CAAC;oBACZ,OAAO,QAAQ,CAAC,IAAI,GAAG;gBACzB,OAAO;oBACL,QAAQ,GAAG,CAAC,UAAU,MAAM,QAAQ,EAAE,MAAM;gBAC9C;gBAEA,SAAS,UAAU,OAAO,WAAW;YACvC;;IACF;AACF;GApCgB;;QAKP,iLAAA,CAAA,cAAW"}},
    {"offset": {"line": 15371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15377, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/features/campaignManager/hooks/useApiForFetchCounselorList.tsx"],"sourcesContent":["// import { useMutation } from '@tanstack/react-query';\r\n// import { MainCredentials, MainResponse } from '@/features/auth/types/mainIndex';\r\n// import { fetchCounselorList } from '@/features/auth/api/main';\r\n\r\n// interface Props {\r\n//   onSuccess?: (data: any) => void;\r\n//   onError?: (error: Error) => void;\r\n// }\r\n\r\n// const useApiForFetchCounselorList = (props: Props) => {\r\n//   return useMutation({\r\n//     mutationFn: (credentials: MainCredentials) => fetchCounselorList(credentials),\r\n//     onSuccess: (data) => {\r\n//       props.onSuccess?.(data);\r\n//     },\r\n//     onError: (error: Error) => {\r\n//       props.onError?.(error);\r\n//     },\r\n//   });\r\n// };\r\n\r\n// export default useApiForFetchCounselorList;\r\n\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { MainCredentials, MainResponse } from '@/features/auth/types/mainIndex';\r\nimport { fetchCounselorList } from '@/features/auth/api/main';\r\n\r\ninterface Props {\r\n  credentials: MainCredentials;\r\n  enabled?: boolean;\r\n}\r\n\r\nconst useApiForFetchCounselorList = ({ credentials, enabled }: Props) => {\r\n  return useQuery({\r\n    queryKey: ['counselorList', credentials],\r\n    queryFn: () => fetchCounselorList(credentials),\r\n    enabled,\r\n  });\r\n};\r\n\r\nexport default useApiForFetchCounselorList;"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,mFAAmF;AACnF,iEAAiE;AAEjE,oBAAoB;AACpB,qCAAqC;AACrC,sCAAsC;AACtC,IAAI;AAEJ,0DAA0D;AAC1D,yBAAyB;AACzB,qFAAqF;AACrF,6BAA6B;AAC7B,iCAAiC;AACjC,SAAS;AACT,mCAAmC;AACnC,gCAAgC;AAChC,SAAS;AACT,QAAQ;AACR,KAAK;AAEL,8CAA8C;;;;AAI9C;AAFA;;;;AASA,MAAM,8BAA8B,CAAC,EAAE,WAAW,EAAE,OAAO,EAAS;;IAClE,OAAO,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;YAAiB;SAAY;QACxC,OAAO;oDAAE,IAAM,CAAA,GAAA,yIAAA,CAAA,qBAAkB,AAAD,EAAE;;QAClC;IACF;AACF;GANM;;QACG,8KAAA,CAAA,WAAQ;;;uCAOF"}},
    {"offset": {"line": 15426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}