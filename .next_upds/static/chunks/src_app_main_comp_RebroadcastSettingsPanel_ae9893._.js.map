{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/RebroadcastSettingsPanel/RebroadcastSettingsPanelHeader.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/shared/CustomSelect\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport CustomAlert, { CustomAlertRequest } from '@/components/shared/layout/CustomAlert';\r\nimport { CommonRadio, CommonRadioItem } from \"@/components/shared/CommonRadio\";\r\nimport { DatePickerProps } from 'react-date-picker';\r\nimport 'react-date-picker/dist/DatePicker.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { useMainStore, useTabStore } from '@/store';\r\n\r\ninterface RebroadcastItem {\r\n    id: number;\r\n    scheduleStartDate: string;\r\n    scheduleStartTime: string;\r\n    outgoingResults: string[];\r\n    outgoingType: string;\r\n    outgoingTime: {\r\n        type: string;\r\n        startDate: string;\r\n        endDate: string;\r\n    };\r\n    isDummy?: boolean;\r\n}\r\n\r\nconst errorMessage: CustomAlertRequest = {\r\n    isOpen: false,\r\n    message: '',\r\n    title: '재발신 설정',\r\n    type: '0',\r\n    onClose: () => { },\r\n    onCancle: () => { },\r\n};\r\n\r\ntype Props = {\r\n    campaignId?: string;\r\n    reservationShouldShowApply: boolean;\r\n    reservationShouldShowAdd: boolean;\r\n    reservationShouldShowDelete: boolean;\r\n    handleBroadcastTypeChange: (param: string) => void;\r\n    handleAddRebroadcast: () => void;\r\n    handleRemoveRebroadcast: () => void;\r\n    handleApplyRebroadcast: () => void;\r\n    handleCheckListCount: () => void;\r\n    selectedRebroadcastId: any;\r\n    textType: string;\r\n}\r\n\r\nconst RebroadcastSettingsPanelHeader = ({\r\n    campaignId,\r\n    reservationShouldShowApply,\r\n    reservationShouldShowAdd,\r\n    reservationShouldShowDelete,\r\n    selectedRebroadcastId,\r\n    textType\r\n    , handleBroadcastTypeChange\r\n    , handleAddRebroadcast\r\n    , handleRemoveRebroadcast\r\n    , handleApplyRebroadcast\r\n    , handleCheckListCount\r\n}: Props) => {\r\n    // TabStore에서 현재 활성화된 탭 정보 가져오기\r\n    const { campaigns } = useMainStore();\r\n    const { removeTab } = useTabStore();\r\n\r\n    const [alertState, setAlertState] = useState<CustomAlertRequest>(errorMessage);\r\n    const [broadcastType, setBroadcastType] = useState(\"reservation\");\r\n    const [listCount, setListCount] = useState<number>(0);\r\n    const [shouldShowApply, setShouldShowApply] = useState<boolean>(false);    //적용 버튼.\r\n    const [shouldShowAdd, setShouldShowAdd] = useState<boolean>(false);        //추가 버튼.\r\n    const [shouldShowAddDelete, setShouldShowDelete] = useState<boolean>(false);    //삭제 버튼.\r\n\r\n    const [headerCampaignId, setHeaderCampaignId] = useState<string>('');\r\n    const [realtime, setRealtime] = useState<boolean>(false);\r\n\r\n    //리스트 건수 확인 버튼 클릭 이벤트.\r\n    const handleCheckListCountHeader = () => {\r\n        if (broadcastType === 'reservation') {   //예약인 경우.\r\n            setAlertState({\r\n                isOpen: true,\r\n                message: `선택된 재발신 조건에 해당되는 리스트 수 : ${listCount}`,\r\n                title: '리스트 건수 확인',\r\n                type: '2',\r\n                onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n            });\r\n        } else {  //실시간인 경우.\r\n            handleCheckListCount();\r\n        }\r\n    };\r\n\r\n    //추가 버튼 클릭 이벤트.\r\n    const handleAddRebroadcastClick = () => {\r\n        handleAddRebroadcast();\r\n    };\r\n\r\n    //삭제 버튼 클릭 이벤트.\r\n    const handleRemoveRebroadcastClick = () => {\r\n        handleRemoveRebroadcast();\r\n    };\r\n\r\n    //예약, 실시간 변경 이벤트.\r\n    const handleBroadcastType = (value: string) => {\r\n        setBroadcastType(value);\r\n        handleBroadcastTypeChange(value);\r\n        if (value === 'realtime') {\r\n            setShouldShowApply(true);\r\n        } else {\r\n            setShouldShowApply(reservationShouldShowApply);\r\n        }\r\n    };\r\n\r\n    //적용 버튼 클릭 이벤트.\r\n    const handleApplyRebroadcastClick = () => {\r\n        handleApplyRebroadcast();\r\n    };\r\n\r\n    //적용 버튼 \r\n    useEffect(() => {\r\n        setShouldShowApply(reservationShouldShowApply);\r\n        setShouldShowAdd(reservationShouldShowAdd);\r\n        setShouldShowDelete(reservationShouldShowDelete);\r\n    }, [reservationShouldShowApply, reservationShouldShowAdd, reservationShouldShowDelete]);\r\n\r\n    useEffect(() => {\r\n        if (campaigns && campaignId !== '0') {\r\n            setHeaderCampaignId(campaignId + '');\r\n            const tempCampaign = campaigns.filter(data => Number(campaignId) === data.campaign_id);\r\n            if (tempCampaign.length > 0) {\r\n                setListCount(tempCampaign[0].list_count);\r\n            }\r\n            if (tempCampaign[0].start_flag === 1) {\r\n                setRealtime(true);\r\n            } else {\r\n                setRealtime(false);\r\n            }\r\n\r\n            // setListCount(campaigns.filter(data=>Number(campaignId) === data.campaign_id)[0].list_count);\r\n        }\r\n    }, [campaignId, campaigns]);\r\n\r\n    return (\r\n        <div className=\"flex title-background justify-between\">\r\n            <div className=\"flex gap-4 items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                    <Label className=\"w-20 min-w-20\">캠페인 아이디</Label>\r\n                    <Select defaultValue='0' value={headerCampaignId} onValueChange={setHeaderCampaignId} disabled>\r\n                        <SelectTrigger className=\"w-[140px]\">\r\n                            <SelectValue placeholder=\"캠페인선택\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                            <SelectItem key='0' value='0'>-선택-</SelectItem>\r\n                            {campaigns.map(option => (\r\n                                <SelectItem key={option.campaign_id} value={option.campaign_id + ''}>\r\n                                    {option.campaign_id}\r\n                                </SelectItem>\r\n                            ))}\r\n                        </SelectContent>\r\n                    </Select>\r\n\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                    <Label className=\"w-20 min-w-20\">캠페인 이름</Label>\r\n                    <CustomInput\r\n                        className=\"w-[140px]\"\r\n                        disabled\r\n                        value={headerCampaignId === '' ? '' : campaigns.filter(data => Number(headerCampaignId) === data.campaign_id)[0].campaign_name || ''}\r\n                    />\r\n                </div>\r\n                <CommonRadio\r\n                    defaultValue=\"reservation\"\r\n                    className=\"flex gap-5\"\r\n                    onValueChange={(value) => handleBroadcastType(value)}\r\n                    value={broadcastType}\r\n                    disabled={realtime}\r\n                >\r\n                    <div className=\"flex items-center space-x-2\">\r\n                        <CommonRadioItem value=\"reservation\" id=\"reservation\" />\r\n                        <Label htmlFor=\"reservation\">예약</Label>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                        <CommonRadioItem value=\"realtime\" id=\"realtime\" />\r\n                        <Label htmlFor=\"realtime\">실시간</Label>\r\n                    </div>\r\n                </CommonRadio>\r\n            </div>\r\n\r\n            <div className=\"flex gap-2 items-center\">\r\n                {broadcastType === 'reservation' && textType !== '' ?\r\n                    <div className=\"px-2 py-1 text-sm font-medium text-gray-700 bg-blue-100 border border-blue-200 rounded-md shadow-sm inline-flex items-center mr-[200px]\">\r\n                        {textType}\r\n                    </div>\r\n                    :null\r\n                }\r\n\r\n                <CommonButton onClick={handleCheckListCountHeader}>\r\n                    리스트 건수 확인\r\n                </CommonButton>\r\n                <CommonButton\r\n                    onClick={handleAddRebroadcastClick}\r\n                    disabled={!shouldShowAdd}\r\n                >\r\n                    추가\r\n                </CommonButton>\r\n                <CommonButton\r\n                    onClick={handleRemoveRebroadcastClick}\r\n                    disabled={!shouldShowAddDelete}\r\n                >\r\n                    삭제\r\n                </CommonButton>\r\n                <CommonButton\r\n                    onClick={handleApplyRebroadcastClick}\r\n                    disabled={!shouldShowApply}\r\n                >\r\n                    적용\r\n                </CommonButton>\r\n                <CommonButton\r\n                    onClick={() => removeTab(20, '20')}\r\n                >\r\n                    닫기\r\n                </CommonButton>\r\n            </div>\r\n            <CustomAlert\r\n                message={alertState.message}\r\n                title={alertState.title}\r\n                type={alertState.type}\r\n                isOpen={alertState.isOpen}\r\n                onClose={() => {\r\n                    alertState.onClose()\r\n                }}\r\n                onCancle={() => setAlertState((prev) => ({ ...prev, isOpen: false }))} />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default RebroadcastSettingsPanelHeader;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/RebroadcastSettingsPanel/index.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport CustomAlert, { CustomAlertRequest } from '@/components/shared/layout/CustomAlert';\r\nimport { CommonRadio, CommonRadioItem } from \"@/components/shared/CommonRadio\";\r\nimport TitleWrap from \"@/components/shared/TitleWrap\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport { DatePickerProps } from 'react-date-picker';\r\ntype Value = DatePickerProps['value'];\r\nimport { CustomCheckbox } from \"@/components/shared/CustomCheckbox\";\r\nimport { Calendar as CalendarIcon } from \"lucide-react\";\r\nimport 'react-date-picker/dist/DatePicker.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { useTabStore, useMainStore } from '@/store';\r\nimport RebroadcastSettingsPanelHeader from './RebroadcastSettingsPanelHeader';\r\nimport { useApiForAutoRedial } from '@/features/campaignManager/hooks/useApiForAutoRedial';\r\nimport { useApiForCampaignAutoRedialInsert } from '@/features/rebroadcastSettingsPanel/hooks/useApiForCampaignAutoRedialInsert';\r\nimport { useApiForAutoRedialDelete } from '@/features/campaignManager/hooks/useApiForAutoRedialDelete';\r\nimport { useApiForCampaignRedialPreviewSearch } from '@/features/rebroadcastSettingsPanel/hooks/useApiForCampaignRedialPreviewSearch';\r\nimport { useApiForCampaignCurrentRedial } from '@/features/rebroadcastSettingsPanel/hooks/useApiForCampaignCurrentRedial';\r\nimport Cookies from 'js-cookie';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useApiForCampaignStatusUpdate } from '@/features/campaignManager/hooks/useApiForCampaignStatusUpdate';\r\nimport { CheckCampaignSaveReturnCode,CampaignManagerInfo,UpdataCampaignInfo } from '@/components/common/common';\r\nimport { CampaignInfoUpdateRequest } from '@/features/campaignManager/types/campaignManagerIndex';\r\nimport { useApiForCampaignManagerUpdate } from '@/features/campaignManager/hooks/useApiForCampaignManagerUpdate';\r\n\r\ninterface RebroadcastSettings {\r\n    campaignId: string;\r\n    startDate: string;\r\n    startTime: string;\r\n    changeYn: boolean;\r\n    scheduleChangeYn: boolean;\r\n}\r\n\r\ninterface RebroadcastItem {\r\n    id: number;\r\n    scheduleStartDate: string;\r\n    scheduleStartTime: string;\r\n    outgoingResults: string[];\r\n    outgoingType: string;\r\n    outgoingTime: {\r\n        type: string;\r\n        startDate: string;\r\n        endDate: string;\r\n    };\r\n    redialCondition: string;\r\n    run_flag: number;\r\n    isDummy?: boolean;\r\n}\r\n\r\nconst errorMessage: CustomAlertRequest = {\r\n    isOpen: false,\r\n    message: '',\r\n    title: '재발신 설정',\r\n    type: '1',\r\n    onClose: () => { },\r\n    onCancle: () => { },\r\n};\r\n\r\nconst today = new Date();\r\nconst initialSettings: RebroadcastSettings = {\r\n    campaignId: '',\r\n    startDate: today.getFullYear() + ('0' + (today.getMonth() + 1)).slice(-2) + ('0' + today.getDate()).slice(-2),\r\n    startTime: '',\r\n    changeYn: false,\r\n    scheduleChangeYn: false\r\n};\r\n\r\nconst getOutgoingResultLabel = (key: string) => {\r\n    const labels: { [key: string]: string } = {\r\n        'outgoing-success-ok': '발신 성공 상담사 연결 성공',\r\n        'outgoing-success-no': '발신 성공 상담사 연결 실패',\r\n        'fail-busy': '통화중 실패',\r\n        'fail-no-answer': '무응답 실패',\r\n        'fail-fax': '팩스/모뎀 실패',\r\n        'fail-machine': '기계음 실패',\r\n        'fail-etc': '기타실패',\r\n        'fail-wrong-num': '전화번호 오류 실패',\r\n        'fail-line': '회선오류 실패',\r\n        'fail-hangup': '고객 바로끊음 실패',\r\n        'fail-no-tone': '통화음 없음 실패',\r\n        'fail-no-dial': '다이얼톤 없음 실패',\r\n        'outgoing-attempt': '발신 시도 건수',\r\n    };\r\n    return labels[key] || key;\r\n};\r\n\r\nconst initOutgoingResult = {\r\n    'outgoing-success-ok': false,\r\n    'outgoing-success-no': true,\r\n    'fail-busy': true,\r\n    'fail-no-answer': true,\r\n    'fail-fax': false,\r\n    'fail-machine': true,\r\n    'fail-etc': false,\r\n    'fail-wrong-num': false,\r\n    'fail-line': false,\r\n    'fail-hangup': true,\r\n    'fail-no-tone': false,\r\n    'fail-no-dial': false,\r\n    'outgoing-attempt': true\r\n};\r\n\r\nconst RebroadcastSettingsPanel = () => {\r\n    // TabStore에서 현재 활성화된 탭 정보 가져오기\r\n    const { campaigns } = useMainStore();\r\n    const { activeTabId, openedTabs } = useTabStore();\r\n    const router = useRouter();\r\n\r\n    const [settings, setSettings] = useState<RebroadcastSettings>(initialSettings);\r\n    const [startDate, setStartDate] = useState<Value | null>(new Date());\r\n    const [endDate, setEndDate] = useState<Value | null>(new Date());\r\n    const [startTime, setStartTime] = useState(\"\");\r\n    const [alertState, setAlertState] = useState<CustomAlertRequest>(errorMessage);\r\n    const [broadcastType, setBroadcastType] = useState(\"reservation\");\r\n    const [outgoingResultChecked, setOutgoingResultChecked] = useState(true);\r\n    const [outgoingTypeChecked, setOutgoingTypeChecked] = useState(false);\r\n    const [callType, setCallType] = useState(\"not-sent\");\r\n    const [outgoingTimeChecked, setOutgoingTimeChecked] = useState(false);\r\n    const [timeType, setTimeType] = useState(\"final-call-date\");\r\n    const [rebroadcastList, setRebroadcastList] = useState<RebroadcastItem[]>([]);\r\n    const [selectedRebroadcastId, setSelectedRebroadcastId] = useState<number | null>(null);\r\n    const [selectedRebroadcastDetails, setSelectedRebroadcastDetails] = useState<RebroadcastItem | null>(null);\r\n    const [campaignId, setCampaignId] = useState<number>(0);\r\n    const [listRedialQuery, setListRedialQuery] = useState<string>('');\r\n    const [reservationShouldShowApply,setReservationShouldShowApply ] = useState<boolean>(false);   //적용 버튼.\r\n    const [reservationShouldShowAdd,setReservationShouldShowAdd ] = useState<boolean>(false);       //추가 버튼.\r\n    const [reservationShouldShowDelete,setReservationShouldShowDelete ] = useState<boolean>(false);       //삭제 버튼.\r\n    const [outgoingResultDisabled,setOutgoingResultDisabled ] = useState<boolean>(false);\r\n    const [sequenceNumber, setSequenceNumber] = useState<number>(1);\r\n    const [caseType, setCaseType] = useState<number>(0);\r\n    const [textType, setTextType] = useState<string>('');\r\n    const [tempCampaignManagerInfo, setTempCampaignManagerInfo] = useState<CampaignInfoUpdateRequest>(CampaignManagerInfo);\r\n\r\n    // 발신결과 체크박스 상태 관리\r\n    const [selectedOutgoingResults, setSelectedOutgoingResults] = useState<{ [key: string]: boolean }>(initOutgoingResult);\r\n\r\n    const resetAllStates = () => {\r\n        setStartDate(new Date());\r\n        setEndDate(new Date());\r\n        setStartTime(\"0000\");\r\n        setTimeType(\"final-call-date\"); //발신시간.\r\n        setCallType(\"not-sent\");\r\n        \r\n        setSelectedRebroadcastId(null);\r\n        setSelectedRebroadcastDetails(null);\r\n\r\n        // 모드별 체크박스 상태 설정\r\n        setOutgoingResultChecked(true);\r\n        setOutgoingTypeChecked(false);\r\n        setOutgoingTimeChecked(false);\r\n    };\r\n\r\n    const handleDateChange = (value: Value) => {\r\n        if (value instanceof Date || value === null) {\r\n            let tempStartDate = '';\r\n            if (value != null) {\r\n                tempStartDate = value.getFullYear() +\r\n                    ('0' + (value.getMonth() + 1)).slice(-2) +\r\n                    ('0' + value.getDate()).slice(-2);\r\n            }\r\n            setStartDate(value);\r\n            setSettings(prev => ({\r\n                ...prev,\r\n                startDate: tempStartDate,\r\n                changeYn: true,\r\n                scheduleChangeYn: true\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleEndDateChange = (value: Value) => {\r\n        setEndDate(value);\r\n    };\r\n\r\n    //시작시간 이벤트.\r\n    const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        if (value.length <= 4 && /^\\d*$/.test(value)) {\r\n            setStartTime(value);\r\n        }\r\n    };\r\n\r\n    const handleOutgoingResultChange = (id: string, checked: boolean) => {\r\n        setSelectedOutgoingResults(prev => ({\r\n            ...prev,\r\n            [id]: checked\r\n        }));\r\n    };\r\n\r\n    const MakeRedialPacket = () => {\r\n        let returnValue = '00';\r\n        //발신결과.\r\n        if( outgoingResultChecked ){            \r\n            if( selectedOutgoingResults['outgoing-success-ok'] && selectedOutgoingResults['outgoing-success-no'] ){\r\n                returnValue += \"35210@\";\r\n            }else{\r\n                //80954, \"발신 성공 상담사 연결 성공\"\r\n                if( selectedOutgoingResults['outgoing-success-ok'] ){\r\n                    returnValue += \"35233@\";\r\n                }\r\n                //80955, \"발신 성공 상담사 연결 실패\"\r\n                if( selectedOutgoingResults['outgoing-success-no'] ){\r\n                    returnValue += \"35223@35213@\";\r\n                }\r\n            }\r\n            //80174, \"통화중 실패\")\r\n            if( selectedOutgoingResults['fail-busy'] ){\r\n                returnValue += \"26232@\";\r\n            }\r\n            //80175, \"무응답 실패\")\r\n            if( selectedOutgoingResults['fail-no-answer'] ){\r\n                returnValue += \"26233@\";\r\n            }\r\n            //80176, \"팩스/모뎀 실패)\r\n            if( selectedOutgoingResults['fail-fax'] ){\r\n                returnValue += \"26234@\";\r\n            }\r\n            //80177, \"기계음 실패\"\r\n            if( selectedOutgoingResults['fail-machine'] ){\r\n                returnValue += \"26235@\";\r\n            }\r\n            //80178, \"기타실패\"\r\n            if( selectedOutgoingResults['fail-etc'] ){\r\n                returnValue += \"26236@\";\r\n            }\r\n            //80179, \"전화번호 오류 실패\"\r\n            if( selectedOutgoingResults['fail-wrong-num'] ){\r\n                returnValue += \"26237@\";\r\n            }\r\n            //80180, \"회선오류 실패\"\r\n            if( selectedOutgoingResults['fail-line'] ){\r\n                returnValue += \"26239@\";\r\n            }\r\n            //80181, \"고객 바로끊음 실패\"\r\n            if( selectedOutgoingResults['fail-hangup'] ){\r\n                returnValue += \"262310@\";\r\n            }\r\n            //80182, \"통화음 없음 실패\"\r\n            if( selectedOutgoingResults['fail-no-tone'] ){\r\n                returnValue += \"262311@\";\r\n            }\r\n            //80183, \"다이얼톤 없음 실패\"\r\n            if( selectedOutgoingResults['fail-no-dial'] ){\r\n                returnValue += \"262312@\";\r\n            }\r\n            //80185, \"발신 시도 건수\"\r\n            if( selectedOutgoingResults['outgoing-attempt'] ){\r\n                returnValue += \"26238@\";\r\n            }\r\n        }\r\n        //발신구분 체크박스.\r\n        if( outgoingTypeChecked ){\r\n            returnValue += \"^\";\r\n            //발신되지 않은 예약콜\r\n            if( callType === 'not-sent'){\r\n                returnValue += \"402399\";\r\n            }\r\n            //발신되어진 예약콜\r\n            if( callType === 'sent'){\r\n                returnValue += \"4023100\";\r\n            }\r\n        }\r\n        //발신시간 체크박스\r\n        if( outgoingTimeChecked ){\r\n            if(!outgoingResultChecked && !outgoingTypeChecked ){\r\n                // 최종발신날짜\r\n                if( timeType === 'final-call-date'){\r\n                    if (startDate && endDate) {\r\n                        if (startDate instanceof Date && endDate instanceof Date) {\r\n                            returnValue += \"2714\" + startDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 000000^2715\" + endDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 235959\";\r\n                        }\r\n                    }\r\n                }else{// 재콜예약날짜\r\n                    if (startDate && endDate) {\r\n                        if (startDate instanceof Date && endDate instanceof Date) {\r\n                            returnValue += \"4315\" + startDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 000000^2715\" + endDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 235959\";\r\n                        }\r\n                    }\r\n                }\r\n            }else{\r\n                returnValue += \"^\";\r\n                // 최종발신날짜\r\n                if( timeType === 'final-call-date'){\r\n                    if (startDate && endDate) {\r\n                        if (startDate instanceof Date && endDate instanceof Date) {\r\n                            returnValue += \"(2714\" + startDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 000000^2715\" + endDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 235959)\";\r\n                        }\r\n                    }\r\n                }else{// 재콜예약날짜\r\n                    if (startDate && endDate) {\r\n                        if (startDate instanceof Date && endDate instanceof Date) {\r\n                            returnValue += \"(4315\" + startDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 000000^2715\" + endDate.toISOString().slice(0, 10).replace(/-/g, '') + \" 235959)\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if( returnValue.lastIndexOf('@') === returnValue.length-1 ){\r\n            returnValue = returnValue.substring(0,returnValue.length-1);\r\n        }\r\n\r\n        return returnValue;\r\n    };\r\n\r\n    //재발송 예약 추가 버튼 클릭 이벤트.\r\n    const handleAddRebroadcast = () => {\r\n        const redialCondition = MakeRedialPacket();\r\n        const newRebroadcast: RebroadcastItem = {\r\n            id: sequenceNumber,\r\n            scheduleStartDate: \"\",\r\n            scheduleStartTime: '0000',\r\n            outgoingResults: [],\r\n            outgoingType: \"\",\r\n            outgoingTime: {\r\n                type: \"\",\r\n                startDate: \"\",\r\n                endDate: \"\"\r\n            },\r\n            run_flag: 0,\r\n            redialCondition:'',\r\n            isDummy: true\r\n        };\r\n        //버튼 설정.        \r\n        setReservationShouldShowApply(true);            \r\n        setReservationShouldShowAdd(false);\r\n        setReservationShouldShowDelete(false);\r\n        //발신결과 disabled 설정.\r\n        setOutgoingResultDisabled(false);   \r\n\r\n        setSelectedRebroadcastId(sequenceNumber);\r\n\r\n        setTextType('재발신 추가중');\r\n        setRebroadcastList([...rebroadcastList, newRebroadcast]);\r\n        resetAllStates();\r\n    };\r\n\r\n    //삭제 버튼 클릭 이벤트.\r\n    const handleRemoveRebroadcast = () => {\r\n        if (selectedRebroadcastId !== null && rebroadcastList.some(item => item.id === selectedRebroadcastId)) {\r\n            fetchAutoRedialDelete({\r\n              campaign_id: Number(campaignId)\r\n              , sequence_number: selectedRebroadcastId\r\n            });\r\n            setTextType('');\r\n        }\r\n    };\r\n\r\n    const handleWorkDelete = () => {\r\n        const tempRebroadcastList = rebroadcastList.filter(data => !data.isDummy);\r\n        setRebroadcastList(tempRebroadcastList);\r\n        setAlertState(prev => ({ ...prev, isOpen: false }));\r\n        //버튼 설정.        \r\n        setReservationShouldShowApply(false);            \r\n        setReservationShouldShowAdd(true);\r\n        setReservationShouldShowDelete(true);\r\n        //발신결과 disabled 설정. \r\n        setOutgoingResultChecked(false);\r\n        setOutgoingTypeChecked(false);\r\n        setOutgoingTimeChecked(false);\r\n        setOutgoingResultDisabled(true);  \r\n        if( tempRebroadcastList.length > 0 ){\r\n            setSelectedRebroadcastId(tempRebroadcastList[0].id);\r\n            if( tempRebroadcastList[0].run_flag === 2){\r\n                setTextType('Time out');\r\n            }else if( tempRebroadcastList[0].run_flag === 1){\r\n                setTextType('실행');\r\n            }else if( tempRebroadcastList[0].run_flag === 0){\r\n                setTextType('미실행');\r\n            }\r\n        }\r\n    };\r\n\r\n    //그리드 클릭이벤트..\r\n    const handleSelectRebroadcast = (id: number) => {\r\n\r\n        // 더미 항목이 있는지 확인\r\n        const hasDummyItem = rebroadcastList.some(item => item.isDummy);\r\n\r\n        if (hasDummyItem) {\r\n            setAlertState({\r\n                ...errorMessage,\r\n                isOpen: true,\r\n                message: '재발신 추가중입니다. \\n추가를 중단하고 삭제하시겠습니까?',\r\n                title: '알림',\r\n                type: '1',\r\n                onClose: handleWorkDelete,\r\n                onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n            });\r\n            return;\r\n        }\r\n\r\n        // 기존 선택 로직\r\n        setSelectedRebroadcastId(prevId => (prevId === id ? null : id));\r\n\r\n        // 선택된 항목 찾기\r\n        const selected = rebroadcastList.find(item => item.id === id);\r\n\r\n        if (selected) {\r\n            setSelectedRebroadcastDetails(selected);\r\n\r\n            // 날짜 및 시간 설정\r\n            if (selected.scheduleStartDate) {\r\n                setStartDate(new Date(selected.scheduleStartDate));\r\n            }\r\n\r\n            if (selected.scheduleStartTime) {\r\n                setStartTime(selected.scheduleStartTime);\r\n            }\r\n\r\n            if (selected.outgoingType) {\r\n                setCallType(selected.outgoingType);\r\n            }\r\n\r\n            if (selected.outgoingTime && selected.outgoingTime.type) {\r\n                setTimeType(selected.outgoingTime.type);\r\n            }\r\n\r\n            if (selected.outgoingTime && selected.outgoingTime.endDate) {\r\n                setEndDate(new Date(selected.outgoingTime.endDate));\r\n            }\r\n            if( selected.run_flag === 2){\r\n                setTextType('Time out');\r\n            }else if( selected.run_flag === 1){\r\n                setTextType('실행');\r\n            }else if( selected.run_flag === 0){\r\n                setTextType('미실행');\r\n            }\r\n            setListRedialQuery(selected.redialCondition);\r\n        } else {\r\n            // 선택 해제된 경우 상태 초기화\r\n            setSelectedRebroadcastDetails(null);\r\n            resetAllStates();\r\n        }\r\n    };\r\n\r\n    //적용 버튼 클릭 이벤트.\r\n    const handleApplyRebroadcast = () => {\r\n        // 예약 모드에서 실제 데이터 처리\r\n        if (broadcastType === \"reservation\") {            \r\n            const selectedResults = Object.entries(selectedOutgoingResults)\r\n                .filter(([_, isSelected]) => isSelected)\r\n                .map(([key]) => key);\r\n\r\n            if (selectedResults.length === 0) {\r\n                setAlertState({\r\n                    isOpen: true,\r\n                    message: '최소 하나 이상의 발신결과를 선택해주세요.',\r\n                    title: '알림',\r\n                    type: '0',\r\n                    onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                    onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                });\r\n                return;\r\n            }\r\n\r\n            fetchCampaignAutoRedialInsert({\r\n                campaign_id: Number(campaignId),\r\n                sequence_number: sequenceNumber,\r\n                start_date: startDate instanceof Date ? startDate.getFullYear() + ('0' + (startDate.getMonth() + 1)).slice(-2) + ('0' + startDate.getDate()).slice(-2) + startTime + '00' : '',\r\n                redial_condition: MakeRedialPacket(),\r\n                run_flag: 0\r\n            });\r\n\r\n        }else if (broadcastType === \"realtime\") {\r\n            setCaseType(2);\r\n            fetchCampaignRedialPreviewSearch({\r\n                campaign_id: Number(campaignId),\r\n                condition: MakeRedialPacket()\r\n            });\r\n        }\r\n    };\r\n\r\n    //예약, 실시간 변경 이벤트.\r\n    const handleBroadcastTypeChange = (param:string) => {\r\n        setBroadcastType(param);        \r\n        resetAllStates();\r\n        if( param === 'realtime' ){\r\n            //버튼 설정.        \r\n            setReservationShouldShowApply(true);            \r\n            setReservationShouldShowAdd(false);\r\n            setReservationShouldShowDelete(false);\r\n            setOutgoingResultDisabled(false);  \r\n        }else{\r\n            // setShouldShowApply(reservationShouldShowApply);\r\n            if( rebroadcastList.length > 0 && rebroadcastList.filter(data => data.isDummy ).length > 0 ){\r\n                //버튼 설정.\r\n                setReservationShouldShowApply(true);\r\n                setReservationShouldShowAdd(false);\r\n                setReservationShouldShowDelete(false);\r\n            }else if( rebroadcastList.length > 0){\r\n                //첫번째 row 선택.\r\n                setSelectedRebroadcastId(rebroadcastList[0].id);\r\n                setListRedialQuery(rebroadcastList[0].redialCondition);\r\n                //발신결과 disabled 설정. \r\n                setOutgoingResultChecked(false);\r\n                setOutgoingTypeChecked(false);\r\n                setOutgoingTimeChecked(false);\r\n                setOutgoingResultDisabled(true);   \r\n                //버튼 설정.\r\n                setReservationShouldShowApply(false);\r\n                setReservationShouldShowAdd(true);\r\n                setReservationShouldShowDelete(true);\r\n            }else{\r\n                //버튼 설정.\r\n                setReservationShouldShowApply(false);\r\n                setReservationShouldShowAdd(true);\r\n                setReservationShouldShowDelete(true);\r\n            }\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if( listRedialQuery !== '' ){\r\n            if( broadcastType === 'realtime'){\r\n                setSelectedOutgoingResults(initOutgoingResult);\r\n            }else{\r\n                let outgoingSuccessOk = false;  //80954, \"발신 성공 상담사 연결 성공\"\r\n                if( listRedialQuery.indexOf('35233') > -1 ){   \r\n                    outgoingSuccessOk = true;\r\n                }\r\n                let outgoingSuccessNo = false;  //80955, \"발신 성공 상담사 연결 실패\"\r\n                if( listRedialQuery.indexOf('35223@35213') > -1 ){   \r\n                    outgoingSuccessNo = true;\r\n                }\r\n                if( listRedialQuery.indexOf('35210') > -1 ){   \r\n                    outgoingSuccessOk = true;\r\n                    outgoingSuccessNo = true;\r\n                }\r\n                let failBusy = false;           //80174, \"통화중 실패\"\r\n                if( listRedialQuery.indexOf('26232') > -1 ){   \r\n                    // 2018.07.10 Gideon #24364 삼성화재(중국) 장애현상 수정 - 아래 || str == \"0026232\" 부분 추가\r\n                    const tempList = listRedialQuery.split('@');\r\n                    if( tempList.filter(data => data === '26232' || data === '0026232').length > 0 ){\r\n                        failBusy = true;\r\n                    }\r\n                }\r\n                let failNoAnswer = false;       //80175, \"무응답 실패\"\r\n                if( listRedialQuery.indexOf('26233') > -1 ){   \r\n                    failNoAnswer = true;\r\n                }\r\n                let failFax = false;            //80176, \"팩스/모뎀 실패\"\r\n                if( listRedialQuery.indexOf('26234') > -1 ){   \r\n                    failFax = true;\r\n                }\r\n                let failMachine = false;        //80177, \"기계음 실패\"\r\n                if( listRedialQuery.indexOf('26235') > -1 ){   \r\n                    failMachine = true;\r\n                }\r\n                let failEtc = false;            //80178, \"기타실패\"\r\n                if( listRedialQuery.indexOf('26236') > -1 ){   \r\n                    failEtc = true;\r\n                }\r\n                let failWrongNum = false;       //80179, \"전화번호 오류 실패\"\r\n                if( listRedialQuery.indexOf('26237') > -1 ){   \r\n                    failWrongNum = true;\r\n                }\r\n                let failLine = false;           //80180, \"회선오류 실패\"\r\n                if( listRedialQuery.indexOf('26239') > -1 ){   \r\n                    failLine = true;\r\n                }\r\n                let failHangup = false;         //80181, \"고객 바로끊음 실패\"\r\n                if( listRedialQuery.indexOf('262310') > -1 ){   \r\n                    failHangup = true;\r\n                }\r\n                let failNoTone = false;         //80182, \"통화음 없음 실패\"\r\n                if( listRedialQuery.indexOf('262311') > -1 ){   \r\n                    failNoTone = true;\r\n                }\r\n                let failNoDial = false;         //80183, \"다이얼톤 없음 실패\r\n                if( listRedialQuery.indexOf('262312') > -1 ){   \r\n                    failNoDial = true;\r\n                }\r\n                let outgoingAttempt = false;//80185, \"발신 시도 건수\"\r\n                if( listRedialQuery.indexOf('26238') > -1 || listRedialQuery.indexOf('0026238') > -1 ){   \r\n                    outgoingAttempt = true;\r\n                }\r\n                //발신결과 체크박스.\r\n                setSelectedOutgoingResults({...initOutgoingResult\r\n                    , 'outgoing-success-ok': outgoingSuccessOk\r\n                    , 'outgoing-success-no': outgoingSuccessNo\r\n                    , 'fail-busy': failBusy\r\n                    , 'fail-no-answer': failNoAnswer\r\n                    , 'fail-fax': failFax\r\n                    , 'fail-machine': failMachine\r\n                    , 'fail-etc': failEtc\r\n                    , 'fail-wrong-num': failWrongNum\r\n                    , 'fail-line': failLine\r\n                    , 'fail-hangup': failHangup\r\n                    , 'fail-no-tone': failNoTone\r\n                    , 'fail-no-dial': failNoDial\r\n                    , 'outgoing-attempt': outgoingAttempt\r\n                });\r\n                if (listRedialQuery.indexOf(\"(\") > 0 || listRedialQuery.indexOf(\"235959\") > 0){\r\n                    if( listRedialQuery.indexOf(\"(\") > 0 ){\r\n                        const strTimes = listRedialQuery.split(/[()]/);\r\n                        if (strTimes[1].indexOf(\"2714\") > 0) // 최종발신날짜 \r\n                        {\r\n                            setTimeType(\"final-call-date\");\r\n                            setStartDate(strTimes[1].substring(4, 8) + \"-\" + strTimes[1].substring(8, 10) + \"-\" + strTimes[1].substring(10, 12));\r\n                            setEndDate(strTimes[1].substring(24, 28) + \"-\" + strTimes[1].substring(28, 30) + \"-\" + strTimes[1].substring(30, 32));\r\n                        } else {// 재콜예약날짜\r\n                            setTimeType(\"recall-date\");\r\n                            setStartDate(strTimes[1].substring(4, 8) + \"-\" + strTimes[1].substring(8, 10) + \"-\" + strTimes[1].substring(10, 12));\r\n                            setEndDate(strTimes[1].substring(24, 28) + \"-\" + strTimes[1].substring(28, 30) + \"-\" + strTimes[1].substring(30, 32));\r\n                        }\r\n                    }\r\n                    // setOutgoingTimeChecked(true);\r\n                }\r\n                //발신되지 않은 예약콜\r\n                if( listRedialQuery.indexOf('402399') > -1 ){   \r\n                    setCallType(\"not-sent\");\r\n                }\r\n                //발신되어진 예약콜\r\n                if( listRedialQuery.indexOf('4023100') > -1 ){   \r\n                    setCallType('sent');\r\n                }\r\n            }\r\n        }else{\r\n            setSelectedOutgoingResults(initOutgoingResult);\r\n        }\r\n    }, [listRedialQuery, broadcastType]);\r\n\r\n    // 캠페인 재발신 정보 리스트 조회\r\n    const { mutate: fetchCampaignAutoRedials } = useApiForAutoRedial({\r\n        onSuccess: (data) => {\r\n            if (data.result_data.length > 0) {\r\n                const tempList = data.result_data.filter(data => data.campaign_id === Number(campaignId));\r\n                if (tempList.length > 0) {                  \r\n                    const prevList = tempList.map(item => ({\r\n                        id: item.sequence_number,\r\n                        scheduleStartDate: item.start_date.substring(0, 4) + '-' + item.start_date.substring(4, 6) + '-' + item.start_date.substring(6, 8),\r\n                        scheduleStartTime: item.start_date.substring(8, 12),\r\n                        outgoingResults: [],\r\n                        outgoingType: \"\",\r\n                        outgoingTime: { type: \"\", startDate: \"\", endDate: \"\" },\r\n                        run_flag: item.run_flag,\r\n                        redialCondition: item.redial_condition,\r\n                        isDummy: false\r\n                    }));\r\n                    setRebroadcastList(prevList);\r\n                    //첫번째 row 선택.\r\n                    setSelectedRebroadcastId(prevList[0].id);\r\n                    // handleSelectRebroadcast(prevList[0].id);\r\n                    setListRedialQuery(prevList[0].redialCondition);\r\n                    //발신결과 disabled 설정.\r\n                    setOutgoingResultChecked(false);\r\n                    setOutgoingTypeChecked(false);\r\n                    setOutgoingTimeChecked(false);\r\n                    setOutgoingResultDisabled(true);    \r\n                    setSequenceNumber(Math.max(...tempList.map(item => item.sequence_number))+1);  \r\n                    \r\n                    // 선택된 항목 찾기\r\n                    const selected = prevList[0];\r\n                    setSelectedRebroadcastDetails(prevList[0]);\r\n                    // 날짜 및 시간 설정\r\n                    if (selected.scheduleStartDate) {\r\n                        setStartDate(new Date(selected.scheduleStartDate));\r\n                    }\r\n                    if (selected.scheduleStartTime) {\r\n                        setStartTime(selected.scheduleStartTime);\r\n                    }\r\n                    if (selected.outgoingType) {\r\n                        setCallType(selected.outgoingType);\r\n                    }\r\n                    if (selected.outgoingTime && selected.outgoingTime.type) {\r\n                        setTimeType(selected.outgoingTime.type);\r\n                    }\r\n                    if (selected.outgoingTime && selected.outgoingTime.endDate) {\r\n                        setEndDate(new Date(selected.outgoingTime.endDate));\r\n                    }\r\n                    if( selected.run_flag === 2){\r\n                        setTextType('Time out');\r\n                    }else if( selected.run_flag === 1){\r\n                        setTextType('실행');\r\n                    }else if( selected.run_flag === 0){\r\n                        setTextType('미실행');\r\n                    }\r\n                    setListRedialQuery(selected.redialCondition);\r\n                }\r\n            }\r\n        },onError: (data) => {      \r\n          if (data.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n              ...errorMessage,\r\n              isOpen: true,\r\n              message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n              type: '2',\r\n              onClose: () => goLogin(),\r\n            });\r\n          }\r\n        }\r\n    });\r\n    const goLogin = () => {\r\n      Cookies.remove('session_key');\r\n      router.push('/login');\r\n    }\r\n    \r\n    // 캠페인 재발신 정보 추가\r\n    const { mutate: fetchCampaignAutoRedialInsert } = useApiForCampaignAutoRedialInsert({\r\n        onSuccess: (data) => {\r\n            const tempData = data.result_data;\r\n            const processedRebroadcasts = rebroadcastList\r\n                .filter(item => item.isDummy)\r\n                .map(item => ({\r\n                    id: tempData.sequence_number,\r\n                    scheduleStartDate: tempData.start_date.substring(0,4)+'-'+tempData.start_date.substring(4,6)+'-'+tempData.start_date.substring(6,8),\r\n                    scheduleStartTime: tempData.start_date.substring(8,12),\r\n                    outgoingResults: [],\r\n                    outgoingType: callType,\r\n                    outgoingTime: {\r\n                        type: timeType,\r\n                        startDate: startDate ? startDate.toString() : '',\r\n                        endDate: endDate ? endDate.toString() : '',\r\n                    },\r\n                    run_flag: 0,\r\n                    redialCondition:tempData.redial_condition,\r\n                    isDummy: false\r\n                }));\r\n\r\n            setRebroadcastList(prevList =>\r\n                prevList.map(item =>\r\n                    item.isDummy\r\n                        ? processedRebroadcasts.find(proc => proc.id === item.id) || item\r\n                        : item\r\n                )\r\n            );\r\n            //발신결과 disabled 설정.\r\n            setOutgoingResultDisabled(true);   \r\n            setSequenceNumber(tempData.sequence_number+1);\r\n            //버튼 설정.\r\n            setReservationShouldShowApply(false);\r\n            setReservationShouldShowAdd(true);\r\n            setReservationShouldShowDelete(true);\r\n\r\n            setTextType('미실행');\r\n        },onError: (data) => {      \r\n          if (data.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n              ...errorMessage,\r\n              isOpen: true,\r\n              message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n              type: '2',\r\n              onClose: () => goLogin(),\r\n            });\r\n          }\r\n        }\r\n    });\r\n    \r\n    // 캠페인 재발신 정보 삭제 api 호출\r\n    const { mutate: fetchAutoRedialDelete } = useApiForAutoRedialDelete({\r\n        onSuccess: (data) => {            \r\n            const updatedList = rebroadcastList.filter(item => item.id !== selectedRebroadcastId);\r\n            setRebroadcastList(updatedList);\r\n            setSelectedRebroadcastId(null);\r\n\r\n            if (updatedList.length === 0) {\r\n                resetAllStates();\r\n            }\r\n        },onError: (data) => {      \r\n          if (data.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n              ...errorMessage,\r\n              isOpen: true,\r\n              message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n              type: '2',\r\n              onClose: () => goLogin(),\r\n            });\r\n          }\r\n        }\r\n    });\r\n\r\n  //캠페인 정보 수정 api 호출\r\n  const { mutate: fetchCampaignManagerUpdate } = useApiForCampaignManagerUpdate({\r\n    onSuccess: (data) => {\r\n        \r\n    }\r\n    , onError: (data) => {\r\n        \r\n    }\r\n  });\r\n\r\n    //캠페인 재발신 추출 api 호출.\r\n    const { mutate: fetchCampaignCurrentRedial } = useApiForCampaignCurrentRedial({\r\n        onSuccess: (data) => {  \r\n            if( data.result_code != 0){\r\n                let _message = '';\r\n                if( data.reason_code === -2){\r\n                    _message = '[-2]재발신 추출 에러';\r\n                }else if( data.reason_code === -1){\r\n                    _message = '[-1]실시간 재발신 요청을 실패 하였습니다. \\n서버의 상태를 확인 후 다시 시도하여 주십시오.';\r\n                }else if( data.reason_code === -3){\r\n                    _message = '[-3]상담사과 고객이 통화 중이라 캠페인 통계가 완료되지 않았습니다. \\n잠시만 기다려주세요.';\r\n                }\r\n                fetchCampaignManagerUpdate(UpdataCampaignInfo(campaigns,Number(campaignId),2));\r\n\r\n                setAlertState({\r\n                    isOpen: true,\r\n                    message: _message,\r\n                    title: '리스트 오류',\r\n                    type: '2',\r\n                    onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                    onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                });\r\n            }else{                \r\n                setAlertState({\r\n                    isOpen: true,\r\n                    message: '재발신 적용 완료했습니다.',\r\n                    title: '재발신',\r\n                    type: '2',\r\n                    onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                    onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                });\r\n            }\r\n        },\r\n        onError: (data) => {  \r\n            setAlertState({\r\n                isOpen: true,\r\n                message: data.message,\r\n                title: '리스트 오류',\r\n                type: '2',\r\n                onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n            });\r\n            fetchCampaignManagerUpdate(UpdataCampaignInfo(campaigns,Number(campaignId),2));\r\n        }\r\n    });\r\n\r\n    // 캠페인 재발신 미리보기 api 호출\r\n    const { mutate: fetchCampaignRedialPreviewSearch } = useApiForCampaignRedialPreviewSearch({\r\n        onSuccess: (data) => {  \r\n            if( caseType === 1 ){            \r\n                setAlertState({\r\n                    isOpen: true,\r\n                    message: `선택된 재발신 조건에 해당되는 리스트 수 : ${data.result_data.redial_count}`,\r\n                    title: '리스트 건수 확인',\r\n                    type: '2',\r\n                    onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                    onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                });\r\n            }else if( caseType === 2 ){\r\n                if( data.result_data.redial_count > 0){           \r\n                    // setAlertState({\r\n                    //     isOpen: true,\r\n                    //     message: `캠페인 아이디 : ${campaignIdForUpdateFromSideMenu} \\n캠페인을 바로 시작하시겠습니까?`,\r\n                    //     title: '재발신 적용',\r\n                    //     type: '1',\r\n                    //     onClose: handleCampaignCurrentRedial,\r\n                    //     onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                    // });          \r\n                    setAlertState({\r\n                        isOpen: true,\r\n                        message: `현재 발신가능한 리스트가 남아있습니다. \\n 그래도 재설정 하시겠습니까?`,\r\n                        title: '재발신 설정 경고',\r\n                        type: '1',\r\n                        onClose: () => {                           \r\n                            setAlertState({\r\n                                isOpen: true,\r\n                                message: `캠페인 아이디 : ${campaignId} \\n캠페인을 바로 시작하시겠습니까?`,\r\n                                title: '재발신 적용',\r\n                                type: '1',\r\n                                onClose: handleCampaignCurrentRedial,\r\n                                onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                            });  \r\n                        },\r\n                        onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                    });\r\n                }else{        \r\n                    setAlertState({\r\n                        isOpen: true,\r\n                        message: '적용할 건수가 없습니다.',\r\n                        title: '리스트 건수 확인',\r\n                        type: '2',\r\n                        onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                        onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        onError: (data) => {  \r\n            if (data.message.split('||')[0] === '5') {\r\n              setAlertState({\r\n                ...errorMessage,\r\n                isOpen: true,\r\n                message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n                type: '2',\r\n                onClose: () => goLogin(),\r\n              });\r\n            }else{\r\n                if( caseType === 1 ){     \r\n                    setAlertState({\r\n                        isOpen: true,\r\n                        message: '선택된 재발신 조건에 해당되는 리스트 수 : 0',\r\n                        title: '리스트 건수 확인',\r\n                        type: '2',\r\n                        onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                        onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                    });\r\n                }else if( caseType === 2 ){     \r\n                    setAlertState({\r\n                        isOpen: true,\r\n                        message: '적용할 건수가 없습니다.',\r\n                        title: '리스트 건수 확인',\r\n                        type: '2',\r\n                        onClose: () => setAlertState(prev => ({ ...prev, isOpen: false })),\r\n                        onCancle: () => setAlertState(prev => ({ ...prev, isOpen: false }))\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    //캠페인 상태 변경 api 호출\r\n    const { mutate: fetchCampaignStatusUpdate } = useApiForCampaignStatusUpdate({\r\n        onSuccess: (data) => {\r\n            if (data.result_code === 0 || data.result_code === -13) {\r\n                fetchCampaignCurrentRedial({\r\n                    campaign_id: Number(campaignId),\r\n                    condition: MakeRedialPacket()\r\n                });\r\n            } else {\r\n                setAlertState({\r\n                ...errorMessage,\r\n                isOpen: true,\r\n                message: CheckCampaignSaveReturnCode(data.reason_code),\r\n                onClose: () => setAlertState((prev) => ({ ...prev, isOpen: false })),\r\n                onCancle: () => setAlertState((prev) => ({ ...prev, isOpen: false }))\r\n                });\r\n            }\r\n        },onError: (data) => {      \r\n        if (data.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n                ...errorMessage,\r\n                isOpen: true,\r\n                message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n                type: '2',\r\n                onClose: () => goLogin(),\r\n            });\r\n        }\r\n        }\r\n    });\r\n\r\n    //캠페인 실시간 적용 이벤트.  \r\n    const handleCampaignCurrentRedial = () => {\r\n        // fetchCampaignCurrentRedial({\r\n        //     campaign_id: Number(campaignIdForUpdateFromSideMenu),\r\n        //     condition: MakeRedialPacket()\r\n        // });\r\n        const tempCampaign = campaigns.filter(data => data.campaign_id === Number(campaignId))[0];\r\n        if( tempCampaign.start_flag === 1 ){\r\n            fetchCampaignCurrentRedial({\r\n                campaign_id: Number(campaignId),\r\n                condition: MakeRedialPacket()\r\n            });\r\n        }else{\r\n            fetchCampaignStatusUpdate({\r\n                campaign_id: Number(campaignId)\r\n              , campaign_status: 1\r\n            });\r\n        }\r\n    };\r\n\r\n    //실시간 리스트 건수 확인 버튼 클릭 이벤트.\r\n    const handleCheckListCount = async () => {\r\n        setCaseType(1);\r\n        fetchCampaignRedialPreviewSearch({\r\n            campaign_id: Number(campaignId),\r\n            condition: MakeRedialPacket()\r\n        });\r\n    };\r\n    \r\n    //최초 캠페인 재발신 정보 리스트 조회 실행.\r\n    useEffect(() => {\r\n    if (activeTabId === 20) {\r\n        const tempData = openedTabs.filter(tab => tab.id === 20);\r\n        if( tempData.length > 0 && tempData[0].campaignId && tempData[0].campaignName) {\r\n            const _campaignId = Number(tempData[0].campaignId);\r\n            setCampaignId(_campaignId);\r\n            setSettings(prev => ({ ...prev, campaignId: _campaignId+'' }));\r\n            const campaign = campaigns.find(data => _campaignId === data.campaign_id);\r\n            if (campaign) {\r\n                setListRedialQuery(campaign.list_redial_query);\r\n            }\r\n            //버튼 설정.                    \r\n            setReservationShouldShowAdd(true);\r\n            setReservationShouldShowDelete(true);\r\n            fetchCampaignAutoRedials({\r\n                session_key: '',\r\n                tenant_id: 0,\r\n            });\r\n        }\r\n    }\r\n    }, [activeTabId, openedTabs,campaigns]);\r\n       \r\n    return (\r\n        <div className=\"limit-width\">\r\n            <div className=\"flex flex-col gap-6\">\r\n                <RebroadcastSettingsPanelHeader campaignId={campaignId+''} \r\n                    reservationShouldShowApply={reservationShouldShowApply}\r\n                    reservationShouldShowAdd={reservationShouldShowAdd}\r\n                    reservationShouldShowDelete={reservationShouldShowDelete}\r\n                    handleBroadcastTypeChange={handleBroadcastTypeChange} \r\n                    handleAddRebroadcast={handleAddRebroadcast}\r\n                    handleRemoveRebroadcast={handleRemoveRebroadcast}\r\n                    handleApplyRebroadcast={handleApplyRebroadcast}\r\n                    handleCheckListCount={handleCheckListCount}\r\n                    textType = {textType}\r\n                    selectedRebroadcastId = {selectedRebroadcastId}\r\n                />\r\n\r\n                <div className=\"flex gap-5 h-[580px]\">\r\n                    <div className={`flex-1 w-1/3 flex flex-col gap-5 ${broadcastType === \"realtime\" ? \"opacity-50 pointer-events-none\" : \"\"}`}>\r\n                        <div>\r\n                            <TitleWrap title=\"스케줄 재발신 설정\" />\r\n                            <div className=\"border p-2 rounded flex flex-col gap-2 py-[20px] px-[30px]\">\r\n                                <div className=\"flex items-center gap-2\">\r\n                                    <Label className=\"w-20 min-w-20\">시작날짜</Label>\r\n                                    <DatePicker\r\n                                        onChange={handleDateChange}\r\n                                        value={startDate}\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        className=\"w-full custom-calendar\"\r\n                                        calendarIcon={<CalendarIcon className=\"mr-2 h-4 w-4\" color=\"#989898\" />}\r\n                                        clearIcon={null}\r\n                                        dayPlaceholder=\"dd\"\r\n                                        monthPlaceholder=\"mm\"\r\n                                        yearPlaceholder=\"yyyy\"\r\n                                        disabled={ textType !== '재발신 추가중'}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"flex items-center gap-2\">\r\n                                    <Label className=\"w-20 min-w-20\">시작시간</Label>\r\n                                    <CustomInput\r\n                                        className=\"w-full\"\r\n                                        type=\"text\"\r\n                                        value={startTime}\r\n                                        onChange={handleTimeChange}\r\n                                        maxLength={4}\r\n                                        placeholder=\"0000\"\r\n                                        disabled={ textType !== '재발신 추가중'}                                        \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <TitleWrap title=\"예약 재발신 목록\" />\r\n                            <div className=\"border p-2 rounded h-[400px] py-[20px] px-[20px]\">\r\n                                <ul className=\"flex flex-col gap-2\">\r\n                                    { broadcastType === 'reservation'?\r\n                                        rebroadcastList.map((item, index) => (\r\n                                            <li\r\n                                                key={item.id}\r\n                                                onClick={() => handleSelectRebroadcast(item.id)}\r\n                                                className={`text-sm cursor-pointer p-[5px] ${selectedRebroadcastId === item.id\r\n                                                        ? 'bg-[#FFFAEE]'\r\n                                                        : item.isDummy\r\n                                                            ? 'bg-[#F0F0F0]'\r\n                                                            : 'hover:bg-[#FFFAEE]'\r\n                                                    }`}\r\n                                            >\r\n                                                {`${index + 1}번째 재발신`}\r\n                                                {item.isDummy && <span className=\"text-xs text-gray-500 ml-2\">(추가 중)</span>}\r\n                                            </li>\r\n                                        )):null\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-1 w-1/3 flex flex-col gap-2\">\r\n                        <div className=\"flex gap-2 items-center\">\r\n                            <CustomCheckbox\r\n                                id=\"outgoing-result\"\r\n                                checked={outgoingResultChecked}\r\n                                onCheckedChange={(checked: boolean) => setOutgoingResultChecked(checked)}\r\n                                disabled={outgoingResultDisabled}\r\n                            />\r\n                            <Label htmlFor=\"outgoing-result\" className=\"text-sm\">\r\n                                발신결과\r\n                            </Label>\r\n                        </div>\r\n                        <div className={`border p-2 rounded py-[20px] px-[20px] flex flex-col gap-2 ${!outgoingResultChecked ? \"opacity-50 pointer-events-none\" : \"\"}`} style={{ height: \"calc(100% - 29px)\" }}>\r\n                            {Object.keys(selectedOutgoingResults).map((key) => (\r\n                                <div key={key} className=\"flex gap-2 items-center\">\r\n                                    <CustomCheckbox\r\n                                        id={key}\r\n                                        checked={selectedOutgoingResults[key]}\r\n                                        onCheckedChange={(checked: boolean) => handleOutgoingResultChange(key, checked)}\r\n                                        disabled={!outgoingResultChecked}\r\n                                    />\r\n                                    <Label htmlFor={key} className=\"text-sm\">\r\n                                        {getOutgoingResultLabel(key)}\r\n                                    </Label>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-1 w-1/3 flex flex-col gap-5\">\r\n                        <div className=\"flex flex-col gap-2 h-[40%]\">\r\n                            <div className=\"flex gap-2 items-center\">\r\n                                <CustomCheckbox\r\n                                    id=\"outgoing-type\"\r\n                                    checked={outgoingTypeChecked}\r\n                                    onCheckedChange={(checked: boolean) => setOutgoingTypeChecked(checked)}\r\n                                    disabled={outgoingResultDisabled}\r\n                                />\r\n                                <Label htmlFor=\"outgoing-type\" className=\"text-sm\">\r\n                                    발신구분\r\n                                </Label>\r\n                                {/* tofix */}\r\n                                {/* <Label className=\"text-sm\">\r\n                                    {textType}\r\n                                </Label> */}\r\n                            </div>\r\n                            <div className={`border p-2 rounded py-[20px] px-[20px] flex flex-col gap-6 ${!outgoingTypeChecked ? \"opacity-50 pointer-events-none\" : \"\"}`} style={{ height: \"calc(100% - 29px)\" }}>\r\n                                <div className=\"text-sm\">재콜 구분을 선택합니다.</div>\r\n                                <CommonRadio\r\n                                    defaultValue=\"not-sent\"\r\n                                    className=\"flex gap-5 flex-col\"\r\n                                    disabled={!outgoingTypeChecked}\r\n                                    value={callType}\r\n                                    onValueChange={setCallType}\r\n                                >\r\n                                    <div className=\"flex items-center space-x-2\">\r\n                                        <CommonRadioItem value=\"not-sent\" id=\"not-sent\" disabled={!outgoingTypeChecked} />\r\n                                        <Label htmlFor=\"not-sent\">발신되지 않은 예약콜</Label>\r\n                                    </div>\r\n                                    <div className=\"flex items-center space-x-2\">\r\n                                        <CommonRadioItem value=\"sent\" id=\"sent\" disabled={!outgoingTypeChecked} />\r\n                                        <Label htmlFor=\"sent\">발신되어진 예약콜</Label>\r\n                                    </div>\r\n                                </CommonRadio>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex flex-col gap-2 h-[60%]\">\r\n                            <div className=\"flex gap-2 items-center\">\r\n                                <CustomCheckbox\r\n                                    id=\"outgoing-time\"\r\n                                    checked={outgoingTimeChecked}\r\n                                    onCheckedChange={(checked: boolean) => setOutgoingTimeChecked(checked)}\r\n                                    disabled={outgoingResultDisabled}\r\n                                />\r\n                                <Label htmlFor=\"outgoing-time\" className=\"text-sm\">\r\n                                    발신시간\r\n                                </Label>\r\n                            </div>\r\n                            <div className={`border p-2 rounded py-[20px] px-[20px] flex flex-col gap-6 ${!outgoingTimeChecked ? \"opacity-50 pointer-events-none\" : \"\"}`} style={{ height: \"calc(100% - 29px)\" }}>\r\n                                <CommonRadio\r\n                                    defaultValue=\"final-call-date\"\r\n                                    className=\"flex gap-5\"\r\n                                    disabled={!outgoingTimeChecked}\r\n                                    value={timeType}\r\n                                    onValueChange={setTimeType}\r\n                                >\r\n                                    <div className=\"flex items-center space-x-2\">\r\n                                        <CommonRadioItem value=\"final-call-date\" id=\"final-call-date\" disabled={!outgoingTimeChecked} />\r\n                                        <Label htmlFor=\"final-call-date\">최종 발신 날짜</Label>\r\n                                    </div>\r\n                                    <div className=\"flex items-center space-x-2\">\r\n                                        <CommonRadioItem value=\"recall-date\" id=\"recall-date\" disabled={!outgoingTimeChecked} />\r\n                                        <Label htmlFor=\"recall-date\">재콜 예약 날짜</Label>\r\n                                    </div>\r\n                                </CommonRadio>\r\n                                <div className=\"flex flex-col gap-3\">\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                        <Label className=\"w-20 min-w-20\">시작날짜</Label>\r\n                                        <DatePicker\r\n                                            onChange={handleDateChange}\r\n                                            disabled={!outgoingTimeChecked}\r\n                                            value={startDate}\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            className=\"w-full custom-calendar\"\r\n                                            calendarIcon={<CalendarIcon className=\"mr-2 h-4 w-4\" color=\"#989898\" />}\r\n                                            clearIcon={null}\r\n                                            dayPlaceholder=\"dd\"\r\n                                            monthPlaceholder=\"mm\"\r\n                                            yearPlaceholder=\"yyyy\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                        <Label className=\"w-20 min-w-20\">종료날짜</Label>\r\n                                        <DatePicker\r\n                                            onChange={handleEndDateChange}\r\n                                            disabled={!outgoingTimeChecked}\r\n                                            value={endDate}\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            className=\"w-full custom-calendar\"\r\n                                            calendarIcon={<CalendarIcon className=\"mr-2 h-4 w-4\" color=\"#989898\" />}\r\n                                            clearIcon={null}\r\n                                            dayPlaceholder=\"dd\"\r\n                                            monthPlaceholder=\"mm\"\r\n                                            yearPlaceholder=\"yyyy\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <CustomAlert\r\n                message={alertState.message}\r\n                title={alertState.title}\r\n                type={alertState.type}\r\n                isOpen={alertState.isOpen}\r\n                onClose={() => {\r\n                  alertState.onClose()\r\n                }}\r\n                onCancle={() => setAlertState((prev) => ({ ...prev, isOpen: false }))} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RebroadcastSettingsPanel;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}