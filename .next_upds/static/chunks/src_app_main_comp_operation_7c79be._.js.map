{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/CampaignModal.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport DataGrid, { CellClickArgs } from 'react-data-grid';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/shared/CustomSelect\";\r\nimport { useCampainManagerStore, useMainStore } from '@/store';\r\nimport { SkillListDataResponse } from '@/features/campaignManager/types/campaignManagerIndex';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport TitleWrap from \"@/components/shared/TitleWrap\";\r\nimport { useApiForSkills } from '@/features/campaignManager/hooks/useApiForSkills';\r\nimport { useApiForCallingNumber } from '@/features/campaignManager/hooks/useApiForCallingNumber';\r\nimport { useApiForCampaignSkill } from '@/features/campaignManager/hooks/useApiForCampaignSkill';\r\n\r\nconst dialModeList = [\r\n  { dial_id: 1, dial_name: 'Power' },\r\n  { dial_id: 2, dial_name: 'Progressive' },\r\n  { dial_id: 3, dial_name: 'Predictive' },\r\n  { dial_id: 4, dial_name: 'System Preview' },\r\n];\r\n\r\ninterface CampaignModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSelect: (campaignId: string, campaignName: string) => void;\r\n}\r\n\r\ninterface CampaignHeaderSearch {\r\n  tenantId: number;\r\n  campaignName: string;\r\n  dailMode: number;\r\n  skill: number;\r\n  callNumber: string;\r\n}\r\n\r\ninterface Row {\r\n  campaign_id: number;\r\n  campaign_name: string;\r\n  tenant_name: string;\r\n  skills: string;\r\n}\r\n\r\nexport default function CampaignModal({ isOpen, onClose, onSelect }: CampaignModalProps) {\r\n  const { tenants, campaigns } = useMainStore();\r\n  const { campaignSkills, setCampaignSkills, callingNumbers, setCallingNumbers } = useCampainManagerStore();\r\n  const [skills, setSkills] = useState<SkillListDataResponse[]>([]);\r\n  const [selectedCampaign, setSelectedCampaign] = useState<any>(null);\r\n  const [tenantId, setTenantId] = useState('all');\r\n  const [campaignName, setCampaignName] = useState('');\r\n  const [dailMode, setDailMode] = useState('all');\r\n  const [skill, setSkill] = useState('all');\r\n  const [callNumber, setCallNumber] = useState('');\r\n  const [tempSkills, setTempSkills] = useState<SkillListDataResponse[]>([]);\r\n  const [filteredRows, setFilteredRows] = useState<Row[]>([]);\r\n\r\n  // 발신번호\r\n  const { mutate: fetchCallingNumbers } = useApiForCallingNumber({\r\n    onSuccess: (data) => {\r\n      setCallingNumbers(data.result_data||[]);\r\n    }\r\n  });\r\n\r\n  // 검색 스킬\r\n  const { mutate: fetchSkills } = useApiForSkills({\r\n    onSuccess: (data) => {\r\n      setSkills(data.result_data);\r\n    }\r\n  });\r\n\r\n  // 그리드스킬 조회\r\n  const { mutate: fetchCampaignSkills } = useApiForCampaignSkill({\r\n    onSuccess: (data) => {\r\n      setCampaignSkills(data.result_data);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchSkills({\r\n      tenant_id_array: tenants.map(t => t.tenant_id)\r\n    });\r\n\r\n    fetchCampaignSkills({\r\n      session_key: '',\r\n      tenant_id: 0,\r\n    });\r\n    \r\n    fetchCallingNumbers({\r\n      session_key: '',\r\n      tenant_id: 0,\r\n    });\r\n  }, [tenants, fetchSkills, fetchCallingNumbers, fetchCampaignSkills]);\r\n\r\n  const columns = useMemo(() => [\r\n    { \r\n      key: 'campaign_id', \r\n      name: '캠페인 아이디',\r\n      width: 150,\r\n    },\r\n    { \r\n      key: 'campaign_name', \r\n      name: '캠페인 이름',\r\n      width: 244,\r\n    },\r\n    { \r\n      key: 'tenant_name', \r\n      name: '테넌트',\r\n      width: 150,\r\n    },\r\n    { \r\n      key: 'skills', \r\n      name: '스킬',\r\n      width: 200,\r\n    }\r\n  ], []);\r\n\r\n  const rows = useMemo(() => \r\n    campaigns.map((campaign) => {\r\n      const tenant = tenants.find(t => t.tenant_id === campaign.tenant_id);\r\n      \r\n      // 캠페인에 해당하는 스킬 ID 배열 찾기\r\n      const campaignSkill = campaignSkills\r\n        .find(c => c.campaign_id === campaign.campaign_id);\r\n      \r\n      // 스킬 ID에 해당하는 스킬 이름 찾기\r\n      const skillNames = skills\r\n        .filter(skill => campaignSkill?.skill_id?.includes(skill.skill_id))\r\n        .map(skill => skill.skill_name)\r\n        .join(', ');\r\n\r\n      return {\r\n        campaign_id: campaign.campaign_id,\r\n        campaign_name: campaign.campaign_name,\r\n        tenant_name: tenant?.tenant_name || '',\r\n        skills: skillNames,\r\n      };\r\n    }), \r\n    [campaigns, tenants, skills, campaignSkills]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setFilteredRows(rows);\r\n  }, [rows]);\r\n\r\n  const handleCellClick = ({ row }: CellClickArgs<Row>) => {\r\n    const campaign = campaigns.find(c => c.campaign_id === row.campaign_id);\r\n    if (campaign) {\r\n      setSelectedCampaign(campaign);\r\n    }\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    if (selectedCampaign) {\r\n      onSelect(\r\n        selectedCampaign.campaign_id.toString(),\r\n        selectedCampaign.campaign_name\r\n      );\r\n    }\r\n    onClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSelectedCampaign(null);\r\n    onSelect('', '');\r\n    onClose();\r\n  };\r\n\r\n  const onHeaderSearch = () => {\r\n    const param: CampaignHeaderSearch = {\r\n      tenantId: tenantId === 'all' ? -1 : Number(tenantId),\r\n      campaignName: campaignName,\r\n      dailMode: dailMode === 'all' ? -1 : Number(dailMode),\r\n      skill: skill === 'all' ? -1 : Number(skill),\r\n      callNumber: callNumber,\r\n    };\r\n    \r\n    // Filter campaigns based on search parameters\r\n    const filteredCampaigns = campaigns.filter(campaign => {\r\n      // Tenant filter\r\n      if (param.tenantId !== -1 && campaign.tenant_id !== param.tenantId) {\r\n        return false;\r\n      }\r\n      \r\n      // Campaign name filter\r\n      if (param.campaignName && !campaign.campaign_name.toLowerCase().includes(param.campaignName.toLowerCase())) {\r\n        return false;\r\n      }\r\n      \r\n      // Dial mode filter\r\n      if (param.dailMode !== -1 && campaign.dial_mode !== param.dailMode) {\r\n        return false;\r\n      }\r\n      \r\n      // Skill filter\r\n      if (param.skill !== -1) {\r\n        const campaignSkill = campaignSkills\r\n          .find(c => c.campaign_id === campaign.campaign_id);\r\n        if (!campaignSkill?.skill_id?.includes(param.skill)) {\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      // Call number filter\r\n      if (param.callNumber) {\r\n        const campaignCallingNumber = callingNumbers\r\n          .find(c => c.campaign_id === campaign.campaign_id)\r\n          ?.calling_number;\r\n          \r\n        if (!campaignCallingNumber?.toLowerCase().includes(param.callNumber.toLowerCase())) {\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    setFilteredRows(\r\n      filteredCampaigns.map(campaign => {\r\n        const tenant = tenants.find(t => t.tenant_id === campaign.tenant_id);\r\n        \r\n        // 캠페인에 해당하는 스킬 ID 배열 찾기\r\n        const campaignSkill = campaignSkills\r\n          .find(c => c.campaign_id === campaign.campaign_id);\r\n        \r\n        // 스킬 ID에 해당하는 스킬 이름 찾기\r\n        const skillNames = skills\r\n          .filter(skill => campaignSkill?.skill_id?.includes(skill.skill_id))\r\n          .map(skill => skill.skill_name)\r\n          .join(', ');\r\n\r\n        return {\r\n          campaign_id: campaign.campaign_id,\r\n          campaign_name: campaign.campaign_name,\r\n          tenant_name: tenant?.tenant_name || '',\r\n          skills: skillNames,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeof tenantId != 'undefined') {\r\n      if (tenantId === 'all') {\r\n        setTempSkills(skills);\r\n      } else {\r\n        setTempSkills(skills.filter((skill) => skill.tenant_id === Number(tenantId)));\r\n      }\r\n    }\r\n    setSkill('all');\r\n  }, [tenantId, skills]);\r\n\r\n  const modalContent = (\r\n    <div className=\"w-full\">\r\n      {/* Search Section */}\r\n      <TitleWrap\r\n        title=\"조회조건\"\r\n        buttons={[\r\n          { \r\n            label: \"적용\", \r\n            onClick: onHeaderSearch,\r\n          },\r\n        ]}\r\n      />\r\n      \r\n      {/* Search Fields */}\r\n      <div className=\"search-wrap flex flex-col gap-2\">\r\n        <div className=\"flex gap-2\">\r\n          <div className=\"flex items-center gap-1\">\r\n            <Label className=\"w-20 min-w-20\">테넌트</Label>\r\n            <div className='w-[140px]'>\r\n              <Select value={tenantId} onValueChange={setTenantId}>\r\n                <SelectTrigger className=\"w-[140px]\">\r\n                  <SelectValue placeholder=\"테넌트\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">전체</SelectItem>\r\n                  {tenants.map(option => (\r\n                    <SelectItem key={option.tenant_id} value={option.tenant_id+''}>{option.tenant_name}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Label className=\"w-20 min-w-20\">캠페인이름</Label>\r\n            <CustomInput \r\n              type=\"text\" \r\n              value={campaignName}\r\n              onChange={(e) => setCampaignName(e.target.value)}\r\n              className=\"w-[140px]\"\r\n            />\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Label className=\"w-20 min-w-20\">다이얼모드</Label>\r\n            <div className='w-[140px]'>\r\n              <Select value={dailMode} onValueChange={setDailMode}>\r\n                <SelectTrigger className=\"\">\r\n                  <SelectValue placeholder=\"다이얼모드\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">전체</SelectItem>\r\n                  {dialModeList.map(option => (\r\n                    <SelectItem key={option.dial_id} value={option.dial_id+''}>{option.dial_name}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex gap-2\">\r\n          <div className=\"flex items-center gap-1\">\r\n            <Label className=\"w-20 min-w-20\">스킬</Label>\r\n            <div className='w-[140px]'>\r\n              <Select value={skill} onValueChange={setSkill}>\r\n                <SelectTrigger className=\"w-[140px]\">\r\n                  <SelectValue placeholder=\"스킬\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">전체</SelectItem>\r\n                  {tempSkills.map(option => (\r\n                    <SelectItem key={option.skill_id} value={option.skill_id+''}>{option.skill_name}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Label className=\"w-20 min-w-20\">발신번호</Label>\r\n            <CustomInput \r\n              type=\"text\" \r\n              value={callNumber}\r\n              onChange={(e) => setCallNumber(e.target.value)}\r\n              className=\"w-[140px]\"\r\n              placeholder=\"발신번호 입력\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <TitleWrap \r\n        title=\"캠페인 검색목록\" \r\n        totalCount={filteredRows.length} \r\n        className='mt-[14px]'\r\n      />\r\n\r\n      {/* Grid */}\r\n      <div className=\"grid-custom-wrap h-[400px]\">\r\n        <DataGrid\r\n          columns={columns}\r\n          rows={filteredRows}\r\n          className=\"grid-custom\"\r\n          rowKeyGetter={(row) => row.campaign_id}\r\n          onCellClick={handleCellClick}\r\n          selectedRows={selectedCampaign ? new Set<number>([selectedCampaign.campaign_id]) : new Set<number>()}\r\n          rowClass={(row) => \r\n            selectedCampaign?.campaign_id === row.campaign_id ? 'bg-[#FFFAEE]' : ''\r\n          }\r\n          rowHeight={26}\r\n          headerRowHeight={26}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CustomAlert\r\n      isOpen={isOpen}\r\n      title=\"캠페인 조회\"\r\n      message={modalContent}\r\n      type=\"1\"\r\n      onClose={handleConfirm}\r\n      onCancle={handleClose}\r\n      width=\"max-w-modal\" \r\n    />\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 649, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/CampaignNumberChange/CampaignLayout.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport DataGrid from \"react-data-grid\";\r\nimport { MainDataResponse } from '@/features/auth/types/mainIndex';\r\nimport { useMainStore, useCampainManagerStore, useAuthStore } from '@/store';\r\nimport CampaignModal from '../CampaignModal';\r\nimport { useApiForCallingNumber } from '@/features/campaignManager/hooks/useApiForCallingNumber';\r\n\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { useApiForCallingNumberUpdate } from '@/features/campaignManager/hooks/useApiForCallingNumberUpdate';\r\nimport { useApiForCallingNumberInsert } from '@/features/campaignManager/hooks/useApiForCallingNumberInsert';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { useRouter } from 'next/navigation';\r\nimport Cookies from 'js-cookie';\r\nimport { useApiForCallingNumberDelete } from '@/features/campaignManager/hooks/useApiForCallingNumberDelete';\r\nimport OnlyNumberInput from '@/components/shared/OnlyNumberInput';\r\n\r\ntype GridRow = MainDataResponse & {\r\n  calling_number: string;\r\n};\r\n\r\nconst errorMessage = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '로그인',\r\n  type: '2',\r\n};\r\n\r\nfunction CampaignLayout() {\r\n  const { tenant_id } = useAuthStore();\r\n  const { campaigns, setSelectedCampaign } = useMainStore();\r\n  const { callingNumbers, setCallingNumbers } = useCampainManagerStore();\r\n  \r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState<GridRow | null>(null);\r\n  const [selectedCampaignId, setSelectedCampaignId] = useState('');\r\n  const [selectedCampaignName, setSelectedCampaignName] = useState('');\r\n  const [selectedCallingNumber, setSelectedCallingNumber] = useState('');\r\n  const [isNewMode, setIsNewMode] = useState(false); \r\n\r\n  const router = useRouter();\r\n\r\n  const [alertState, setAlertState] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    title: '알림',\r\n    type: '2',\r\n    onConfirm: () => {},\r\n    onCancel: () => {}\r\n  });\r\n\r\n  const showConfirm = (message: string, onConfirm: () => void) => { // 취소 버튼 있음\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '확인',\r\n      type: '1',\r\n      onConfirm: () => {\r\n        onConfirm();\r\n        closeAlert();\r\n      },\r\n      onCancel: closeAlert\r\n    });\r\n  };\r\n\r\n  const showAlert = (message: string) => { // 취소 버튼 없음\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '알림',\r\n      type: '2',\r\n      onConfirm: closeAlert,\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlertState(prev => ({ ...prev, isOpen: false }));\r\n  };\r\n\r\n  // 발신번호 조회\r\n  const { mutate: fetchCallingNumbers } = useApiForCallingNumber({\r\n    onSuccess: (data) => {\r\n      // 데이터 유효성 검사 추가\r\n      if (data && data.result_data && Array.isArray(data.result_data)) {\r\n        setCallingNumbers(data.result_data);\r\n      } else {\r\n        // 빈 데이터나 잘못된 형식의 데이터가 왔을 때 빈 배열로 설정\r\n        setCallingNumbers([]);\r\n      }\r\n    },\r\n    onError: (data) => {\r\n      // 에러 발생 시 callingNumbers를 빈 배열로 설정\r\n      setCallingNumbers([]);\r\n      showAlert('발신번호 조회 중 오류가 발생했습니다: ' + data.message);\r\n      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n\r\n  //캠페인 발신번호 추가 api 호출\r\n  const { mutate: fetchCallingNumberInsert } = useApiForCallingNumberInsert({\r\n    onSuccess: (data) => {\r\n      fetchCallingNumbers({\r\n        session_key: '',\r\n        tenant_id: tenant_id,\r\n      });\r\n      // 신규 모드 해제하고 선택 상태 유지\r\n      setIsNewMode(false);\r\n      showAlert('새로운 발신번호가 성공적으로 저장되었습니다.');\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('발신번호 저장 중 오류가 발생했습니다: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 발신번호 수정\r\n  const { mutate: fetchCallingNumberUpdate } = useApiForCallingNumberUpdate({\r\n    onSuccess: (data) => {\r\n      fetchCallingNumbers({\r\n        session_key: '',\r\n        tenant_id: tenant_id,\r\n      });\r\n      // 신규 모드 해제하고 선택 상태 유지\r\n      setIsNewMode(false);\r\n      showAlert('발신번호가 성공적으로 수정되었습니다.');\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('발신번호 수정 중 오류가 발생했습니다: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 발신번호 삭제\r\n  const { mutate: fetchCallingNumberDelete } = useApiForCallingNumberDelete({\r\n    onSuccess: (data) => {\r\n      fetchCallingNumbers({\r\n        session_key: '',\r\n        tenant_id: tenant_id,\r\n      });\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('발신번호 수정 중 오류가 발생했습니다: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 컴포넌트 마운트 시 발신번호 조회  ######\r\n  useEffect(() => {\r\n    fetchCallingNumbers({\r\n      session_key: '',\r\n      tenant_id: tenant_id,\r\n    });\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // 키보드 이벤트 리스너 추가\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'ArrowDown') {\r\n        handleNew();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  \r\n  // 목록 새로고침 후 현재 선택된 캠페인 정보를 유지하는 useEffect 추가\r\n  useEffect(() => {\r\n    // callingNumbers가 업데이트되고 selectedCampaignId가 있을 때\r\n    if (selectedCampaignId && !isNewMode) {\r\n      const campaignIdNum = Number(selectedCampaignId);\r\n      \r\n      // 새로운 목록에서 현재 선택된 캠페인 찾기\r\n      const updatedCallingNumber = callingNumbers.find(\r\n        num => num.campaign_id === campaignIdNum\r\n      );\r\n      \r\n      if (updatedCallingNumber) {\r\n        // 발신번호 업데이트\r\n        setSelectedCallingNumber(updatedCallingNumber.calling_number);\r\n        \r\n        // 해당 행을 그리드에서 선택 상태로 유지\r\n        const campaign = campaigns.find(c => c.campaign_id === campaignIdNum);\r\n        if (campaign) {\r\n          setSelectedRow({\r\n            ...campaign,\r\n            calling_number: updatedCallingNumber.calling_number\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [callingNumbers, selectedCampaignId, isNewMode, campaigns]);\r\n\r\n  // 발신번호 업데이트 함수\r\n  const updateCallingNumber = (campaignId: number) => {\r\n    const callingNumber = callingNumbers.find(\r\n      num => num.campaign_id === campaignId\r\n    );\r\n    setSelectedCallingNumber(callingNumber?.calling_number || '');\r\n  };\r\n\r\n  // 그리드 열 정의\r\n  const columns = useMemo(() => [\r\n    {\r\n      key: 'campaign_id',\r\n      name: '캠페인 아이디',\r\n    },\r\n    {\r\n      key: 'campaign_name',\r\n      name: '캠페인 이름',\r\n    },\r\n    {\r\n      key: 'calling_number',\r\n      name: '발신번호',\r\n    }\r\n  ], []);\r\n\r\n  // 그리드 행 데이터 생성\r\n  const rows = useMemo(() => {\r\n    // campaigns나 callingNumbers가 없거나 빈 배열인 경우 빈 배열 반환\r\n    if (!campaigns || !Array.isArray(campaigns) || campaigns.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    // callingNumbers가 없는 경우 빈 발신번호로 처리\r\n    const safeCallingNumbers = Array.isArray(callingNumbers) ? callingNumbers : [];\r\n    \r\n    return campaigns.map(campaign => {\r\n      // campaign이 유효한지 확인\r\n      if (!campaign || typeof campaign !== 'object') return null;\r\n      \r\n      // callingNumbers에서 캠페인 ID에 해당하는 발신번호 찾기\r\n      const callingNumber = safeCallingNumbers.find(\r\n        num => num && campaign && num.campaign_id === campaign.campaign_id\r\n      );\r\n      return {\r\n        ...campaign,\r\n        calling_number: callingNumber?.calling_number || ''\r\n      };\r\n    })\r\n    .filter(Boolean) // null 값 제거\r\n    .filter((row): row is GridRow => row !== null && row.calling_number !== '') // 발신번호가 있는 행만 필터링\r\n    .sort((a, b) => Number(a.campaign_id) - Number(b.campaign_id)); // #### 오름차순 정리를 위한 2차 sort    \r\n  }, [campaigns, callingNumbers]);\r\n\r\n  // 그리드 셀 클릭 핸들러\r\n  const handleCellClick = (args: { row: GridRow }) => {\r\n    setSelectedRow(args.row);\r\n    setSelectedCampaign(args.row);\r\n    setSelectedCampaignId(args.row.campaign_id.toString());\r\n    setSelectedCampaignName(args.row.campaign_name);\r\n    setSelectedCallingNumber(args.row.calling_number || '');\r\n    setIsNewMode(false); // 그리드 선택 시 신규 모드 해제\r\n  };\r\n\r\n  const getRowClass = (row: GridRow) => {\r\n    return selectedRow?.campaign_id === row.campaign_id ? 'bg-[#FFFAEE]' : ''; \r\n  };\r\n\r\n  // 모달에서 캠페인 선택 시 호출되는 핸들러\r\n  // 캠페인 아이디와 이름을 받아서 상태 업데이트 및 발신번호 조회\r\n  const handleModalSelect = (campaignId: string, campaignName: string) => {\r\n    setSelectedCampaignId(campaignId);\r\n    setSelectedCampaignName(campaignName);\r\n    const campaignIdNum = Number(campaignId);\r\n    updateCallingNumber(campaignIdNum);\r\n    \r\n    const campaign = campaigns.find(c => c.campaign_id === campaignIdNum);\r\n    if (campaign) {\r\n      const campaignWithCallingNumber: GridRow = {\r\n        ...campaign,\r\n        calling_number: callingNumbers.find(num => num.campaign_id === campaign.campaign_id)?.calling_number || ''\r\n      };\r\n      setSelectedRow(campaignWithCallingNumber);\r\n      setSelectedCampaign(campaign);\r\n    }\r\n  };\r\n\r\n  // 발신번호 저장 버튼 핸들러\r\n  const handleSave = () => {\r\n    if (!selectedCampaignId) {\r\n      showAlert('대상캠페인을 선택해주세요.')\r\n      return;\r\n    }\r\n\r\n    if (!selectedCallingNumber || selectedCallingNumber.trim().length === 0) {\r\n      showAlert('발신번호를 입력해주세요.')\r\n      return;\r\n    }\r\n\r\n    const isNumber = /^[0-9]+$/.test(selectedCallingNumber);\r\n\r\n    if (!isNumber) {\r\n      showAlert('발신번호는 숫자로만 입력해주세요.')\r\n      return;\r\n    }\r\n\r\n    // 발신번호가 이미 존재하는지 확인\r\n    const existingCallingNumber = callingNumbers.find(num => num.campaign_id === Number(selectedCampaignId));\r\n    const saveRequest = {\r\n      campaign_id: Number(selectedCampaignId),\r\n      calling_number: selectedCallingNumber,\r\n    };\r\n\r\n    if (existingCallingNumber) {\r\n      fetchCallingNumberUpdate(saveRequest);\r\n      // showAlert은 mutate의 onSuccess에서 처리\r\n    } else {\r\n      fetchCallingNumberInsert(saveRequest);\r\n      // showAlert은 mutate의 onSuccess에서 처리\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    // 선택된 캠페인이 없을 경우 알림\r\n    if (!selectedCampaignId || selectedCampaignId.trim() === '') {\r\n      showAlert('삭제할 발신번호의 캠페인을 먼저 선택해주세요.');\r\n      return;\r\n    }\r\n  \r\n    // 발신번호가 없는 경우 알림\r\n    if (!selectedCallingNumber || selectedCallingNumber.trim() === '') {\r\n      showAlert('선택한 캠페인에 등록된 발신번호가 없습니다.');\r\n      return;\r\n    }\r\n  \r\n    // 삭제 확인 알림\r\n    showConfirm(\r\n      `선택된 캠페인 [${selectedCampaignName}]의 발신번호를 삭제하시겠습니까? \\n\\n ※주의: 삭제시 데이터베이스에서 완전 삭제됩니다. \\n다시 한번 확인해 주시고 삭제해 주세요.`,\r\n      () => {\r\n        // 확인 버튼 클릭 시 실행될 함수\r\n        fetchCallingNumberDelete(\r\n          {\r\n            campaign_id: Number(selectedCampaignId),\r\n            calling_number: selectedCallingNumber\r\n          }, \r\n          {\r\n            onSuccess: (data) => {\r\n              showAlert('발신번호가 성공적으로 삭제되었습니다.');\r\n              \r\n              // 삭제 후 데이터 초기화\r\n              setSelectedRow(null);\r\n              setSelectedCampaign(null);\r\n              setSelectedCampaignId('');\r\n              setSelectedCampaignName('');\r\n              setSelectedCallingNumber('');\r\n              setIsNewMode(true); // 삭제 후 신규 모드로 변경\r\n            }\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  // 신규 버튼 핸들러\r\n  const handleNew = () => {\r\n    setSelectedRow(null);\r\n    setSelectedCampaign(null);\r\n    setSelectedCampaignId('');\r\n    setSelectedCampaignName('');\r\n    setSelectedCallingNumber('');\r\n    setIsNewMode(true); // 신규 모드 활성화\r\n  };\r\n\r\n  // 필드 비활성화 여부를 결정하는 함수\r\n  const isCampaignFieldDisabled = () => {\r\n    // 신규 모드가 아니면 캠페인 필드 비활성화\r\n    return !isNewMode;\r\n  };\r\n\r\n  const isCallingNumberDisabled = () => {\r\n    // 캠페인이 선택되지 않았으면 발신번호 필드 비활성화\r\n    return !selectedCampaignId;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-8\">\r\n      {/* 왼쪽 그리드 */}\r\n      <div className=\"w-[580px]\">\r\n        <div className='grid-custom-wrap h-[230px]'>\r\n          <DataGrid<GridRow>\r\n            columns={columns}\r\n            rows={rows}\r\n            className=\"grid-custom\"\r\n            onCellClick={handleCellClick}\r\n            rowKeyGetter={(row) => row.campaign_id}\r\n            selectedRows={selectedRow ? new Set([selectedRow.campaign_id]) : new Set()}\r\n            rowHeight={30}\r\n            headerRowHeight={30}\r\n            rowClass={getRowClass} \r\n            enableVirtualization={false}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* 오른쪽 섹션 */}\r\n      <div className=\"w-[513px]\">\r\n        <div className=\"flex flex-col gap-2\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">대상캠페인</Label>\r\n            <CustomInput \r\n              type=\"text\" \r\n              value={selectedCampaignId}\r\n              readOnly\r\n              disabled={isCampaignFieldDisabled()}\r\n              className=\"w-[140px]\"\r\n            />\r\n            <CommonButton \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => setIsModalOpen(true)}\r\n              // disabled={isCampaignFieldDisabled()}\r\n            >\r\n              캠페인조회\r\n            </CommonButton>\r\n            <CustomInput \r\n              type=\"text\" \r\n              value={selectedCampaignName} \r\n              readOnly \r\n              disabled={isCampaignFieldDisabled()}\r\n              className=\"\"\r\n            />\r\n          </div>\r\n\r\n          {/* 발신번호 영역 */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">발신번호</Label>\r\n            <OnlyNumberInput\r\n              type=\"text\" \r\n              value={selectedCallingNumber}\r\n              onChange={(e) => setSelectedCallingNumber(e.target.value)}\r\n              disabled={isCallingNumberDisabled()}\r\n              className=\"\"\r\n            />\r\n          </div>\r\n\r\n          {/* 버튼 영역 */}\r\n          <div className=\"flex justify-end gap-2 pt-4\">\r\n            <CommonButton onClick={handleNew}>\r\n              신규\r\n            </CommonButton>\r\n            <CommonButton onClick={handleSave}>\r\n              저장\r\n            </CommonButton>\r\n            <CommonButton onClick={handleDelete}>\r\n              삭제\r\n            </CommonButton>\r\n          </div>\r\n\r\n          {/* 안내 텍스트 */}\r\n          <div className=\"mt-[20px] text-sm\">\r\n            <ul className='space-y-1'>\r\n              <li>• 멤버십 별로 발신번호를 설정할 수 있습니다.</li>\r\n              <li>• 발신번호를 설정하시려면 그리드에서 키보드 ↓를 누르거나 신규 버튼을 클릭해 주세요.</li>\r\n            </ul>\r\n            <p className='mt-[20px]'>※ 변경된 정보는 캠페인의 발신 작업이 재시작 시 반영됩니다.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Campaign Modal */}\r\n      <CampaignModal \r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        onSelect={handleModalSelect}\r\n      />\r\n      <CustomAlert\r\n        isOpen={alertState.isOpen}\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        onClose={alertState.onConfirm}\r\n        onCancle={alertState.onCancel}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CampaignLayout;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1371, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/NumberEditDescription/EditDescription.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport DataGrid, { CellClickArgs } from 'react-data-grid';\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { useAuthStore, useCampainManagerStore, useMainStore } from '@/store';\r\nimport { useApiForPhoneDescription } from '@/features/campaignManager/hooks/useApiForPhoneDescription';\r\nimport { useApiForPhoneDescriptionUpdate } from '@/features/campaignManager/hooks/useApiForPhoneDescriptionUpdate';\r\nimport { useApiForPhoneDescriptionInsert } from '@/features/campaignManager/hooks/useApiForPhoneDescriptionInsert';\r\nimport Cookies from 'js-cookie';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useApiForPhoneDescriptionDelete } from '@/features/campaignManager/hooks/useApiForPhoneDescriptionDelete';\r\n\r\ninterface PhoneRow {\r\n  id: string;\r\n  phone1: string;\r\n  phone2: string;\r\n  phone3: string;\r\n  phone4: string;\r\n  phone5: string;\r\n}\r\n\r\ninterface PhoneDescription {\r\n  description_id: number;\r\n  description: string[];\r\n}\r\n\r\nconst errorMessage = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '로그인',\r\n  type: '2',\r\n};\r\n\r\nconst EditDescription = () => {\r\n  const { campaigns } = useMainStore();\r\n  const { phoneDescriptions, setPhoneDescriptions } = useCampainManagerStore();\r\n  const [selectedRow, setSelectedRow] = useState<PhoneRow | null>(null);\r\n  const [inputId, setInputId] = useState('');\r\n  const [inputPhone1, setInputPhone1] = useState('');\r\n  const [inputPhone2, setInputPhone2] = useState('');\r\n  const [inputPhone3, setInputPhone3] = useState('');\r\n  const [inputPhone4, setInputPhone4] = useState('');\r\n  const [inputPhone5, setInputPhone5] = useState('');\r\n  const [isNewMode, setIsNewMode] = useState(false); // 신규 모드 상태 추가\r\n  const { tenant_id } = useAuthStore();\r\n\r\n  const router = useRouter();\r\n\r\n  // api 응답 데이터를 그리드 형식으로 변환하는 함수\r\n  const transformToGridData = (apiData: PhoneDescription[]): PhoneRow[] => {\r\n    return apiData.map(item => ({\r\n      id: item.description_id.toString(),\r\n      phone1: item.description[0] || '',\r\n      phone2: item.description[1] || '',\r\n      phone3: item.description[2] || '',\r\n      phone4: item.description[3] || '',\r\n      phone5: item.description[4] || ''\r\n    }));\r\n  };\r\n\r\n  //전화번호설명 템플릿 조회\r\n  const { mutate: fetchPhoneDescriptions } = useApiForPhoneDescription({\r\n    onSuccess: (data) => {\r\n      setPhoneDescriptions(data.result_data || []);\r\n    },onError: (data) => {      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  })\r\n\r\n  // 전화번호설명 추가\r\n  const { mutate: fetchPhoneDescriptionInsert } = useApiForPhoneDescriptionInsert({\r\n    onSuccess: (data) => {\r\n      fetchPhoneDescriptions({\r\n        session_key: '',\r\n        tenant_id: tenant_id,\r\n      })\r\n      showAlert('저장되었습니다');\r\n    },onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n          setAlertState({\r\n            ...errorMessage,\r\n            isOpen: true,\r\n            message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n            onConfirm: closeAlert,\r\n            onCancel: () => {}\r\n          });\r\n          Cookies.remove('session_key');\r\n          setTimeout(() => {\r\n            router.push('/login');\r\n          }, 1000);\r\n      } else {\r\n          showAlert('전화번호설명 저장 중 오류가 발생했습니다: ' + error.message);\r\n      }\r\n    }\r\n  })\r\n\r\n  // 전화번호설명 수정\r\n  const { mutate: fetchPhoneDescriptionUpdate } = useApiForPhoneDescriptionUpdate({\r\n    onSuccess: (data) => {\r\n      fetchPhoneDescriptions({\r\n        session_key: '',\r\n        tenant_id: tenant_id,\r\n      });\r\n      showConfirm('수정되었습니다', () => {});\r\n    },onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n          setAlertState({\r\n            ...errorMessage,\r\n            isOpen: true,\r\n            message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n            onConfirm: closeAlert,\r\n            onCancel: () => {}\r\n          });\r\n          Cookies.remove('session_key');\r\n          setTimeout(() => {\r\n            router.push('/login');\r\n          }, 1000);\r\n      } else {\r\n          showAlert('전화번호설명 저장 중 오류가 발생했습니다: ' + error.message);\r\n      }\r\n    }\r\n  })\r\n\r\n  // 전화번호 설명 삭제\r\n  const { mutate: fetchPhoneDescriptionDelete } = useApiForPhoneDescriptionDelete({\r\n    onSuccess: (data) => {\r\n      fetchPhoneDescriptions({\r\n        session_key: '',\r\n        tenant_id: tenant_id,\r\n      });\r\n      showAlert('삭제되었습니다');\r\n    },onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n          setAlertState({\r\n            ...errorMessage,\r\n            isOpen: true,\r\n            message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n            onConfirm: closeAlert,\r\n            onCancel: () => {}\r\n          });\r\n          Cookies.remove('session_key');\r\n          setTimeout(() => {\r\n            router.push('/login');\r\n          }, 1000);\r\n      } else {\r\n          showAlert('전화번호설명 저장 중 오류가 발생했습니다: ' + error.message);\r\n      }\r\n    }\r\n  })\r\n\r\n  // 전화번호설명 템플릿 조회\r\n  useEffect(() => {\r\n    console.log(\"campaigns\", campaigns)\r\n    fetchPhoneDescriptions({\r\n      session_key: '',\r\n      tenant_id: tenant_id,\r\n    });\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [tenant_id]);\r\n  \r\n  const [alertState, setAlertState] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    title: '알림',\r\n    type: '2',\r\n    onConfirm: () => {},\r\n    onCancel: () => {}\r\n  });\r\n\r\n  const showAlert = (message: string) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '알림',\r\n      type: '2',\r\n      onConfirm: closeAlert,\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  const showConfirm = (message: string, onConfirm: () => void) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '확인',\r\n      type: '1',\r\n      onConfirm: () => {\r\n        onConfirm();\r\n        closeAlert();\r\n      },\r\n      onCancel: closeAlert\r\n    });\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlertState(prev => ({ ...prev, isOpen: false }));\r\n  };\r\n\r\n  // 전화번호 설명 저장\r\n  const handleSave = () => {\r\n    if (!validateData()) return;\r\n\r\n    const saveData = {\r\n      description_id: Number(inputId),\r\n      description: [inputPhone1, inputPhone2, inputPhone3, inputPhone4, inputPhone5]\r\n    };\r\n\r\n    if (selectedRow) {\r\n      // 수정\r\n      fetchPhoneDescriptionUpdate(saveData);\r\n      showAlert('수정되었습니다');\r\n    } else {\r\n      // 신규 저장\r\n      fetchPhoneDescriptionInsert(saveData);\r\n      showAlert('저장되었습니다');\r\n    }\r\n  };\r\n\r\n  // 전화번호 설명 삭제\r\n  const handleDelete = () => {\r\n    // 선택된 행이 없는 경우 알림\r\n    if (!selectedRow) {\r\n      showAlert('삭제할 항목을 선택해주세요.');\r\n      return;\r\n    }\r\n    \r\n    // campaigns 배열에서 현재 선택된 phone description ID가 사용 중인지 확인\r\n    const descriptionId = Number(selectedRow.id);\r\n    const isInUse = campaigns.some(campaign => campaign.dial_phone_id === descriptionId);\r\n    \r\n    if (isInUse) {\r\n      // 사용 중인 경우 알림 표시하고 삭제 방지\r\n      showAlert(`선택되어진 발신번호 설명을 사용하는 캠페인이 있습니다.\\n캠페인 아이디 : ${campaigns.filter(c => c.dial_phone_id === descriptionId).map(c => c.campaign_id).join(', ')}\\n캠페인 정보수정후 삭제하여 주십시오.`)\r\n      return;\r\n    }\r\n  \r\n    // 삭제 확인 메시지 표시\r\n    showConfirm('선택된 전화번호 설명을 삭제하시겠습니까?\\n\\n ※주의:  삭제시 데이터베이스에서 완전 삭제됩니다. \\n다시 한번 확인해 주시고 삭제해 주세요.', () => {\r\n      // 선택된 행의 ID를 숫자로 변환하여 직접 전달\r\n      const idToDelete = Number(selectedRow.id);\r\n      \r\n      fetchPhoneDescriptionDelete(idToDelete, {\r\n        onSuccess: () => {\r\n          // 2. 입력 필드 초기화\r\n          setSelectedRow(null);\r\n          setInputId('');\r\n          setInputPhone1('');\r\n          setInputPhone2('');\r\n          setInputPhone3('');\r\n          setInputPhone4('');\r\n          setInputPhone5('');\r\n          setIsNewMode(false);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // 전화번호 설명 데이터 유효성 검사\r\n  const validateData = () => {\r\n    if (!inputId || !inputPhone1 || !inputPhone2 || !inputPhone3 || !inputPhone4 || !inputPhone5) {\r\n      showAlert('모든 필드를 입력해주세요.');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // 전화번호 설명 데이터 그리드 열 정의\r\n  const columns = useMemo(() => [\r\n    { key: 'id', name: '아이디' },\r\n    { key: 'phone1', name: '전화번호1' },\r\n    { key: 'phone2', name: '전화번호2' },\r\n    { key: 'phone3', name: '전화번호3' },\r\n    { key: 'phone4', name: '전화번호4' },\r\n    { key: 'phone5', name: '전화번호5' },\r\n  ], []);\r\n\r\n  // 전화번호 설명 데이터 그리드 행 정의\r\n  const rows = useMemo(() => {\r\n    const phoneData = phoneDescriptions || [];\r\n    return phoneData.length > 0 ? transformToGridData(phoneData) : [];\r\n  }, [phoneDescriptions]);\r\n\r\n  // 셀 클릭 핸들러\r\n  const handleCellClick = ({ row }: CellClickArgs<PhoneRow>) => {\r\n    setSelectedRow(row);\r\n    setInputId(row.id);\r\n    setInputPhone1(row.phone1);\r\n    setInputPhone2(row.phone2);\r\n    setInputPhone3(row.phone3);\r\n    setInputPhone4(row.phone4);\r\n    setInputPhone5(row.phone5);\r\n    setIsNewMode(false);\r\n  };\r\n\r\n  // 신규 버튼 핸들러\r\n  const handleNew = () => {\r\n    setSelectedRow(null);\r\n    // 그리드의 마지막 ID를 찾아서 +1 한 값을 설정\r\n    if (rows.length > 0) {\r\n      const lastId = Math.max(...rows.map(row => parseInt(row.id)));\r\n      setInputId((lastId + 1).toString());\r\n    } else {\r\n      setInputId('1'); // 데이터가 없는 경우 1부터 시작\r\n    }\r\n    setInputPhone1('');\r\n    setInputPhone2('');\r\n    setInputPhone3('');\r\n    setInputPhone4('');\r\n    setInputPhone5('');\r\n    setIsNewMode(true);\r\n  };\r\n  \r\n  const getRowClass = (row: PhoneRow) => {\r\n    return selectedRow?.id === row.id ? 'bg-[#FFFAEE]' : '';\r\n  };\r\n\r\n  // 필드가 비활성화되어야 하는지 결정하는 함수\r\n  const isFieldDisabled = () => {\r\n    // 선택된 행이 없고 신규 모드도 아니면 비활성화\r\n    return !selectedRow && !isNewMode;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-8\">\r\n      <div className=\"w-[580px]\">\r\n        <div className=\"grid-custom-wrap h-[230px]\">\r\n        <DataGrid<PhoneRow>\r\n            columns={columns}\r\n            rows={rows}\r\n            className=\"grid-custom\"\r\n            onCellClick={handleCellClick}\r\n            rowKeyGetter={(row) => row.id}\r\n            selectedRows={selectedRow ? new Set([selectedRow.id]) : new Set()}\r\n            rowHeight={30}\r\n            headerRowHeight={30}\r\n            rowClass={getRowClass}\r\n            enableVirtualization={false}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"w-[513px]\">\r\n        <div className=\"flex flex-col gap-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">아이디</Label>\r\n            <CustomInput\r\n                type=\"text\"\r\n                value={inputId}\r\n                onChange={(e) => setInputId(e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={true}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">전화번호1</Label>\r\n            <CustomInput\r\n                type=\"text\"\r\n                value={inputPhone1}\r\n                onChange={(e) => setInputPhone1(e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()}\r\n            />\r\n            </div>\r\n            \r\n            <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">전화번호2</Label>\r\n            <CustomInput\r\n                type=\"text\"\r\n                value={inputPhone2}\r\n                onChange={(e) => setInputPhone2(e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()}\r\n            />\r\n            </div>\r\n            \r\n            <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">전화번호3</Label>\r\n            <CustomInput\r\n                type=\"text\"\r\n                value={inputPhone3}\r\n                onChange={(e) => setInputPhone3(e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">전화번호4</Label>\r\n            <CustomInput\r\n                type=\"text\"\r\n                value={inputPhone4}\r\n                onChange={(e) => setInputPhone4(e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">전화번호5</Label>\r\n            <CustomInput\r\n                type=\"text\"\r\n                value={inputPhone5}\r\n                onChange={(e) => setInputPhone5(e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"flex justify-end gap-2 pt-4\">\r\n            <CommonButton onClick={handleNew}>신규</CommonButton>\r\n            <CommonButton onClick={handleSave}>저장</CommonButton>\r\n            <CommonButton onClick={handleDelete}>삭제</CommonButton>\r\n            </div>\r\n        </div>\r\n      </div>\r\n\r\n      <CustomAlert\r\n        isOpen={alertState.isOpen}\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        onClose={alertState.onConfirm}\r\n        onCancle={alertState.onCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditDescription;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2056, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2062, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/CallLimitSetting/index.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport DataGrid from \"react-data-grid\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport CampaignModal from '../CampaignModal';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { useMainStore, useTabStore } from '@/store';\r\nimport { \r\n  useApiForCallLimitSettingCreate, \r\n  useApiForCallLimitSettingDelete, \r\n  useApiForCallLimitSettingList, \r\n  useApiForCallLimitSettingUpdate \r\n} from '@/features/preferences/hooks/useApiForCallLimitSetting';\r\nimport Cookies from 'js-cookie';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface Row {\r\n  campaign_id: string;\r\n  campaign_name: string;\r\n  limit_number: string;\r\n}\r\n\r\ninterface LimitSettingItem {\r\n  campaign_id: number;\r\n  tenant_id: number;\r\n  call_kind: number;\r\n  call_timeout: number;\r\n  max_call: number;\r\n  max_criteria: number;\r\n}\r\n\r\nconst errorMessage = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '로그인',\r\n  type: '2',\r\n};\r\n\r\nconst CampaignSettings = () => {\r\n  const { tenants, campaigns } = useMainStore();\r\n  const [selectedRow, setSelectedRow] = useState<Row | null>(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [campaignId, setCampaignId] = useState('');\r\n  const [campaignName, setCampaignName] = useState('');\r\n  const [limitCount, setLimitCount] = useState('');\r\n  const [limitSettings, setLimitSettings] = useState<LimitSettingItem[]>([]);\r\n  const [isNewMode, setIsNewMode] = useState(false); // 신규 모드 상태 추가\r\n  const router = useRouter();\r\n  const { activeTabId, openedTabs } = useTabStore()\r\n  \r\n  const [alertState, setAlertState] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    title: '알림',\r\n    type: '1',\r\n    onConfirm: () => {},\r\n    onCancel: () => {}\r\n  });\r\n\r\n  const showAlert = (message: string) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '알림',\r\n      type: '2',\r\n      onConfirm: closeAlert,\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  const showConfirm = (message: string, onConfirm: () => void) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '확인',\r\n      type: '1',\r\n      onConfirm: () => {\r\n        onConfirm();\r\n        closeAlert();\r\n      },\r\n      onCancel: closeAlert\r\n    });\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlertState(prev => ({ ...prev, isOpen: false }));\r\n  };\r\n\r\n  // 예약콜 제한건수 조회\r\n  const { mutate: fetchCallLimitSettingList } = useApiForCallLimitSettingList({\r\n    onSuccess: (data) => {\r\n      setLimitSettings(data.result_data);\r\n      setIsNewMode(false); // 데이터 로드 시 신규 모드 해제\r\n    },onError: (data) => {      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 제한건수 추가 API \r\n  const { mutate: createCallLimitSetting } = useApiForCallLimitSettingCreate({\r\n    onSuccess: (data) => {\r\n      if( data.result_code === -1 ){\r\n        // -9053 메시지 표시\r\n        showAlert('리스트 등록 건수를 초과하였습니다.');\r\n      }else{\r\n\r\n        // 저장 성공 후 리스트를 새로 가져오기\r\n        fetchCallLimitSettingList({\r\n          tenant_id_array: tenants.map(tenant => tenant.tenant_id)\r\n        });\r\n        \r\n        // 저장 후에도 현재 선택된 캠페인 정보 유지\r\n        // 신규 모드는 해제하지만, 선택 상태는 유지\r\n        setIsNewMode(false);\r\n        \r\n        // 저장 성공 메시지 표시\r\n        showAlert('저장되었습니다.');\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n          showAlert('저장에 실패했습니다: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 제한건수 수정 API\r\n  const { mutate: updateCallLimitSetting } = useApiForCallLimitSettingUpdate({\r\n    onSuccess: (data) => {\r\n      if( data.result_code === -1 ){\r\n        // -9053 메시지 표시\r\n        showAlert('리스트 등록 건수를 초과하였습니다.');\r\n      }else{\r\n\r\n        fetchCallLimitSettingList({\r\n          tenant_id_array: tenants.map(tenant => tenant.tenant_id)\r\n        });\r\n        setIsNewMode(false); // 수정 후 신규 모드 해제\r\n        showAlert('수정되었습니다.');\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n          showAlert('수정에 실패했습니다: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 제한건수 삭제 API\r\n  const { mutate: deleteCallLimitSetting } = useApiForCallLimitSettingDelete({\r\n    onSuccess: () => {\r\n      fetchCallLimitSettingList({\r\n        tenant_id_array: tenants.map(tenant => tenant.tenant_id)\r\n      });\r\n      setIsNewMode(false); // 삭제 후 신규 모드 해제\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n          showAlert('삭제에 실패했습니다: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 예약콜 제한건수 조회 API 호출 후 선택된 캠페인ID에 해당하는 항목을 찾아서 선택 상태 업데이트\r\n  const updateSelectionAfterAPICall = () => {\r\n    // limitSettings에서 선택된 캠페인 ID에 해당하는 항목 찾기\r\n    const updatedSetting = limitSettings.find(\r\n      setting => setting.campaign_id === Number(campaignId)\r\n    );\r\n    \r\n    // 찾은 항목이 있을 경우 선택 상태 업데이트\r\n    if (updatedSetting) {\r\n      const campaign = campaigns?.find(\r\n        camp => camp.campaign_id === updatedSetting.campaign_id\r\n      );\r\n      \r\n      // 찾은 데이터로 선택 상태 업데이트\r\n      setSelectedRow({\r\n        campaign_id: updatedSetting.campaign_id.toString(),\r\n        campaign_name: campaign?.campaign_name || '',\r\n        limit_number: updatedSetting.max_call.toString()\r\n      });\r\n      \r\n      // 제한건수도 최신 데이터로 업데이트\r\n      setLimitCount(updatedSetting.max_call.toString());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (campaignId && !isNewMode) {\r\n      updateSelectionAfterAPICall();\r\n    }\r\n  }, [limitSettings]);\r\n\r\n  useEffect(() => {\r\n    fetchCallLimitSettingList({\r\n      tenant_id_array: tenants.map(tenant => tenant.tenant_id)\r\n    });\r\n    // 초기 로딩 시 신규 모드 비활성화\r\n    setIsNewMode(false);\r\n  }, [fetchCallLimitSettingList, tenants])\r\n\r\n  const columns = useMemo(() => [\r\n    { key: 'campaign_id', name: '캠페인 아이디' },\r\n    { key: 'campaign_name', name: '캠페인 이름' },\r\n    { key: 'limit_number', name: '제한건수' }\r\n  ], []);\r\n\r\n  // 그리드에 표시할 데이터\r\n  const rows = useMemo(() => \r\n    limitSettings?.map(setting => {\r\n      const campaign = campaigns?.find(\r\n        camp => camp.campaign_id === setting.campaign_id\r\n      );\r\n      return {\r\n        campaign_id: setting.campaign_id.toString(),\r\n        campaign_name: campaign?.campaign_name || '',\r\n        limit_number: setting.max_call.toString()\r\n      };\r\n    }) || [] // 기본값으로 빈 배열 설정\r\n  , [limitSettings, campaigns]);\r\n\r\n\r\n  // 저장 버튼 클릭 시 호출되는 함수\r\n  // 캠페인 아이디, 캠페인 이름, 제한건수 모두 입력되어야 저장 가능\r\n  const handleSave = () => {\r\n    if (!campaignId || !campaignName || !limitCount) {\r\n      showAlert('모든 필드를 입력해주세요.');\r\n      return;\r\n    }\r\n  \r\n    // 선택된 캠페인의 tenant_id 찾기\r\n    const selectedCampaign = campaigns?.find(camp => camp.campaign_id === Number(campaignId));\r\n    if (!selectedCampaign) {\r\n      return;\r\n    }\r\n  \r\n    const saveData = {\r\n      campaign_id: Number(campaignId),\r\n      tenant_id: selectedCampaign.tenant_id,\r\n      call_kind: 1,  // Callback으로 고정\r\n      call_timeout: 0,\r\n      max_call: Number(limitCount),\r\n      max_criteria: 1\r\n    };\r\n  \r\n    if (selectedRow) {\r\n      // 수정\r\n      updateCallLimitSetting(saveData);\r\n      // showAlert은 mutate의 onSuccess에서 처리\r\n    } else {\r\n      // 신규 등록\r\n      createCallLimitSetting(saveData);\r\n      // showAlert은 mutate의 onSuccess에서 처리\r\n    }\r\n  };\r\n\r\n  // 삭제 버튼 클릭 시 호출되는 함수\r\n  // 선택된 캠페인 아이디가 없을 경우 알림\r\n  const handleDelete = () => {\r\n    // 선택된 항목이 없을 경우 알림\r\n    if (!campaignId || !selectedRow) {\r\n      showAlert('삭제할 캠페인을 먼저 선택해주세요.');\r\n      return;\r\n    }\r\n  \r\n    // 선택된 캠페인의 tenant_id 찾기\r\n    const selectedCampaign = campaigns?.find(camp => camp.campaign_id === Number(campaignId));\r\n    if (!selectedCampaign) {\r\n      showAlert('캠페인 정보를 찾을 수 없습니다.');\r\n      return;\r\n    }\r\n  \r\n    // 삭제 확인 알림\r\n    showConfirm(\r\n      `선택된 캠페인 [${selectedCampaign.campaign_name}]의 제한건수 설정을 삭제하시겠습니까? \\n\\n ※주의: 삭제시 데이터베이스에서 완전 삭제됩니다. \\n다시 한번 확인해 주시고 삭제해 주세요.`,\r\n      () => {\r\n        // 확인 버튼 클릭 시 실행될 함수\r\n        deleteCallLimitSetting(\r\n          {\r\n            campaign_id: Number(campaignId),\r\n            tenant_id: selectedCampaign.tenant_id\r\n          },\r\n          {\r\n            onSuccess: () => {\r\n              // showAlert('제한건수 설정이 성공적으로 삭제되었습니다.');\r\n              \r\n              // 삭제 후 데이터 초기화\r\n              setSelectedRow(null);\r\n              setCampaignId('');\r\n              setCampaignName('');\r\n              setLimitCount('');\r\n              setIsNewMode(false);\r\n              \r\n              // 데이터 목록 새로고침 - 이미 onSuccess에서 처리됨\r\n            }\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  // 그리드 셀 클릭 시 호출되는 함수\r\n  const handleCellClick = ({ row }: { row: Row }) => {\r\n    setSelectedRow(row);\r\n    setCampaignId(row.campaign_id);\r\n    setCampaignName(row.campaign_name);\r\n    setLimitCount(row.limit_number);\r\n  };\r\n\r\n  // 신규 버튼 클릭 시 호출되는 함수\r\n  // 입력 필드 초기화 및 신규 모드 활성화\r\n  const handleNew = () => {\r\n    setSelectedRow(null);\r\n    setCampaignId('');\r\n    setCampaignName('');\r\n    setLimitCount('');\r\n    setIsNewMode(true); \r\n  };\r\n\r\n  // 캠페인 선택 모달에서 캠페인 선택 시 호출되는 함수\r\n  // 선택된 캠페인 아이디와 이름을 상태에 저장하고, 그리드 로우도 선택\r\n  const handleCampaignSelect = (id: string, name: string) => {\r\n    setCampaignId(id);\r\n    setCampaignName(name);\r\n    // 선택된 캠페인의 제한건수가 있는지 체크\r\n    const matchingSetting = limitSettings.find(\r\n      (item) => item.campaign_id === Number(id)\r\n    );\r\n    if (matchingSetting) {\r\n      const limitStr = matchingSetting.max_call.toString();\r\n      setLimitCount(limitStr);\r\n      // 해당 캠페인이 이미 설정되어 있으면 그리드 로우도 선택\r\n      setSelectedRow({\r\n        campaign_id: id,\r\n        campaign_name: name,\r\n        limit_number: limitStr\r\n      });\r\n      setIsNewMode(false);\r\n    } else {\r\n      // 제한건수가 없으면 입력 필드와 그리드 선택 모두 초기화\r\n      setLimitCount('');\r\n      setSelectedRow(null);\r\n      setIsNewMode(true); \r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (activeTabId === 8) {\r\n      const tempData = openedTabs.filter(tab => tab.id === 8);\r\n      if( tempData.length > 0 && tempData[0].campaignId && tempData[0].campaignName) {\r\n        setCampaignId(tempData[0].campaignId);\r\n        setCampaignName(tempData[0].campaignName);\r\n      }\r\n      if( limitSettings.length > 0 && tempData.length > 0 ){\r\n        const templimitSetting = limitSettings.filter(data=> data.campaign_id === Number(tempData[0].campaignId));\r\n        if( templimitSetting.length >  0){\r\n          setLimitCount(templimitSetting[0].max_call+'');\r\n        }\r\n      }\r\n    }\r\n  }, [activeTabId, openedTabs,limitSettings]);\r\n   \r\n  // 필드가 비활성화되어야 하는지 결정하는 함수\r\n  const isFieldDisabled = () => {\r\n    // 캠페인 아이디가 있으면 항상 입력 가능하게 설정\r\n    if (campaignId) {\r\n      return false;\r\n    }\r\n    // 선택된 행이 없고 신규 모드도 아니면 비활성화\r\n    return !selectedRow && !isNewMode;\r\n  };\r\n\r\n  const getRowClass = (row: Row) => {\r\n    return selectedRow?.campaign_id === row.campaign_id && \r\n           selectedRow?.limit_number === row.limit_number ? 'bg-[#FFFAEE]' : '';\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-8\">\r\n      <div className=\"w-[580px]\">\r\n        <div className='grid-custom-wrap h-[230px]'>\r\n          <DataGrid\r\n            columns={columns}\r\n            rows={rows}\r\n            className=\"grid-custom\"\r\n            onCellClick={handleCellClick}\r\n            rowKeyGetter={(row) => row.campaign_id + row.limit_number}\r\n            selectedRows={selectedRow ? new Set<string>([selectedRow.campaign_id.toString()]) : new Set<string>()}\r\n            rowHeight={30}\r\n            headerRowHeight={30}\r\n            rowClass={getRowClass}\r\n            enableVirtualization={false}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"w-[513px]\">\r\n        <div className=\"flex flex-col gap-2\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">캠페인 아이디</Label>\r\n            <CustomInput \r\n                value={campaignId} \r\n                readOnly \r\n                className=\"w-full\"\r\n                disabled={true}\r\n             />\r\n            <CommonButton \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => setIsModalOpen(true)}\r\n            >\r\n              캠페인조회\r\n            </CommonButton>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">캠페인 이름</Label>\r\n            <CustomInput \r\n                value={campaignName} \r\n                readOnly \r\n                className=\"w-full\"\r\n                disabled={true}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-[5rem] min-w-[5rem]\">제한건수</Label>\r\n            <CustomInput \r\n              value={limitCount}\r\n              className=\"w-full\"\r\n              onChange={(e) => setLimitCount(e.target.value)}\r\n              disabled={isFieldDisabled()} \r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex justify-end gap-2 pt-4\">\r\n            <CommonButton onClick={handleNew}>신규</CommonButton>\r\n            <CommonButton onClick={handleSave}>저장</CommonButton>\r\n            <CommonButton onClick={handleDelete}>삭제</CommonButton>\r\n          </div>\r\n          <div className=\"mt-[20px] text-sm\">\r\n            <ul className='space-y-1'>\r\n              <li>• 필요 이상의 예약콜/ 콜백에 대한 제한이 필요한 경우</li>\r\n              <li>• 입력 받을 콜 수를 제한 할 수 있습니다.</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <CampaignModal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        onSelect={handleCampaignSelect}\r\n      />\r\n\r\n      <CustomAlert\r\n        isOpen={alertState.isOpen}\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        onClose={alertState.onConfirm}\r\n        onCancle={alertState.onCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignSettings;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2771, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2777, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/DistributionLimit/TimePicker.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/shared/CustomSelect\";\r\n\r\ninterface TimePickerProps {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n}\r\n\r\nconst TimePickerComponent: React.FC<TimePickerProps> = ({ value, onChange }) => {\r\n  // 시간을 시, 분으로 분리\r\n  const parseTimeValue = (timeString: string): { hour: string; minute: string } => {\r\n    // 빈 값이거나 유효하지 않은 형식이면 기본값 사용\r\n    if (!timeString || timeString === \"9999\" || timeString.length !== 4) {\r\n      return { hour: \"00\", minute: \"00\" };\r\n    }\r\n    return {\r\n      hour: timeString.slice(0, 2),\r\n      minute: timeString.slice(2, 4)\r\n    };\r\n  };\r\n\r\n  const { hour, minute } = parseTimeValue(typeof value === 'string' ? value : '');\r\n\r\n  // 시간이나 분이 변경될 때 전체 값 업데이트\r\n  const handleTimeChange = (type: string, newValue: string) => {\r\n    const currentTime = parseTimeValue(value);\r\n    const updatedTime = {\r\n      ...currentTime,\r\n      [type]: newValue\r\n    };\r\n    onChange(`${updatedTime.hour}${updatedTime.minute}`);\r\n  };\r\n\r\n  // 시간(0-23)과 분(0-59) 옵션 생성\r\n  const hours = Array.from({ length: 24 }, (_, i) => \r\n    i.toString().padStart(2, '0')\r\n  );\r\n  \r\n  const minutes = Array.from({ length: 60 }, (_, i) => \r\n    i.toString().padStart(2, '0')\r\n  );\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Select\r\n        value={hour}\r\n        onValueChange={(newHour) => handleTimeChange(\"hour\", newHour)}\r\n      >\r\n        <SelectTrigger className=\"w-[80px]\">\r\n          <SelectValue placeholder=\"시\" />\r\n        </SelectTrigger>\r\n        <SelectContent style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n          {hours.map((h) => (\r\n            <SelectItem key={`hour-${h}`} value={h}>{h}시</SelectItem>\r\n          ))}\r\n        </SelectContent>\r\n      </Select>\r\n      \r\n      <span className=\"mx-1\">:</span>\r\n      \r\n      <Select\r\n        value={minute}\r\n        onValueChange={(newMinute) => handleTimeChange(\"minute\", newMinute)}\r\n      >\r\n        <SelectTrigger className=\"w-[80px]\">\r\n          <SelectValue placeholder=\"분\" />\r\n        </SelectTrigger>\r\n        <SelectContent style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n          {minutes.map((m) => (\r\n            <SelectItem key={`minute-${m}`} value={m}>{m}분</SelectItem>\r\n          ))}\r\n        </SelectContent>\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimePickerComponent;"],"names":[],"mappings":";;;;AACA;;;AAOA,MAAM,sBAAiD,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE;IACzE,gBAAgB;IAChB,MAAM,iBAAiB,CAAC;QACtB,6BAA6B;QAC7B,IAAI,CAAC,cAAc,eAAe,UAAU,WAAW,MAAM,KAAK,GAAG;YACnE,OAAO;gBAAE,MAAM;gBAAM,QAAQ;YAAK;QACpC;QACA,OAAO;YACL,MAAM,WAAW,KAAK,CAAC,GAAG;YAC1B,QAAQ,WAAW,KAAK,CAAC,GAAG;QAC9B;IACF;IAEA,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,eAAe,OAAO,UAAU,WAAW,QAAQ;IAE5E,0BAA0B;IAC1B,MAAM,mBAAmB,CAAC,MAAc;QACtC,MAAM,cAAc,eAAe;QACnC,MAAM,cAAc;YAClB,GAAG,WAAW;YACd,CAAC,KAAK,EAAE;QACV;QACA,SAAS,GAAG,YAAY,IAAI,GAAG,YAAY,MAAM,EAAE;IACrD;IAEA,0BAA0B;IAC1B,MAAM,QAAQ,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAG,GAAG,CAAC,GAAG,IAC3C,EAAE,QAAQ,GAAG,QAAQ,CAAC,GAAG;IAG3B,MAAM,UAAU,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAG,GAAG,CAAC,GAAG,IAC7C,EAAE,QAAQ,GAAG,QAAQ,CAAC,GAAG;IAG3B,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,wJAAA,CAAA,SAAM;gBACL,OAAO;gBACP,eAAe,CAAC,UAAY,iBAAiB,QAAQ;;kCAErD,6LAAC,wJAAA,CAAA,gBAAa;wBAAC,WAAU;kCACvB,cAAA,6LAAC,wJAAA,CAAA,cAAW;4BAAC,aAAY;;;;;;;;;;;kCAE3B,6LAAC,wJAAA,CAAA,gBAAa;wBAAC,OAAO;4BAAE,WAAW;4BAAS,WAAW;wBAAO;kCAC3D,MAAM,GAAG,CAAC,CAAC,kBACV,6LAAC,wJAAA,CAAA,aAAU;gCAAmB,OAAO;;oCAAI;oCAAE;;+BAA1B,CAAC,KAAK,EAAE,GAAG;;;;;;;;;;;;;;;;0BAKlC,6LAAC;gBAAK,WAAU;0BAAO;;;;;;0BAEvB,6LAAC,wJAAA,CAAA,SAAM;gBACL,OAAO;gBACP,eAAe,CAAC,YAAc,iBAAiB,UAAU;;kCAEzD,6LAAC,wJAAA,CAAA,gBAAa;wBAAC,WAAU;kCACvB,cAAA,6LAAC,wJAAA,CAAA,cAAW;4BAAC,aAAY;;;;;;;;;;;kCAE3B,6LAAC,wJAAA,CAAA,gBAAa;wBAAC,OAAO;4BAAE,WAAW;4BAAS,WAAW;wBAAO;kCAC3D,QAAQ,GAAG,CAAC,CAAC,kBACZ,6LAAC,wJAAA,CAAA,aAAU;gCAAqB,OAAO;;oCAAI;oCAAE;;+BAA5B,CAAC,OAAO,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;;;AAM1C;KAnEM;uCAqES"}},
    {"offset": {"line": 2931, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2937, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/DistributionLimit/context_menu.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\ninterface ContextMenuProps {\r\n  x: number;\r\n  y: number;\r\n  onDelete: () => void;\r\n  onChangeBulkLimit: () => void; // 추가: 최대분배호수 일괄 변경 함수\r\n  onClose: () => void;\r\n  level?: number;\r\n}\r\n\r\nconst ContextMenu: React.FC<ContextMenuProps> = ({ x, y, onDelete, onChangeBulkLimit, onClose, level }) => {\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const [adjustedPosition, setAdjustedPosition] = useState({ left: x, top: y });\r\n\r\n  // 메뉴 외부 클릭 시 닫기\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [onClose]);\r\n\r\n  // 메뉴 위치 조정 (화면 경계 넘어가지 않게)\r\n  useEffect(() => {\r\n    if (menuRef.current) {\r\n      const menuRect = menuRef.current.getBoundingClientRect();\r\n      const viewportWidth = window.innerWidth;\r\n      const viewportHeight = window.innerHeight;\r\n      \r\n      let newLeft = x;\r\n      let newTop = y;\r\n      \r\n      // 우측 경계 확인\r\n      if (x + menuRect.width > viewportWidth) {\r\n        newLeft = x - menuRect.width;\r\n      }\r\n      \r\n      // 하단 경계 확인\r\n      if (y + menuRect.height > viewportHeight) {\r\n        newTop = y - menuRect.height;\r\n      }\r\n      \r\n      setAdjustedPosition({ left: newLeft, top: newTop });\r\n    }\r\n  }, [x, y]);\r\n\r\n  // 레벨에 따른 메뉴 항목 텍스트 설정\r\n  let menuText = \"분배제한 정보 삭제\";\r\n  \r\n  // 각 레벨에 따라 다른 텍스트 표시\r\n  if (level === 1) {\r\n    // menuText = \"상담그룹 분배제한 정보 삭제\";\r\n    menuText = \"분배제한 정보 삭제\";\r\n  } else if (level === 2) {\r\n    // menuText = \"상담파트 분배제한 정보 삭제\";\r\n    menuText = \"분배제한 정보 삭제\";\r\n  } else if (level === 3) {\r\n    menuText = \"분배제한 정보 삭제\";\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={menuRef}\r\n      className=\"absolute bg-white border border-gray-210 shadow-md rounded-md py-1 z-50\"\r\n      style={{\r\n        position: 'fixed',\r\n        left: `${adjustedPosition.left}px`,\r\n        top: `${adjustedPosition.top}px`,\r\n        fontSize: '14px',\r\n        minWidth: 'auto',\r\n        width: 'auto'\r\n      }}\r\n    >\r\n      {/* 레벨 1(상담그룹)과 레벨 2(상담파트)인 경우만 최대분배호수 일괄 변경 메뉴 표시 */}\r\n      {(level === 1 || level === 2) && (\r\n        <div\r\n          className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center text-blue-600\"\r\n          onClick={onChangeBulkLimit}\r\n        >\r\n          <span>최대분배호수 변경</span>\r\n        </div>\r\n      )}\r\n      <div\r\n        className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center text-red-600\"\r\n        onClick={onDelete}\r\n      >\r\n        <span>{menuText}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContextMenu;\r\n"],"names":[],"mappings":";;;;AAAA;;;;AAWA,MAAM,cAA0C,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE,OAAO,EAAE,KAAK,EAAE;;IACpG,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAkB;IACvC,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,MAAM;QAAG,KAAK;IAAE;IAE3E,gBAAgB;IAChB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,MAAM;4DAAqB,CAAC;oBAC1B,IAAI,QAAQ,OAAO,IAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAAW;wBACtE;oBACF;gBACF;;YAEA,SAAS,gBAAgB,CAAC,aAAa;YACvC;yCAAO;oBACL,SAAS,mBAAmB,CAAC,aAAa;gBAC5C;;QACF;gCAAG;QAAC;KAAQ;IAEZ,2BAA2B;IAC3B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,IAAI,QAAQ,OAAO,EAAE;gBACnB,MAAM,WAAW,QAAQ,OAAO,CAAC,qBAAqB;gBACtD,MAAM,gBAAgB,OAAO,UAAU;gBACvC,MAAM,iBAAiB,OAAO,WAAW;gBAEzC,IAAI,UAAU;gBACd,IAAI,SAAS;gBAEb,WAAW;gBACX,IAAI,IAAI,SAAS,KAAK,GAAG,eAAe;oBACtC,UAAU,IAAI,SAAS,KAAK;gBAC9B;gBAEA,WAAW;gBACX,IAAI,IAAI,SAAS,MAAM,GAAG,gBAAgB;oBACxC,SAAS,IAAI,SAAS,MAAM;gBAC9B;gBAEA,oBAAoB;oBAAE,MAAM;oBAAS,KAAK;gBAAO;YACnD;QACF;gCAAG;QAAC;QAAG;KAAE;IAET,sBAAsB;IACtB,IAAI,WAAW;IAEf,qBAAqB;IACrB,IAAI,UAAU,GAAG;QACf,gCAAgC;QAChC,WAAW;IACb,OAAO,IAAI,UAAU,GAAG;QACtB,gCAAgC;QAChC,WAAW;IACb,OAAO,IAAI,UAAU,GAAG;QACtB,WAAW;IACb;IAEA,qBACE,6LAAC;QACC,KAAK;QACL,WAAU;QACV,OAAO;YACL,UAAU;YACV,MAAM,GAAG,iBAAiB,IAAI,CAAC,EAAE,CAAC;YAClC,KAAK,GAAG,iBAAiB,GAAG,CAAC,EAAE,CAAC;YAChC,UAAU;YACV,UAAU;YACV,OAAO;QACT;;YAGC,CAAC,UAAU,KAAK,UAAU,CAAC,mBAC1B,6LAAC;gBACC,WAAU;gBACV,SAAS;0BAET,cAAA,6LAAC;8BAAK;;;;;;;;;;;0BAGV,6LAAC;gBACC,WAAU;gBACV,SAAS;0BAET,cAAA,6LAAC;8BAAM;;;;;;;;;;;;;;;;;AAIf;GAtFM;KAAA;uCAwFS"}},
    {"offset": {"line": 3068, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3074, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/DistributionLimit/index.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect, useRef } from 'react';\r\nimport DataGrid, { SelectCellFormatter } from \"react-data-grid\";\r\nimport 'react-data-grid/lib/styles.css';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/shared/CustomSelect\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport CampaignModal from '../CampaignModal';\r\nimport { useAuthStore, useMainStore, useTabStore } from '@/store';\r\nimport { useApiForCounselorList } from '@/features/preferences/hooks/useApiForCounselorList';\r\nimport { useApiForCreateMaxCall, useApiForDeleteMaxCall, useApiForMaxCallInitTimeList, useApiForMaxCallInitTimeUpdate, useApiForMaxCallList, useApiForUpdateMaxCall } from '@/features/preferences/hooks/useApiForMaxCall';\r\nimport { useApiForCampaignAgentList } from '@/features/preferences/hooks/useApiForCampaignAgent';\r\nimport Cookies from 'js-cookie';\r\nimport { useRouter } from 'next/navigation';\r\nimport TimePickerComponent from './TimePicker';\r\nimport ContextMenu from './context_menu';\r\nimport OnlyNumberInput from '@/components/shared/OnlyNumberInput';\r\n\r\ninterface Row {\r\n  id: string;\r\n  center: string;\r\n  group: string;\r\n  part: string;\r\n  agent_id: string;\r\n  agent_name: string;\r\n  max_dist: string;\r\n  current_resp: string;\r\n  fix_flag: string;\r\n  level: number;\r\n  parentId?: string;\r\n  children?: Row[];\r\n  isExpanded?: boolean;\r\n  hasChildren?: boolean;\r\n  isEditing?: boolean;\r\n  hasChanges?: boolean;\r\n}\r\n\r\ninterface EditData {\r\n  [key: string]: {\r\n    max_dist: string;\r\n    fix_flag: string;\r\n    original: {\r\n      max_dist: string;\r\n      fix_flag: string;\r\n    }\r\n  }\r\n}\r\n\r\nconst errorMessage = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '로그인',\r\n  type: '2'\r\n}\r\n\r\nconst DistributionLimit = () => {\r\n  const { tenant_id, role_id } = useAuthStore();\r\n  const { campaigns, setSelectedCampaign } = useMainStore();\r\n  const [treeData, setTreeData] = useState<Row[]>([]);\r\n  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set([]));\r\n  const [selectedCampaignId, setSelectedCampaignId] = useState('');\r\n  const [selectedCampaignName, setSelectedCampaignName] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [campaignAgents, setCampaignAgents] = useState<string[]>([]);\r\n  const [initTime, setInitTime] = useState<string>('없음');\r\n  const [viewFilter, setViewFilter] = useState('all');\r\n  const [rawAgentData, setRawAgentData] = useState<Row[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const router = useRouter();\r\n  const { activeTabId, openedTabs } = useTabStore();\r\n  const [editedRows, setEditedRows] = useState<EditData>({});\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n\r\n  const gridRef = useRef<HTMLDivElement>(null);\r\n\r\n  // 최대분배호수 일괄 변경 모달 상태\r\n  const [bulkLimitModal, setBulkLimitModal] = useState({\r\n    isOpen: false,\r\n    maxLimit: '',\r\n    fixFlag: false,\r\n    targetLevel: 0,\r\n    targetGroup: '',\r\n    targetPart: ''\r\n  });\r\n\r\n  // 최대분배호수 일괄 변경 모달 열기\r\n  const handleOpenBulkLimitModal = () => {\r\n    // 컨텍스트 메뉴 닫기\r\n    handleCloseContextMenu();\r\n    \r\n    setBulkLimitModal({\r\n      isOpen: true,\r\n      maxLimit: '',\r\n      fixFlag: false,\r\n      targetLevel: contextMenu.level || 0,\r\n      targetGroup: contextMenu.group || '',\r\n      targetPart: contextMenu.part || ''\r\n    });\r\n  };\r\n\r\n  // 우클릭 컨텍스트 메뉴 상태\r\n  const [contextMenu, setContextMenu] = useState<{\r\n    visible: boolean;\r\n    x: number;\r\n    y: number;\r\n    rowId: string | null;\r\n    agentId: string | null;\r\n    level?: number;    // 레벨 정보 추가\r\n    group?: string;    // 그룹 정보 추가\r\n    part?: string;     // 파트 정보 추가\r\n  }>({\r\n    visible: false,\r\n    x: 0,\r\n    y: 0,\r\n    rowId: null,\r\n    agentId: null\r\n  });\r\n\r\n  // 컨텍스트 메뉴 닫기 함수\r\n  const handleCloseContextMenu = () => {\r\n    setContextMenu({\r\n      visible: false,\r\n      x: 0,\r\n      y: 0,\r\n      rowId: null,\r\n      agentId: null\r\n    });\r\n  };\r\n  \r\n  const [alertState, setAlertState] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    title: '알림',\r\n    type: '1',\r\n    onConfirm: () => {},\r\n    onCancel: () => {}\r\n  });\r\n\r\n  const showAlert = (message: string) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '알림',\r\n      type: '2',\r\n      onConfirm: closeAlert,\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  const showConfirm = (message: string, onConfirm: () => void) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '확인',\r\n      type: '1',\r\n      onConfirm: () => {\r\n        onConfirm();\r\n        closeAlert();\r\n      },\r\n      onCancel: closeAlert\r\n    });\r\n  };\r\n\r\n  const transformToTreeData = (agentData: Row[]) => {\r\n    const result: Row[] = [];\r\n    \r\n    agentData.forEach((agent) => {\r\n      let center = result.find(c => c.center === agent.center);\r\n      if (!center) {\r\n        center = {\r\n          id: `center-${agent.center}`,\r\n          center: agent.center,\r\n          group: '',\r\n          part: '',\r\n          agent_id: '',\r\n          agent_name: '',\r\n          max_dist: '',\r\n          current_resp: '',\r\n          fix_flag: '',\r\n          level: 0,\r\n          hasChildren: true,\r\n          children: []\r\n        };\r\n        result.push(center);\r\n      }\r\n\r\n      let group = center.children?.find(g => g.group === agent.group);\r\n      if (!group) {\r\n        group = {\r\n          id: `group-${agent.center}-${agent.group}`,\r\n          parentId: center.id,\r\n          // Keep center value\r\n          center: agent.center,\r\n          group: agent.group,\r\n          part: '',\r\n          agent_id: '',\r\n          agent_name: '',\r\n          max_dist: '',\r\n          current_resp: '',\r\n          fix_flag: '',\r\n          level: 1,\r\n          hasChildren: true,\r\n          children: []\r\n        };\r\n        center.children?.push(group);\r\n      }\r\n\r\n      let part = group.children?.find(p => p.part === agent.part);\r\n      if (!part) {\r\n        part = {\r\n          id: `part-${agent.center}-${agent.group}-${agent.part}`,\r\n          parentId: group.id,\r\n          center: agent.center,\r\n          group: agent.group,\r\n          part: agent.part,\r\n          agent_id: '',\r\n          agent_name: '',\r\n          max_dist: '',\r\n          current_resp: '',\r\n          fix_flag: '',\r\n          level: 2,\r\n          hasChildren: true,\r\n          children: []\r\n        };\r\n        group.children?.push(part);\r\n      }\r\n\r\n      part.children?.push({\r\n        id: `agent-${agent.agent_id}`,\r\n        parentId: part.id,\r\n        center: agent.center,\r\n        group: agent.group,\r\n        part: agent.part,\r\n        agent_id: agent.agent_id,\r\n        agent_name: agent.agent_name,\r\n        max_dist: agent.max_dist,\r\n        current_resp: agent.current_resp,\r\n        fix_flag: agent.fix_flag,\r\n        level: 3\r\n      });\r\n    });\r\n\r\n    result.sort((a, b) => a.center.localeCompare(b.center));\r\n    result.forEach(center => {\r\n      center.children?.sort((a, b) => a.group.localeCompare(b.group));\r\n      center.children?.forEach(group => {\r\n        group.children?.sort((a, b) => a.part.localeCompare(b.part));\r\n        group.children?.forEach(part => {\r\n          part.children?.sort((a, b) => a.agent_id.localeCompare(b.agent_id));\r\n        });\r\n      });\r\n    });\r\n\r\n    return result;\r\n  };\r\n\r\n  const flattenRows = (rows: Row[]): Row[] => {\r\n    const getVisibleAgents = (nodes: Row[]): Row[] => {\r\n      let visibleAgents: Row[] = [];\r\n      \r\n      nodes.forEach(node => {\r\n        if (node.level === 3) {\r\n          let shouldInclude = true;\r\n          \r\n          if (viewFilter !== 'all') {\r\n            const maxDist = parseInt(node.max_dist || '0');\r\n            const currentResp = parseInt(node.current_resp || '0');\r\n            \r\n            switch (viewFilter) {\r\n              case 'remaining':\r\n                // 잔여 호수가 남은 상담사 (최대 분배호수 > 현재 응답호수)\r\n                shouldInclude = maxDist > currentResp && (maxDist > 0 || currentResp > 0);\r\n                break;\r\n              case 'no-remaining':\r\n                // 잔여 호수가 없는 상담사 (최대 분배호수 = 현재 응답호수)\r\n                shouldInclude = maxDist === currentResp && (maxDist > 0 || currentResp > 0);\r\n                break;\r\n              case 'no-limit':\r\n                // 최대 분배호수가 설정되지 않은 상담사 (데이터가 없거나 둘 다 0인 경우)\r\n                shouldInclude = maxDist === 0 && currentResp === 0;\r\n                break;\r\n              case 'has-limit':\r\n                // 최대 분배호수가 설정된 상담사 (최대 분배호수나 현재 응답호수 중 하나라도 값이 있는 경우)\r\n                shouldInclude = maxDist > 0 || currentResp > 0;\r\n                break;\r\n            }\r\n          }\r\n          \r\n          if (shouldInclude) {\r\n            visibleAgents.push(node);\r\n          }\r\n        } else if (node.children) {\r\n          visibleAgents = visibleAgents.concat(getVisibleAgents(node.children));\r\n        }\r\n      });\r\n      \r\n      return visibleAgents;\r\n    };\r\n  \r\n    const visibleAgents = getVisibleAgents(rows);\r\n    \r\n    const parentsWithVisibleChildren = new Set<string>();\r\n    \r\n    visibleAgents.forEach(agent => {\r\n      if (agent.parentId) parentsWithVisibleChildren.add(agent.parentId);\r\n      \r\n      const partParentId = rows.find(center => \r\n        center.children?.some(group => \r\n          group.children?.some(part => part.id === agent.parentId)\r\n        )\r\n      )?.children?.find(group => \r\n        group.children?.some(part => part.id === agent.parentId)\r\n      )?.id;\r\n      \r\n      if (partParentId) parentsWithVisibleChildren.add(partParentId);\r\n      \r\n      const groupParentId = rows.find(center => \r\n        center.children?.some(group => group.id === partParentId)\r\n      )?.id;\r\n      \r\n      if (groupParentId) parentsWithVisibleChildren.add(groupParentId);\r\n    });\r\n    \r\n    const flatten = (nodes: Row[]): Row[] => {\r\n      let flat: Row[] = [];\r\n      \r\n      nodes.forEach(node => {\r\n        const isExpanded = expandedRows.has(node.id);\r\n        const hasChildren = node.children && node.children.length > 0;\r\n        \r\n        if (node.level < 3) {\r\n          if (viewFilter !== 'all' && !parentsWithVisibleChildren.has(node.id) && !visibleAgents.some(agent => agent.id === node.id)) {\r\n            return;\r\n          }\r\n          \r\n          flat.push({ ...node, isExpanded, hasChildren });\r\n          \r\n          if (hasChildren && isExpanded) {\r\n            flat = flat.concat(flatten(node.children!));\r\n          }\r\n        } \r\n        else {\r\n          let shouldInclude = true;\r\n          \r\n          if (viewFilter !== 'all') {\r\n            const maxDist = parseInt(node.max_dist || '0');\r\n            const currentResp = parseInt(node.current_resp || '0');\r\n            \r\n            switch (viewFilter) {\r\n              case 'remaining':\r\n                // 잔여 호수가 남은 상담사 (최대 분배호수 > 현재 응답호수)\r\n                shouldInclude = maxDist > currentResp && (maxDist > 0 || currentResp > 0);\r\n                break;\r\n              case 'no-remaining':\r\n                // 잔여 호수가 없는 상담사 (최대 분배호수 = 현재 응답호수)\r\n                shouldInclude = maxDist === currentResp && (maxDist > 0 || currentResp > 0);\r\n                break;\r\n              case 'no-limit':\r\n                // 최대 분배호수가 설정되지 않은 상담사 (데이터가 없거나 둘 다 0인 경우)\r\n                shouldInclude = maxDist === 0 && currentResp === 0;\r\n                break;\r\n              case 'has-limit':\r\n                // 최대 분배호수가 설정된 상담사 (최대 분배호수나 현재 응답호수 중 하나라도 값이 있는 경우)\r\n                shouldInclude = maxDist > 0 || currentResp > 0;\r\n                break;\r\n            }\r\n          }\r\n          \r\n          if (shouldInclude) {\r\n            // 편집된 데이터가 있으면 그 값으로 업데이트\r\n            if (editedRows[node.id]) {\r\n              flat.push({ \r\n                ...node, \r\n                isExpanded, \r\n                max_dist: editedRows[node.id].max_dist,\r\n                fix_flag: editedRows[node.id].fix_flag,\r\n                hasChanges: true\r\n              });\r\n            } else {\r\n              flat.push({ ...node, isExpanded });\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      return flat;\r\n    };\r\n  \r\n    return flatten(rows);\r\n  };\r\n\r\n  // Apply filter to raw agent data - 필터는 최종 표시 시 적용\r\n  const filteredAgentData = useMemo(() => {\r\n    // 필터링하지 않고 모든 상담사 데이터 반환\r\n    // 실제 필터링은 트리 데이터 평탄화 과정에서 수행\r\n    return rawAgentData;\r\n  }, [rawAgentData]);\r\n\r\n  useEffect(() => {\r\n    if (filteredAgentData.length > 0) {\r\n      const transformedData = transformToTreeData(filteredAgentData);\r\n      setTreeData(transformedData);\r\n    } else {\r\n      setTreeData([]);\r\n    }\r\n  }, [filteredAgentData]);\r\n  \r\n  // 처음에 모든 레벨 확장\r\n  const collectAllNodeIds = (nodes: Row[], ids: Set<string>) => {\r\n    nodes.forEach(node => {\r\n      // 현재 노드 ID 추가\r\n      ids.add(node.id);\r\n      \r\n      // 자식 노드가 있는 경우 재귀적으로 수집\r\n      if (node.children && node.children.length > 0) {\r\n        collectAllNodeIds(node.children, ids);\r\n      }\r\n    });\r\n    return ids;\r\n  };\r\n  useEffect(() => {\r\n    if (treeData.length > 0) {\r\n      // 모든 노드를 확장하기 위해 모든 노드 ID 수집\r\n      const allNodeIds = collectAllNodeIds(treeData, new Set<string>());\r\n      setExpandedRows(allNodeIds);\r\n    }\r\n  }, [treeData]);\r\n  \r\n  \r\n  // 캠페인 ID Select 변경 핸들러\r\n  const handleCampaignIdChange = (value: string) => {\r\n    // 변경된 데이터가 있으면 확인 창 표시\r\n    if (hasChanges) {\r\n      showConfirm(\"저장되지 않은 변경사항이 있습니다. 계속하시겠습니까?\", () => {\r\n        proceedWithCampaignChange(value);\r\n      });\r\n    } else {\r\n      proceedWithCampaignChange(value);\r\n    }\r\n  };\r\n\r\n  const proceedWithCampaignChange = (value: string) => {\r\n    setIsLoading(true); // 로딩 시작\r\n\r\n    // 상태 초기화 추가\r\n    setRawAgentData([]);  // 기존 에이전트 데이터 초기화\r\n    setCampaignAgents([]); // 캠페인 에이전트 초기화\r\n    setTreeData([]); // 트리 데이터 초기화\r\n    setEditedRows({}); // 편집 데이터 초기화\r\n    setHasChanges(false); // 변경사항 플래그 초기화\r\n    \r\n    setSelectedCampaignId(value);\r\n    const campaign = campaigns.find(c => c.campaign_id.toString() === value);\r\n    if (campaign) {\r\n      setSelectedCampaignName(campaign.campaign_name);\r\n      setSelectedCampaign(campaign);\r\n    }\r\n  };\r\n\r\n  // 캠페인 모달에서 선택 시 핸들러\r\n  const handleModalSelect = (campaignId: string, campaignName: string) => {\r\n    if (hasChanges) {\r\n      showConfirm(\"저장되지 않은 변경사항이 있습니다. 계속하시겠습니까?\", () => {\r\n        setSelectedCampaignId(campaignId);\r\n        setSelectedCampaignName(campaignName);\r\n        const campaign = campaigns.find(c => c.campaign_id === Number(campaignId));\r\n        if (campaign) {\r\n          setSelectedCampaign(campaign);\r\n        }\r\n        // 편집 데이터와 변경사항 초기화\r\n        setEditedRows({});\r\n        setHasChanges(false);\r\n      });\r\n    } else {\r\n      setSelectedCampaignId(campaignId);\r\n      setSelectedCampaignName(campaignName);\r\n      const campaign = campaigns.find(c => c.campaign_id === Number(campaignId));\r\n      if (campaign) {\r\n        setSelectedCampaign(campaign);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 캠페인별 상담사 목록 조회\r\n  const { mutate: fetchCampaignAgentList } = useApiForCampaignAgentList({\r\n    onSuccess: (response) => {\r\n      console.log(\"response : \",response);\r\n      if (response?.result_data && response.result_data.length > 0) {\r\n        // 캠페인에 소속된 상담사 ID 목록 저장\r\n        const agentIds = response.result_data[0].agent_id;\r\n        setCampaignAgents(agentIds);\r\n      } else {\r\n        setCampaignAgents([]);\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('캠페인 상담사 목록 조회 실패: ' + error.message);\r\n        setCampaignAgents([]);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 백엔드에서 가져온 상담사 리스트 정보 처리\r\n  const { mutate: fetchCounselorList } = useApiForCounselorList({\r\n    onSuccess: (response) => {\r\n      if (response?.organizationList && selectedCampaignId) {\r\n        const counselorRows: Row[] = [];\r\n        \r\n        response.organizationList.forEach(org => {\r\n          const centerName = org.centerName;\r\n          \r\n          org.tenantInfo.forEach(tenant => {\r\n            tenant.groupInfo.forEach(group => {\r\n              group.teamInfo.forEach(team => {\r\n                team.counselorInfo.forEach(counselor => {\r\n                  // 캠페인에 소속된 상담사만 추가\r\n                  if (campaignAgents.includes(counselor.counselorId)) {\r\n                    counselorRows.push({\r\n                      id: `agent-${counselor.counselorId}`,\r\n                      center: centerName,\r\n                      group: group.groupId,\r\n                      part: team.teamId,\r\n                      agent_id: counselor.counselorId,\r\n                      agent_name: counselor.counselorname,\r\n                      max_dist: '0',\r\n                      current_resp: '0',\r\n                      fix_flag: 'N',\r\n                      level: 3\r\n                    });\r\n                  }\r\n                });\r\n              });\r\n            });\r\n          });\r\n        });\r\n        \r\n        setRawAgentData(counselorRows);\r\n      } else {\r\n        setRawAgentData([]);\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('상담사 목록 조회 실패: ' + error.message);\r\n        setRawAgentData([]);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 운영설정 분배호수 제한 설정 리스트 API 호출\r\n  const { mutate: fetchMaxCallList } = useApiForMaxCallList({\r\n    onSuccess: (maxCallResponse) => {\r\n      if (maxCallResponse?.result_data) {\r\n        setRawAgentData(prevRows => {\r\n          return prevRows.map(row => {\r\n            const maxCallInfo = maxCallResponse.result_data.find(\r\n              call => call.agent_id === row.agent_id\r\n            );\r\n            \r\n            if (maxCallInfo) {\r\n              return {\r\n                ...row,\r\n                max_dist: maxCallInfo.max_call.toString(),\r\n                current_resp: maxCallInfo.answered_call.toString(),\r\n                fix_flag: maxCallInfo.fix_flag === 1 ? 'Y' : 'N'  \r\n              };\r\n            }\r\n            // 매칭되는 정보가 없으면 기존 row 반환\r\n            return row;\r\n          });\r\n        });\r\n      }\r\n      setIsLoading(false); // 로딩 완료\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('운영설정 분배호수 제한 설정 리스트 조회 실패: ' + error.message);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  });\r\n\r\n  const { mutate: createMaxCallMutation } = useApiForCreateMaxCall({\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('운영설정 분배호수 제한 설정 저장 실패: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n  \r\n  const { mutate: updateMaxCallMutation } = useApiForUpdateMaxCall({\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('운영설정 분배호수 제한 설정 수정 실패: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n  \r\n  const { mutate: fetchMaxCallInitTimeList } = useApiForMaxCallInitTimeList({\r\n    onSuccess: (data) => {\r\n      setInitTime(data.result_data.init_time);\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('초기화 시간 설정 조회 실패: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n  \r\n  const { mutate: deleteMaxCallMutation } = useApiForDeleteMaxCall({\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert('삭제 실패: ' + error.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 응답호수 초기화 시각 수정\r\n  const { mutate: updateMaxCallInitTime } = useApiForMaxCallInitTimeUpdate({\r\n    onSuccess: (data) => {\r\n      if (data.result_code === 0) {\r\n        fetchMaxCallInitTimeList({}); // 변경 후 목록 재조회\r\n      } else {\r\n        showAlert(`초기화 시간 변경 실패: ${data.result_msg}`);\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`초기화 시간 변경 중 오류가 발생했습니다: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchMaxCallInitTimeList({});\r\n    if (selectedCampaignId) {\r\n      // 1. 먼저 캠페인 상담사 목록을 가져옴\r\n      fetchCampaignAgentList({\r\n        campaign_id: [Number(selectedCampaignId)]\r\n      });\r\n    } else {\r\n      setCampaignAgents([]);\r\n      setRawAgentData([]);\r\n    }\r\n  }, [selectedCampaignId, fetchCampaignAgentList, fetchMaxCallInitTimeList]);\r\n  \r\n  // campaignAgents가 업데이트되면 상담사 목록 조회\r\n  useEffect(() => {\r\n    if (selectedCampaignId && campaignAgents.length > 0) {\r\n      fetchCounselorList({\r\n        tenantId: tenant_id,\r\n        roleId: role_id\r\n      });\r\n    }\r\n  }, [tenant_id, role_id, selectedCampaignId, campaignAgents, fetchCounselorList]);\r\n\r\n  // 캠페인이 선택되고 상담사 목록이 로드된 후에 분배호수 제한 설정 조회\r\n  useEffect(() => {\r\n    if (selectedCampaignId && rawAgentData.length > 0) {\r\n      fetchMaxCallList({\r\n        campaign_id: [Number(selectedCampaignId)]\r\n      });\r\n    }\r\n  }, [selectedCampaignId, rawAgentData.length, fetchMaxCallList]);\r\n\r\n  useEffect(() => {\r\n    const handleGridContextMenu = (e: MouseEvent) => {\r\n      // 기본 컨텍스트 메뉴 방지\r\n      e.preventDefault();\r\n      \r\n      // 마우스 위치 정확히 저장\r\n      const mouseX = e.clientX; \r\n      const mouseY = e.clientY;\r\n      \r\n      // 우클릭된 요소 찾기\r\n      let targetElement = e.target as HTMLElement;\r\n      \r\n      // 행 찾기 - 각 행은 [role=\"row\"] 속성을 가집니다\r\n      let rowElement = null;\r\n      while (targetElement && targetElement !== gridRef.current) {\r\n        if (targetElement.getAttribute('role') === 'row') {\r\n          rowElement = targetElement;\r\n          break;\r\n        }\r\n        targetElement = targetElement.parentElement as HTMLElement;\r\n      }\r\n      \r\n      // 유효한 행 요소를 찾지 못한 경우\r\n      if (!rowElement) return;\r\n      \r\n      // 현재 화면에 표시된 행만 포함된 배열\r\n      const visibleRows = flattenRows(treeData);\r\n      \r\n      // 행의 aria-rowindex는 1부터 시작하고 헤더 행도 포함하므로 -2를 해줍니다\r\n      const rowIndex = parseInt(rowElement.getAttribute('aria-rowindex') || '0') - 2;\r\n      \r\n      // 인덱스 범위 체크\r\n      if (rowIndex < 0 || rowIndex >= visibleRows.length) return;\r\n      \r\n      // 클릭된 행 데이터\r\n      const row = visibleRows[rowIndex];\r\n      \r\n      // 레벨에 따라 컨텍스트 메뉴 표시 (센터 제외)\r\n      if (row && (row.level === 1 || row.level === 2 || row.level === 3)) {\r\n        setContextMenu({\r\n          visible: true,\r\n          x: mouseX,\r\n          y: mouseY,\r\n          rowId: row.id,\r\n          agentId: row.agent_id,\r\n          level: row.level,\r\n          group: row.group,\r\n          part: row.part\r\n        });\r\n      }\r\n    };\r\n    \r\n    const gridElement = gridRef.current;\r\n    if (gridElement) {\r\n      gridElement.addEventListener('contextmenu', handleGridContextMenu);\r\n    }\r\n    \r\n    return () => {\r\n      if (gridElement) {\r\n        gridElement.removeEventListener('contextmenu', handleGridContextMenu);\r\n      }\r\n    };\r\n  }, [treeData, expandedRows]); // 확장 상태 변경 시에도 다시 실행되도록 의존성 추가\r\n  \r\n\r\n  const [isTimeSettingOpen, setIsTimeSettingOpen] = useState(false);\r\n  const [isTimeRemoveOpen, setIsTimeRemoveOpen] = useState(false);\r\n  const [timeValue, setTimeValue] = useState('');\r\n\r\n  // 모달 열 때 시간 상태 초기화 함수 개선\r\n  const openTimeSettingModal = () => {\r\n    // 기존 설정 값이 있고 유효한 경우 기본값으로 설정\r\n    if (initTime && initTime !== \"9999\") {\r\n      setTimeValue(initTime);\r\n    } else {\r\n      // 기본값으로 00시 00분 설정\r\n      setTimeValue(\"0000\");\r\n    }\r\n    setIsTimeSettingOpen(true);\r\n  };\r\n\r\n  const handleTimeSettingSave = () => {\r\n    if (!timeValue) {\r\n      showAlert('시간을 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    if (timeValue.length !== 4) {\r\n      showAlert('올바른 시간 형식이 아닙니다.');\r\n      return;\r\n    }\r\n\r\n    updateMaxCallInitTime({ init_time: timeValue });\r\n    setTimeValue('');\r\n    setIsTimeSettingOpen(false);\r\n  };\r\n\r\n  const handleTimeRemove = () => {\r\n    updateMaxCallInitTime({ init_time: \"9999\" }); // 초기화 시간을 \"없음\"으로 설정\r\n    setIsTimeRemoveOpen(false);\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlertState(prev => ({ ...prev, isOpen: false }));\r\n  };\r\n\r\n  // 셀 값 변경 처리 함수\r\n  const handleCellChange = (row: Row, field: 'max_dist' | 'fix_flag', value: string) => {\r\n    // 상담사 행만 편집 가능\r\n    if (row.level !== 3) return;\r\n    \r\n    // 값의 유효성 검사\r\n    if (field === 'max_dist') {\r\n      const numValue = parseInt(value);\r\n      if (isNaN(numValue) || numValue < 0) {\r\n        showAlert('최대 분배호수는 0 이상의 숫자여야 합니다.');\r\n        return;\r\n      }\r\n      if (numValue > 99999){\r\n        showAlert('최대 분배호수는 99999 까지 입력 가능합니다.');\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 편집된 데이터 추적\r\n    setEditedRows(prev => {\r\n      const newEditedRows = { ...prev };\r\n      \r\n      // 이 행에 대한 이전 편집 내용이 없는 경우 원본 값 저장\r\n      if (!newEditedRows[row.id]) {\r\n        newEditedRows[row.id] = {\r\n          max_dist: row.max_dist,\r\n          fix_flag: row.fix_flag,\r\n          original: {\r\n            max_dist: row.max_dist,\r\n            fix_flag: row.fix_flag\r\n          }\r\n        };\r\n      }\r\n      \r\n      // 편집된 값 업데이트\r\n      newEditedRows[row.id][field] = value;\r\n      \r\n      // 변경사항 없으면 해당 행 제거\r\n      if (\r\n        newEditedRows[row.id].max_dist === newEditedRows[row.id].original.max_dist && \r\n        newEditedRows[row.id].fix_flag === newEditedRows[row.id].original.fix_flag\r\n      ) {\r\n        delete newEditedRows[row.id];\r\n      }\r\n      \r\n      // 변경사항 플래그 업데이트\r\n      setHasChanges(Object.keys(newEditedRows).length > 0);\r\n      \r\n      return newEditedRows;\r\n    });\r\n  };\r\n\r\n  // 그리드 데이터에서 편집된 셀 값을 가져오는 함수\r\n  const getCellValue = (row: Row, field: 'max_dist' | 'fix_flag'): string => {\r\n    if (row.level === 3 && editedRows[row.id]) {\r\n      return editedRows[row.id][field];\r\n    }\r\n    return row[field];\r\n  };\r\n\r\n  // 일괄 저장\r\n  const handleBulkSave = () => {\r\n    if (!selectedCampaignId) {\r\n      showAlert('캠페인을 선택해주세요.');\r\n      return;\r\n    }\r\n    \r\n    if (Object.keys(editedRows).length === 0) {\r\n      showAlert('변경된 내용이 없습니다.');\r\n      return;\r\n    }\r\n    \r\n    // 유효성 검사\r\n    const invalidEntries = Object.entries(editedRows).filter(([_, data]) => {\r\n      const maxDist = parseInt(data.max_dist);\r\n      return isNaN(maxDist) || maxDist < 0 || (data.fix_flag === 'Y' && maxDist === 0);\r\n    });\r\n    \r\n    if (invalidEntries.length > 0) {\r\n      showAlert('최대 분배호수는 0 이상의 숫자여야 하며, 호수 고정이 설정된 경우 최대 분배호수는 0일 수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    // 0값 검사를 별도로 먼저 수행\r\n    const zeroEntries = Object.entries(editedRows).filter(([_, data]) => {\r\n      return parseInt(data.max_dist) === 0;\r\n    });\r\n\r\n    if (zeroEntries.length > 0) {\r\n      showAlert('최대 분배호수는 0으로 설정할 수 없습니다.');\r\n      return;\r\n    }\r\n    \r\n    showConfirm(`${Object.keys(editedRows).length}개의 항목을 저장하시겠습니까?`, async () => {\r\n      setIsLoading(true);\r\n      let successCount = 0;\r\n      let failCount = 0;\r\n      \r\n      // 변경된 각 항목에 대해 저장 또는 업데이트 요청\r\n      for (const [rowId, data] of Object.entries(editedRows)) {\r\n        const agentId = rowId.replace('agent-', '');\r\n        const maxDist = parseInt(data.max_dist);\r\n        const fixFlag = data.fix_flag === 'Y' ? 1 : 0;\r\n        \r\n        const saveData = {\r\n          campaign_id: parseInt(selectedCampaignId),\r\n          agent_id: agentId,\r\n          max_call: maxDist,\r\n          fix_flag: fixFlag\r\n        };\r\n        \r\n        // 기존 설정 존재 여부 확인 (max_dist가 0이 아닌 경우)\r\n        const isExisting = parseInt(data.original.max_dist) > 0;\r\n        \r\n        try {\r\n          if (isExisting) {\r\n            // 기존 설정 수정\r\n            await new Promise<void>((resolve, reject) => {\r\n              updateMaxCallMutation(saveData, {\r\n                onSuccess: (response) => {\r\n                  if (response.result_code === 0) {\r\n                    successCount++;\r\n                    resolve();\r\n                  } else {\r\n                    failCount++;\r\n                    reject(new Error(response.result_msg));\r\n                  }\r\n                },\r\n                onError: (error) => {\r\n                  failCount++;\r\n                  reject(error);\r\n                }\r\n              });\r\n            });\r\n          } else {\r\n            // 새 설정 생성\r\n            await new Promise<void>((resolve, reject) => {\r\n              createMaxCallMutation(saveData, {\r\n                onSuccess: (response) => {\r\n                  if (response.result_code === 0) {\r\n                    successCount++;\r\n                    resolve();\r\n                  } else {\r\n                    failCount++;\r\n                    reject(new Error(response.result_msg));\r\n                  }\r\n                },\r\n                onError: (error) => {\r\n                  failCount++;\r\n                  reject(error);\r\n                }\r\n              });\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('저장 중 오류 발생:', error);\r\n          // 에러는 이미 각 API 호출의 onError에서 처리\r\n        }\r\n      }\r\n      \r\n      // 모든 요청 완료 후 결과 표시\r\n      setIsLoading(false);\r\n      // showAlert(`저장 완료: ${successCount}개 성공, ${failCount}개 실패`);\r\n      showAlert(`수정된 자원을 적용합니다.`);\r\n      \r\n      if (successCount > 0) {\r\n        // 변경된 데이터 초기화 및 목록 재조회\r\n        setEditedRows({});\r\n        setHasChanges(false);\r\n        fetchMaxCallList({\r\n          campaign_id: [parseInt(selectedCampaignId)]\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // 변경사항 취소\r\n  const handleCancelChanges = () => {\r\n    if (Object.keys(editedRows).length === 0) {\r\n      return;\r\n    }\r\n    \r\n    showConfirm('모든 변경사항을 취소하시겠습니까?', () => {\r\n      setEditedRows({});\r\n      setHasChanges(false);\r\n    });\r\n  };\r\n\r\n  // 삭제 처리 함수\r\n  const handleDeleteMaxCall = () => {\r\n    if (!contextMenu.rowId || !selectedCampaignId) return;\r\n    \r\n    let confirmMessage = \"\";\r\n    let agentIds: string[] = [];\r\n    \r\n    // 삭제 대상에 따라 메시지와 상담사 ID 목록 설정\r\n    if (contextMenu.level === 3) {\r\n      // 상담사 개인 삭제\r\n      // confirmMessage = `${contextMenu.agentId} 상담사의 분배 제한 정보를 삭제하시겠습니까?`;\r\n      confirmMessage = '분배 제한 정보를 삭제 하시겠습니까?';\r\n      if (contextMenu.agentId) {\r\n        agentIds = [contextMenu.agentId];\r\n      }\r\n    } else if (contextMenu.level === 2) {\r\n      // 상담파트 전체 삭제 - 분배호수가 설정된 상담사만 삭제\r\n      confirmMessage = `파트 ${contextMenu.part} 의 할당된 콜수를 삭제하시겠습니까?`;\r\n      \r\n      // 파트에 속한 상담사 중 최대분배호수가 0보다 큰 상담사만 ID 수집\r\n      agentIds = rawAgentData\r\n        .filter(agent => \r\n          agent.part === contextMenu.part && \r\n          parseInt(agent.max_dist) > 0\r\n        )\r\n        .map(agent => agent.agent_id);\r\n        \r\n    } else if (contextMenu.level === 1) {\r\n      // 상담그룹 전체 삭제 - 분배호수가 설정된 상담사만 삭제\r\n      confirmMessage = `그룹 ${contextMenu.group} 의 할당된 콜수를 삭제하시겠습니까?`;\r\n      \r\n      // 그룹에 속한 상담사 중 최대분배호수가 0보다 큰 상담사만 ID 수집\r\n      agentIds = rawAgentData\r\n        .filter(agent => \r\n          agent.group === contextMenu.group && \r\n          parseInt(agent.max_dist) > 0\r\n        )\r\n        .map(agent => agent.agent_id);\r\n    }\r\n    \r\n    if (agentIds.length === 0) {\r\n      showAlert('삭제할 상담사가 없습니다.');\r\n      handleCloseContextMenu();\r\n      return;\r\n    }\r\n    \r\n    showConfirm(confirmMessage, async () => {\r\n      setIsLoading(true);\r\n      let successCount = 0;\r\n      let failCount = 0;\r\n      \r\n      // 선택된 모든 상담사에 대해 삭제 처리\r\n      for (const agentId of agentIds) {\r\n        try {\r\n          await new Promise<void>((resolve, reject) => {\r\n            deleteMaxCallMutation({\r\n              campaign_id: parseInt(selectedCampaignId),\r\n              agent_id: agentId\r\n            }, {\r\n              onSuccess: (response) => {\r\n                if (response.result_code === 0) {\r\n                  successCount++;\r\n                  resolve();\r\n                } else {\r\n                  failCount++;\r\n                  reject(new Error(response.result_msg));\r\n                }\r\n              },\r\n              onError: (error) => {\r\n                failCount++;\r\n                reject(error);\r\n              }\r\n            });\r\n          });\r\n        } catch (error) {\r\n          console.error('삭제 중 오류 발생:', error);\r\n        }\r\n      }\r\n      \r\n      setIsLoading(false);\r\n      \r\n      // 화면 데이터 업데이트\r\n      setRawAgentData(prevData => \r\n        prevData.map(row => {\r\n          if (agentIds.includes(row.agent_id)) {\r\n            return {\r\n              ...row,\r\n              max_dist: '0',\r\n              current_resp: '0',\r\n              fix_flag: 'N'\r\n            };\r\n          }\r\n          return row;\r\n        })\r\n      );\r\n      \r\n      // 편집 중인 데이터에서도 제거\r\n      if (Object.keys(editedRows).length > 0) {\r\n        const newEditedRows = { ...editedRows };\r\n        \r\n        // 해당하는 모든 행 ID에 대해 편집 데이터 제거\r\n        Object.keys(newEditedRows).forEach(rowId => {\r\n          const agentId = rowId.replace('agent-', '');\r\n          if (agentIds.includes(agentId)) {\r\n            delete newEditedRows[rowId];\r\n          }\r\n        });\r\n        \r\n        setEditedRows(newEditedRows);\r\n        setHasChanges(Object.keys(newEditedRows).length > 0);\r\n      }\r\n      \r\n      // showAlert(`삭제 완료`);\r\n      \r\n      // 컨텍스트 메뉴 닫기\r\n      handleCloseContextMenu();\r\n    });\r\n  };\r\n\r\n  // 최대분배호수 일괄 변경 적용 및 즉시 저장\r\n  const handleApplyBulkLimit = async () => {\r\n    if (!bulkLimitModal.maxLimit) {\r\n      showAlert('최대 발신 건수를 입력해주세요.');\r\n      return;\r\n    }\r\n    \r\n    const maxLimit = parseInt(bulkLimitModal.maxLimit);\r\n    if (isNaN(maxLimit) || maxLimit <= 0) {\r\n      showAlert('최대 발신 건수는 0보다 큰 숫자여야 합니다.');\r\n      return;\r\n    }\r\n\r\n    if (maxLimit > 99999) {\r\n      showAlert('최대 발신 건수는 99999까지 입력 가능합니다.');\r\n      return;\r\n    }\r\n    \r\n    // 영향을 받는 상담사 ID 찾기 - 정확한 필터링으로 수정\r\n    let targetAgents: Row[] = [];\r\n    \r\n    if (bulkLimitModal.targetLevel === 1) {\r\n      // 상담그룹에 속한 모든 상담사만 정확히 필터링\r\n      targetAgents = rawAgentData.filter(agent => \r\n        agent.group === bulkLimitModal.targetGroup\r\n      );\r\n      // console.log(`그룹 ${bulkLimitModal.targetGroup}에 속한 상담사 ${targetAgents.length}명 선택됨`);\r\n    } else if (bulkLimitModal.targetLevel === 2) {\r\n      // 상담파트에 속한 모든 상담사만 정확히 필터링\r\n      targetAgents = rawAgentData.filter(agent => \r\n        agent.part === bulkLimitModal.targetPart\r\n      );\r\n      // console.log(`파트 ${bulkLimitModal.targetPart}에 속한 상담사 ${targetAgents.length}명 선택됨`);\r\n    }\r\n    \r\n    if (targetAgents.length === 0) {\r\n      showAlert('변경할 상담사가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    console.log(\"targetAgents : \",targetAgents);\r\n    \r\n    // 모달 닫기\r\n    setBulkLimitModal(prev => ({ ...prev, isOpen: false }));\r\n    \r\n    // 로딩 시작\r\n    setIsLoading(true);\r\n    \r\n    // 지연 추가\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    let successCount = 0;\r\n    let failCount = 0;\r\n    \r\n    // #### 일괄 수정은 update api로 보내기!\r\n    const agentIds = targetAgents.map(agent => agent.agent_id);\r\n    const updateArr = [];\r\n    \r\n    // 변경 대상 상담사 ID 100개씩 자르기 (한 요청에 최대 100개의 상담사 ID)\r\n    for (let i = 0; i < targetAgents.length; i += 100) {\r\n      updateArr.push(targetAgents.slice(i, i+100));\r\n    }\r\n\r\n    for(const agent of updateArr){\r\n\r\n      const saveData = agent.map(row => {\r\n        \r\n        const agent_id = row.agent_id.replace('agent-', '')\r\n\r\n        return {\r\n          campaign_id: parseInt(selectedCampaignId),\r\n          agent_id : agent_id,\r\n          max_call : maxLimit,\r\n          fix_flag : bulkLimitModal.fixFlag ? 1 : 0\r\n        }\r\n      });\r\n\r\n      // console.log(\"saveData : \", saveData);\r\n\r\n      await new Promise<void>((resolve, reject) => {\r\n        updateMaxCallMutation(saveData, {\r\n          onSuccess: (response) => {\r\n            if (response.result_code === 0) {\r\n              successCount++;\r\n              resolve();\r\n            } else {\r\n              // 이미 적용된 설정이라면 성공으로 처리\r\n              if (response.result_msg && response.result_msg.includes(\"No action is needed\")) {\r\n                successCount++;\r\n                resolve();\r\n              } else {\r\n                failCount++;\r\n                reject(new Error(response.result_msg));\r\n              }\r\n            }\r\n          },\r\n          onError: (error) => {\r\n            // \"No action is needed\" 오류는 무시하고 성공으로 처리\r\n            if (error.message && error.message.includes(\"No action is needed\")) {\r\n              successCount++;\r\n              resolve();\r\n            } else {\r\n              failCount++;\r\n              reject(error);\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n\r\n    } // end of for\r\n\r\n    // console.log(\"successCount : \",successCount);\r\n    // console.log(\"failcount : \", failCount);\r\n\r\n    // 화면 데이터 직접 업데이트 (API 응답을 기다리지 않고)\r\n    setRawAgentData(prevData => \r\n      prevData.map(row => {\r\n        // 선택된 상담사 ID에 포함된 경우에만 업데이트\r\n        if (agentIds.includes(row.agent_id)) {\r\n          return {\r\n            ...row,\r\n            max_dist: maxLimit.toString(),\r\n            fix_flag: bulkLimitModal.fixFlag ? 'Y' : 'N'\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n    \r\n    // 변경 후 목록 다시 조회\r\n    await fetchMaxCallList({\r\n      campaign_id: [parseInt(selectedCampaignId)]\r\n    });\r\n    \r\n    // 로딩 종료\r\n    setIsLoading(false);\r\n    \r\n    // 아래는 기존 개별 api 호출\r\n\r\n    // 모든 대상 상담사에 대해 API 호출로 바로 저장\r\n    // for (const agent of targetAgents) {\r\n    //   const saveData = {\r\n    //     campaign_id: parseInt(selectedCampaignId),\r\n    //     agent_id: agent.agent_id,\r\n    //     max_call: maxLimit,\r\n    //     fix_flag: bulkLimitModal.fixFlag ? 1 : 0\r\n    //   };\r\n      \r\n    //   // 기존 설정 존재 여부 확인 (max_dist가 0이 아닌 경우)\r\n    //   const isExisting = parseInt(agent.max_dist) > 0;\r\n      \r\n    //   try {\r\n    //     if (isExisting) {\r\n    //       // 기존 설정 수정\r\n    //       await new Promise<void>((resolve, reject) => {\r\n    //         updateMaxCallMutation(saveData, {\r\n    //           onSuccess: (response) => {\r\n    //             if (response.result_code === 0) {\r\n    //               successCount++;\r\n    //               resolve();\r\n    //             } else {\r\n    //               // 이미 적용된 설정이라면 성공으로 처리\r\n    //               if (response.result_msg && response.result_msg.includes(\"No action is needed\")) {\r\n    //                 successCount++;\r\n    //                 resolve();\r\n    //               } else {\r\n    //                 failCount++;\r\n    //                 reject(new Error(response.result_msg));\r\n    //               }\r\n    //             }\r\n    //           },\r\n    //           onError: (error) => {\r\n    //             // \"No action is needed\" 오류는 무시하고 성공으로 처리\r\n    //             if (error.message && error.message.includes(\"No action is needed\")) {\r\n    //               successCount++;\r\n    //               resolve();\r\n    //             } else {\r\n    //               failCount++;\r\n    //               reject(error);\r\n    //             }\r\n    //           }\r\n    //         });\r\n    //       });\r\n    //     } else {\r\n    //       // 새 설정 생성\r\n    //       await new Promise<void>((resolve, reject) => {\r\n    //         createMaxCallMutation(saveData, {\r\n    //           onSuccess: (response) => {\r\n    //             if (response.result_code === 0) {\r\n    //               successCount++;\r\n    //               resolve();\r\n    //             } else {\r\n    //               // 이미 적용된 설정이라면 성공으로 처리\r\n    //               if (response.result_msg && response.result_msg.includes(\"No action is needed\")) {\r\n    //                 successCount++;\r\n    //                 resolve();\r\n    //               } else {\r\n    //                 failCount++;\r\n    //                 reject(new Error(response.result_msg));\r\n    //               }\r\n    //             }\r\n    //           },\r\n    //           onError: (error) => {\r\n    //             // \"No action is needed\" 오류는 무시하고 성공으로 처리\r\n    //             if (error.message && error.message.includes(\"No action is needed\")) {\r\n    //               successCount++;\r\n    //               resolve();\r\n    //             } else {\r\n    //               failCount++;\r\n    //               reject(error);\r\n    //             }\r\n    //           }\r\n    //         });\r\n    //       });\r\n    //     }\r\n    //   } catch (error) {\r\n    //     console.error('저장 중 오류 발생:', error);\r\n    //   }\r\n    // } // end of for\r\n    \r\n    // 화면 데이터 직접 업데이트 (API 응답을 기다리지 않고)\r\n    // setRawAgentData(prevData => \r\n    //   prevData.map(row => {\r\n    //     // 선택된 상담사 ID에 포함된 경우에만 업데이트\r\n    //     if (agentIds.includes(row.agent_id)) {\r\n    //       return {\r\n    //         ...row,\r\n    //         max_dist: maxLimit.toString(),\r\n    //         fix_flag: bulkLimitModal.fixFlag ? 'Y' : 'N'\r\n    //       };\r\n    //     }\r\n    //     return row;\r\n    //   })\r\n    // );\r\n    \r\n    // // 변경 후 목록 다시 조회\r\n    // await fetchMaxCallList({\r\n    //   campaign_id: [parseInt(selectedCampaignId)]\r\n    // });\r\n    \r\n    // // 로딩 종료\r\n    // setIsLoading(false);\r\n\r\n  }; // end of handleApplyBulkLimit\r\n\r\n  // Toggle row expansion - 행 확장/축소 토글 개선\r\n  const toggleRowExpand = (rowId: string) => {\r\n    // 새로운 확장 상태 세트 생성\r\n    const newExpandedRows = new Set(expandedRows);\r\n    \r\n    // 현재 노드의 확장 상태 업데이트\r\n    if (expandedRows.has(rowId)) {\r\n      // 해당 노드 및 모든 하위 노드를 축소\r\n      const nodeToCollapse = treeData.reduce((foundNode, center) => {\r\n        if (foundNode) return foundNode;\r\n        if (center.id === rowId) return center;\r\n        \r\n        // 센터 내 그룹에서 찾기\r\n        if (center.children) {\r\n          const groupNode = center.children.find(group => group.id === rowId);\r\n          if (groupNode) return groupNode;\r\n          \r\n          // 그룹 내 파트에서 찾기\r\n          for (const group of center.children) {\r\n            if (group.children) {\r\n              const partNode = group.children.find(part => part.id === rowId);\r\n              if (partNode) return partNode;\r\n            }\r\n          }\r\n        }\r\n        \r\n        return null;\r\n      }, null as Row | null);\r\n      \r\n      // 하위 노드의 ID 수집 및 삭제\r\n      const removeChildrenIds = (node: Row | null) => {\r\n        if (!node || !node.children) return;\r\n        \r\n        node.children.forEach(child => {\r\n          newExpandedRows.delete(child.id);\r\n          removeChildrenIds(child);\r\n        });\r\n      };\r\n      \r\n      newExpandedRows.delete(rowId);\r\n      removeChildrenIds(nodeToCollapse);\r\n    } else {\r\n      // 노드 확장\r\n      newExpandedRows.add(rowId);\r\n    }\r\n    \r\n    setExpandedRows(newExpandedRows);\r\n  };\r\n\r\n  const rowKeyGetter = (row: Row) => row.id;\r\n\r\n  // 고급된 열 정의 - 이제 편집 가능한 셀 포함\r\n  const columns = useMemo(() => [\r\n    { \r\n      key: 'center', \r\n      name: '센터',\r\n      width: 200, \r\n      renderCell: ({ row }: { row: Row }) => {\r\n        const indent = row.level * 20;\r\n        const hasToggle = row.hasChildren;\r\n        \r\n        const centerContent = row.level === 3 ? row.center : '';\r\n        \r\n        // 계층 구조 표시 (기존의 hierarchy 열 기능)\r\n        let hierarchyContent = '';\r\n        if (row.level === 0) {\r\n          hierarchyContent = `센터: ${row.center}`;\r\n        } else if (row.level === 1) {\r\n          hierarchyContent = `상담그룹: ${row.group}`;\r\n        } else if (row.level === 2) {\r\n          hierarchyContent = `상담파트: ${row.part}`;\r\n        } else if (row.level === 3) {\r\n          // 상담사 레벨에서는 계층 표시 없이 센터 값만 보여줌\r\n          return <div style={{ marginLeft: `${indent}px` }}>{centerContent}</div>;\r\n        }\r\n        \r\n        return (\r\n          <div style={{ marginLeft: `${indent}px` }} className=\"flex items-center\">\r\n            {hasToggle && (\r\n              <span\r\n                // onClick={(e) => {\r\n                //   e.stopPropagation();\r\n                //   toggleRowExpand(row.id);\r\n                // }}\r\n                // className=\"cursor-pointer mr-2\"\r\n                className=\"mr-2\"\r\n                style={{\r\n                  display: 'inline-block',\r\n                  width: '9px',\r\n                  height: '9px',\r\n                  border: '1px solid #999',\r\n                  backgroundColor: '#f1f1f1',\r\n                  lineHeight: '7px',\r\n                  textAlign: 'center',\r\n                  fontSize: '9px',\r\n                  fontWeight: 'bold',\r\n                  color: '#333',\r\n                  marginRight: '5px'\r\n                }}\r\n              >\r\n                {row.isExpanded ? '-' : '+'}\r\n              </span>\r\n            )}\r\n            <span className=\"font-medium\">{hierarchyContent}</span>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { \r\n      key: 'group', \r\n      name: '상담그룹',\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        // 상담사 행에만 데이터 표시\r\n        return row.level === 3 ? row.group : '';\r\n      }\r\n    },\r\n    { \r\n      key: 'part', \r\n      name: '상담파트',\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        // 상담사 행에만 데이터 표시\r\n        return row.level === 3 ? row.part : '';\r\n      }\r\n    },\r\n    { \r\n      key: 'agent_id', \r\n      name: '상담사 아이디',\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        return row.level === 3 ? row.agent_id : '';\r\n      }\r\n    },\r\n    { \r\n      key: 'agent_name', \r\n      name: '상담사 이름',\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        return row.level === 3 ? row.agent_name : '';\r\n      }\r\n    },\r\n    { \r\n      key: 'max_dist', \r\n      name: '최대 분배호수',\r\n      width: 120,\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        if (row.level !== 3) return '';\r\n        \r\n        // 편집 가능한 셀로 변경\r\n        return (\r\n          <div className={`px-2 flex justify-center w-full ${row.hasChanges ? 'bg-yellow-50' : ''}`}>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"99999\"\r\n              value={getCellValue(row, 'max_dist')}\r\n              // onChange={(e) => handleCellChange(row, 'max_dist', e.target.value)}\r\n              onChange={(e) => {\r\n                let inputValue = e.target.value;\r\n            \r\n                // 강제로 99999 넘으면 잘라주기\r\n                if (parseInt(inputValue) > 99999) {\r\n                  showAlert('최대 분배호수는 99999 까지 입력 가능합니다.');\r\n                  inputValue = \"99999\";\r\n                }\r\n            \r\n                handleCellChange(row, 'max_dist', inputValue);\r\n              }}\r\n              className=\"w-full h-full px-2 text-center border-0 bg-transparent focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { \r\n      key: 'current_resp', \r\n      name: '현재 응답호수',\r\n      width: 120,\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        return row.level === 3 ? row.current_resp : '';\r\n      }\r\n    },\r\n    { \r\n      key: 'fix_flag', \r\n      name: '호수 고정',\r\n      width: 120,\r\n      renderCell: ({ row }: { row: Row }) => {\r\n        if (row.level !== 3) return '';\r\n        \r\n        // 편집 가능한 드롭다운으로 변경\r\n        return (\r\n          <div className= {row.hasChanges ? 'bg-yellow-50' : ''}>\r\n            <select\r\n              value={getCellValue(row, 'fix_flag')}\r\n              onChange={(e) => handleCellChange(row, 'fix_flag', e.target.value)}\r\n              className=\"w-full h-full text-center border-0 bg-transparent focus:outline-none\"\r\n            >\r\n              <option value=\"Y\">고정</option>\r\n              <option value=\"N\">미고정</option>\r\n            </select>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  ], [editedRows]);\r\n  \r\n  const handleCellClick = ({ row }: { row: Row }) => {\r\n    // 계층 노드 클릭 시 확장/축소\r\n    if (row.level !== 3 && row.hasChildren) {\r\n      toggleRowExpand(row.id);\r\n    }\r\n  };\r\n\r\n  const getRowClass = (row: Row) => {\r\n    // 편집된 행은 강조 표시\r\n    if (row.level === 3 && editedRows[row.id]) {\r\n      return 'bg-[#FFFAEE]';\r\n    }\r\n    \r\n    // 레벨별 배경색 설정\r\n    if (row.level === 0) {\r\n      return 'bg-[#fafafa]';\r\n    } else if (row.level === 1) {\r\n      return 'bg-[#f5faff]';\r\n    }\r\n    \r\n    return '';\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (activeTabId === 9) {\r\n      const tempData = openedTabs.filter(tab => tab.id === 9);\r\n      if (tempData.length > 0 && tempData[0].campaignId && tempData[0].campaignName) {\r\n        setSelectedCampaignId(tempData[0].campaignId);\r\n        setSelectedCampaignName(tempData[0].campaignName);\r\n        \r\n        // 캠페인 객체도 업데이트\r\n        const campaign = campaigns.find(c => c.campaign_id.toString() === tempData[0].campaignId);\r\n        if (campaign) {\r\n          setSelectedCampaign(campaign);\r\n        }\r\n      }\r\n    }\r\n  }, [activeTabId, openedTabs, campaigns, setSelectedCampaign]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      <div className=\"flex title-background justify-between\">\r\n        <div className=\"flex gap-4 items-center\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-20 min-w-20\">캠페인 아이디</Label>\r\n            <Select\r\n              value={selectedCampaignId}\r\n              onValueChange={handleCampaignIdChange}\r\n            >\r\n              <SelectTrigger className=\"w-[140px]\">\r\n                <SelectValue placeholder=\"캠페인선택\" />\r\n              </SelectTrigger>\r\n              <SelectContent style={{ maxHeight: '300px', overflowY: 'auto' }}> \r\n                {campaigns.map(campaign => (\r\n                  <SelectItem \r\n                    key={campaign.campaign_id} \r\n                    value={campaign.campaign_id.toString()}\r\n                  >\r\n                    {campaign.campaign_id}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          <CommonButton \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={() => {\r\n              if (hasChanges) {\r\n                showConfirm(\"저장되지 않은 변경사항이 있습니다. 계속하시겠습니까?\", () => {\r\n                  setSelectedCampaignId('');\r\n                  setSelectedCampaignName('');\r\n                  setSelectedCampaign(null);\r\n                  setEditedRows({});\r\n                  setHasChanges(false);\r\n                  setIsModalOpen(true);\r\n                });\r\n              } else {\r\n                setSelectedCampaignId('');\r\n                setSelectedCampaignName('');\r\n                setSelectedCampaign(null);\r\n                setIsModalOpen(true);\r\n              }\r\n            }}\r\n          >\r\n            캠페인조회\r\n          </CommonButton>\r\n          <CustomInput \r\n            value={selectedCampaignName}\r\n            readOnly \r\n            className=\"w-[140px]\"\r\n            disabled={true}\r\n          />\r\n          <div className=\"text-sm w-full ml-5\">\r\n            응답호수 초기화 시간 : {initTime === \"9999\" ? \"없음\" : `${initTime.slice(0, 2)}:${initTime.slice(2)}`}\r\n          </div>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <CommonButton onClick={openTimeSettingModal}>초기화시간 변경</CommonButton>\r\n          <CommonButton onClick={() => setIsTimeRemoveOpen(true)}>초기화시간 설정해제</CommonButton>\r\n          {hasChanges && (\r\n            <>\r\n              <CommonButton variant=\"outline\" onClick={handleCancelChanges}>변경취소</CommonButton>\r\n              <CommonButton onClick={handleBulkSave}>저장</CommonButton>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col gap-2\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <div className=\"text-sm\">할당 상담사 목록</div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Label className=\"w-12 min-w-12\">보기설정</Label>\r\n            <Select \r\n              value={viewFilter}\r\n              onValueChange={setViewFilter}\r\n              defaultValue='all'\r\n            >\r\n              <SelectTrigger className=\"w-[250px]\">\r\n                <SelectValue placeholder=\"해당 상담사 전체\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value='all'>해당 상담사 전체</SelectItem>\r\n                <SelectItem value='remaining'>잔여 호수가 남은 상담사</SelectItem>\r\n                <SelectItem value='no-remaining'>잔여 호수가 없는 상담사</SelectItem>\r\n                <SelectItem value='no-limit'>최대 분배호수가 설정되지 않은 상담사</SelectItem>\r\n                <SelectItem value='has-limit'>최대 분배호수가 설정된 상담사</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        <div className='grid-custom-wrap h-[560px]' ref={gridRef} onContextMenu={(e) => e.preventDefault()}>\r\n          <>\r\n            <DataGrid\r\n              columns={columns}\r\n              rows={flattenRows(treeData)} \r\n              className=\"grid-custom\"\r\n              onCellClick={handleCellClick}\r\n              rowKeyGetter={rowKeyGetter}\r\n              rowHeight={30}\r\n              headerRowHeight={30}\r\n              rowClass={getRowClass}\r\n              enableVirtualization={false}\r\n            />\r\n            \r\n            {/* 컨텍스트 메뉴 컴포넌트 추가 */}\r\n            {contextMenu.visible && (\r\n              <ContextMenu\r\n                x={contextMenu.x}\r\n                y={contextMenu.y}\r\n                onDelete={handleDeleteMaxCall}\r\n                onChangeBulkLimit={handleOpenBulkLimitModal}\r\n                onClose={handleCloseContextMenu}\r\n                level={contextMenu.level}\r\n              />\r\n            )}\r\n          </>\r\n        </div>\r\n        \r\n        <div className=\"mt-[20px] text-sm\">\r\n          <ul className='space-y-1 notice-li'>\r\n            <li>• 상담사에게 분배하는 콜 수를 제한합니다.</li>\r\n            <li>• 운영시간 중의 일괄처리(Batch)작업은 많은 부하를 발생시켜 정상적인 운영이 불가능 할 수 있습니다.</li>\r\n            <li>• 일괄처리작업의 경우, 발신 량이 적은 시간이나, 업무 종료 후 작업하시기를 권장합니다.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <CampaignModal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        onSelect={handleModalSelect}\r\n      />\r\n\r\n      <CustomAlert\r\n        isOpen={isTimeSettingOpen}\r\n        message={\r\n          <div className=\"flex flex-col gap-4\">\r\n            <div className=\"text-center\">\r\n              {initTime === \"9999\" \r\n                ? \"현재 설정 값이 없습니다. 시간을 입력하세요\" \r\n                : `현재설정값 : ${initTime.slice(0, 2)}시 ${initTime.slice(2)}분`\r\n              }\r\n            </div>\r\n            <div className=\"flex justify-center pt-2\">\r\n              <TimePickerComponent\r\n                value={timeValue}\r\n                onChange={setTimeValue}\r\n              />\r\n            </div>\r\n          </div>\r\n        }\r\n        title=\"초기화 시간 설정\"\r\n        type=\"1\"\r\n        onClose={handleTimeSettingSave}\r\n        onCancle={() => setIsTimeSettingOpen(false)}\r\n      />\r\n\r\n      {/* 최대분배호수 일괄 변경 모달 */}\r\n      <CustomAlert\r\n        isOpen={bulkLimitModal.isOpen}\r\n        message={\r\n          <div className=\"flex flex-col gap-4\">\r\n            <div className=\"text-center mb-2\">\r\n              {bulkLimitModal.targetLevel === 1\r\n                ? `그룹 ${bulkLimitModal.targetGroup}의 할당된 콜수를 일괄 변경합니다.`\r\n                : bulkLimitModal.targetLevel === 2\r\n                ? `파트 ${bulkLimitModal.targetPart}의 할당된 콜수를 일괄 변경합니다.`\r\n                : ''}\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label className=\"w-32 min-w-32\">최대 발신 건수</Label>\r\n              <OnlyNumberInput\r\n                type=\"text\"\r\n                min={1}\r\n                max={99999}\r\n                value={bulkLimitModal.maxLimit}\r\n                onChange={(e) => {\r\n                  const value = e.target.value;\r\n                  const numericValue = parseInt(value, 10);\r\n\r\n                  if(numericValue <= 0){\r\n                    showAlert(\"최대 발신건수는 최소 1부터 입력 가능합니다.\");\r\n                    setBulkLimitModal((prev) => ({ ...prev, maxLimit: \"1\" }));\r\n                    return; \r\n                  }\r\n\r\n                  if (numericValue > 99999) {\r\n                    showAlert(\"최대 발신건수는 99999까지 입력 가능합니다.\");\r\n                    setBulkLimitModal((prev) => ({ ...prev, maxLimit: \"99999\" }));\r\n                    return; \r\n                  }\r\n\r\n                  setBulkLimitModal((prev) => ({ ...prev, maxLimit: value }));\r\n                }}\r\n                className=\"w-[140px]\"\r\n              />\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"fixFlagCheckbox\"\r\n                checked={bulkLimitModal.fixFlag}\r\n                onChange={(e) => setBulkLimitModal(prev => ({ ...prev, fixFlag: e.target.checked }))}\r\n                className=\"mr-2\"\r\n              />\r\n              <Label htmlFor=\"fixFlagCheckbox\">호수 일괄고정</Label>\r\n            </div>\r\n          </div>\r\n        }\r\n        title=\"최대분배호수 일괄 변경\"\r\n        type=\"1\"\r\n        onClose={handleApplyBulkLimit}\r\n        onCancle={() => setBulkLimitModal(prev => ({ ...prev, isOpen: false }))}\r\n      />\r\n\r\n      <CustomAlert\r\n        isOpen={isTimeRemoveOpen}\r\n        message=\"초기화 시간 설정을 해제 하시겠습니까?\"\r\n        title=\"초기화 시간 설정해제\"\r\n        type=\"1\"\r\n        onClose={handleTimeRemove}\r\n        onCancle={() => setIsTimeRemoveOpen(false)}\r\n      />\r\n\r\n      <CustomAlert\r\n        isOpen={alertState.isOpen}\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        onClose={alertState.onConfirm}\r\n        onCancle={alertState.onCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistributionLimit;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5341, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/SkillEdit/index.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport DataGrid, { SelectColumn } from \"react-data-grid\";\r\nimport { CommonButton } from \"@/components/shared/CommonButton\";\r\nimport { CustomInput } from \"@/components/shared/CustomInput\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport TitleWrap from \"@/components/shared/TitleWrap\";\r\nimport 'react-data-grid/lib/styles.css';\r\nimport { useApiForCounselorAssignList, useApiForCounselorList } from '@/features/preferences/hooks/useApiForCounselorList';\r\nimport { useApiForCampaignList, useApiForCreateSkill, useApiForDeleteAgentSkill, useApiForDeleteSkill, useApiForSkillAgentList, useApiForSkillCampaignList, useApiForSkillList, useApiForUpdateSkill } from '@/features/preferences/hooks/useApiForSkill';\r\nimport { useAuthStore, useMainStore } from '@/store';\r\nimport { CounselorAssignListResponse } from '@/features/preferences/types/SystemPreferences';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { useApiForCampaignSkillUpdate } from '@/features/campaignManager/hooks/useApiForCampaignSkillUpdate';\r\nimport { useApiForCampaignSkill } from '@/features/campaignManager/hooks/useApiForCampaignSkill';\r\nimport Cookies from 'js-cookie';\r\nimport { useRouter } from 'next/navigation';\r\n\r\n// 메인 스킬 정보\r\ninterface SkillRow {\r\n  center: string;\r\n  tenant: string;\r\n  tenantId: number;\r\n  skillId: string;\r\n  skillName: string;\r\n  description: string;\r\n  campaignCount: number;\r\n  agentCount: number;\r\n}\r\n\r\n// 캠페인 정보 (그리드용)\r\ninterface CampaignRow {\r\n  skillId: string;\r\n  campaignId: string;\r\n  campaignName: string;\r\n  mode: string;\r\n}\r\n\r\n// 상담사 정보 (그리드용)\r\ninterface AgentRow {\r\n  skillId: string;\r\n  teamId: string;\r\n  teamName: string;\r\n  loginId: string;\r\n  agentId: string;\r\n  agentName: string;\r\n  consultMode: string;\r\n}\r\n\r\nconst errorMessage = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '로그인',\r\n  type: '2',\r\n}\r\n\r\nconst SkillEdit = () => {\r\n  const { tenants, campaigns } = useMainStore();\r\n  const { tenant_id, role_id } = useAuthStore();\r\n  const [rows, setRows] = useState<SkillRow[]>([]);\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillRow | null>(null);\r\n  const [selectedCampaignRows, setSelectedCampaignRows] = useState<Set<string>>(new Set());\r\n  const [selectedAgentRows, setSelectedAgentRows] = useState<Set<string>>(new Set());\r\n  const [filteredCampaigns, setFilteredCampaigns] = useState<CampaignRow[]>([]);\r\n  const [filteredAgents, setFilteredAgents] = useState<AgentRow[]>([]);\r\n  const [allCampaigns, setAllCampaigns] = useState<CampaignRow[]>([]);\r\n  // 다중 선택 스킬 관리를 위한 상태 추가 (체크박스로 선택된 항목들)\r\n  const [selectedSkillRows, setSelectedSkillRows] = useState<Set<string>>(new Set());\r\n  \r\n  const router = useRouter();\r\n\r\n  // 신규 등록을 위한 초기 상태\r\n  const initialSkillState = {\r\n    center: '',\r\n    tenant: '',\r\n    tenantId: tenant_id,\r\n    skillId: '',\r\n    skillName: '',\r\n    description: '',\r\n    campaignCount: 0,\r\n    agentCount: 0\r\n  };\r\n\r\n  // 수정 가능한 필드들을 위한 상태\r\n  const [editableFields, setEditableFields] = useState({\r\n    tenantId: tenant_id,\r\n    skillName: '',\r\n    description: ''\r\n  });\r\n\r\n  // 새로운 스킬 생성 모드인지 여부\r\n  const [isNewMode, setIsNewMode] = useState(false);\r\n  \r\n  const [alertState, setAlertState] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    title: '알림',\r\n    type: '2',\r\n    onConfirm: () => {},\r\n    onCancel: () => {}\r\n  });\r\n\r\n  // 스킬 그리드 컬럼\r\n  const skillColumns = useMemo(() => [\r\n    SelectColumn,\r\n    { key: 'center', name: '센터' },\r\n    { key: 'tenant', name: '테넌트' },\r\n    { key: 'skillId', name: '스킬아이디' },\r\n    { key: 'skillName', name: '스킬이름' },\r\n    { key: 'description', name: '설명' },\r\n    { key: 'campaignCount', name: '소속캠페인 수' },\r\n    { key: 'agentCount', name: '소속상담사 수' }\r\n  ], []);\r\n\r\n  // 캠페인 그리드 컬럼\r\n  const campaignColumns = useMemo(() => [\r\n    SelectColumn,\r\n    { key: 'campaignId', name: '캠페인 아이디' },\r\n    { key: 'campaignName', name: '캠페인 이름' },\r\n    { key: 'mode', name: '캠페인 모드' }\r\n  ], []);\r\n\r\n  // 상담사 그리드 컬럼\r\n  const agentColumns = useMemo(() => [\r\n    SelectColumn,\r\n    { key: 'teamId', name: '팀아이디' },\r\n    { key: 'teamName', name: '팀이름' },\r\n    { key: 'loginId', name: '로그인아이디' },\r\n    { key: 'agentId', name: '상담사아이디' },\r\n    { key: 'agentName', name: '상담사 이름' },\r\n    { key: 'consultMode', name: '상담모드' }\r\n  ], []);\r\n\r\n  const getBlendKindText = (blendKind: string): string => {\r\n    switch (blendKind) {\r\n      case '1': return '인바운드';\r\n      case '2': return '아웃바운드';\r\n      case '3': return '블렌드';\r\n      default: return 'Unknown';\r\n    }\r\n  };\r\n\r\n  // 캠페인 발신 모드 변환 함수\r\n  const getDialModeText = (dialMode: number): string => {\r\n    switch (dialMode) {\r\n      case 1: return 'Power Mode';\r\n      case 2: return 'Progressive Mode';\r\n      case 3: return 'Predictive Mode';\r\n      case 5: return 'Preview Mode';\r\n      default: return 'Unknown';\r\n    }\r\n  };\r\n\r\n  const getRowClass = (row: any) => {\r\n    return selectedSkill?.skillId === row.skillId ? 'bg-amber-50' : '';\r\n  };\r\n\r\n  // 스킬 ID 자동 생성 함수\r\n  const generateSkillId = () => {\r\n    // 스킬 ID가 없는 경우 기본값으로 1 사용\r\n    if (rows.length === 0) return \"1\";\r\n    \r\n    // 모든 스킬 ID를 숫자로 변환 (숫자가 아닌 경우 필터링)\r\n    const numericSkillIds = rows\r\n      .map(row => row.skillId)\r\n      .filter(id => /^\\d+$/.test(id))  // 순수 숫자 형식만 필터링\r\n      .map(id => parseInt(id, 10));\r\n    \r\n    // 최대값 찾기\r\n    const maxSkillId = numericSkillIds.length > 0 ? Math.max(...numericSkillIds) : 0;\r\n    \r\n    // 최대값 + 1 반환\r\n    return String(maxSkillId + 1);\r\n  };\r\n\r\n  // 스킬 로우 클릭 이벤트 핸들러\r\n  const handleSkillClick = ({ row }: { row: SkillRow }) => {\r\n    setSelectedSkill(row);\r\n    setSelectedCampaignRows(new Set());\r\n    setSelectedAgentRows(new Set());\r\n    setEditableFields({\r\n      tenantId: row.tenantId,\r\n      skillName: row.skillName,\r\n      description: row.description\r\n    });\r\n    setIsNewMode(false);\r\n\r\n    // 캠페인 데이터 불러오기\r\n    const loadCampaignData = () => {\r\n      if (campaignData && campaignData.result_data) {\r\n        const skillCampaignEntry = campaignData.result_data.find(\r\n          (entry: any) => String(entry.skill_id) === row.skillId\r\n        );\r\n        const campaignIds: string[] = skillCampaignEntry ? skillCampaignEntry.campaign_id : [];\r\n        const relatedCampaigns = allCampaigns.filter(campaign => campaignIds.includes(campaign.campaignId));\r\n        setFilteredCampaigns(relatedCampaigns);\r\n      } else {\r\n        // 캠페인 데이터가 아직 없는 경우 다시 불러오기\r\n        fetchSkillCampaignList();\r\n      }\r\n    };\r\n    \r\n    loadCampaignData();\r\n    \r\n    // 상담사 불러오기\r\n    fetchCounselorAssignList({\r\n      tenantId: row.tenantId,\r\n      skillId: Number(row.skillId)\r\n    });\r\n  };  \r\n\r\n  // 스킬 체크박스 선택 변경 이벤트 핸들러 (다중 선택)\r\n  const handleSkillSelectionChange = (selectedRows: Set<string>) => {\r\n    // 체크박스 선택 상태만 업데이트 (상세 정보는 변경하지 않음)\r\n    setSelectedSkillRows(selectedRows);\r\n  };\r\n\r\n  const handleCampaignSelectionChange = (selectedRows: Set<string>) => {\r\n    setSelectedCampaignRows(selectedRows);\r\n  };\r\n\r\n  const handleAgentSelectionChange = (selectedRows: Set<string>) => {\r\n    setSelectedAgentRows(selectedRows);\r\n  };\r\n\r\n  const handleSkillUnassign = () => {\r\n    if (selectedCampaignRows.size === 0) {\r\n      showAlert('스킬을 해제할 캠페인을 선택해주세요.');\r\n      return;\r\n    }\r\n    \r\n    if (!selectedSkill) {\r\n      showAlert('현재 선택된 스킬이 없습니다.');\r\n      return;\r\n    }\r\n    \r\n    const currentSkillId = parseInt(selectedSkill.skillId, 10);\r\n    \r\n    showConfirm('선택한 캠페인에서 현재 스킬을 해제하시겠습니까?', async () => {\r\n      // 선택된 캠페인 ID 배열 생성\r\n      const selectedCampaignIds = Array.from(selectedCampaignRows).map(campaignId => {\r\n        const campaign = filteredCampaigns.find(c => c.campaignId === campaignId);\r\n        return campaign ? parseInt(campaign.campaignId, 10) : 0;\r\n      }).filter(id => id !== 0);\r\n      \r\n      // 최신 캠페인 스킬 데이터 가져오기 위한 호출\r\n      campaignSkillList({\r\n        session_key: '',\r\n        tenant_id: tenant_id\r\n      }, {\r\n        onSuccess: async (data) => {\r\n          const campaignSkillData = data.result_data || [];\r\n          // console.log(\"최신 캠페인 스킬 데이터\", data);\r\n          // console.log(\"선택된 캠페인 ID\", selectedCampaignIds);\r\n          \r\n          // 진행 상태 추적\r\n          let successCount = 0;\r\n          let failCount = 0;\r\n          \r\n          // 각 캠페인에 대해 API 호출\r\n          for (const campaignId of selectedCampaignIds) {\r\n            try {\r\n              // 해당 캠페인의 스킬 데이터 찾기\r\n              const campaignSkillInfo = campaignSkillData.find(\r\n                (item) => item.campaign_id === campaignId\r\n              );\r\n              \r\n              if (!campaignSkillInfo) {\r\n                failCount++;\r\n                // console.error(`캠페인 ID ${campaignId}의 스킬 정보를 찾을 수 없습니다.`);\r\n                showAlert(`캠페인 ID ${campaignId}의 스킬 정보를 찾을 수 없습니다.`);\r\n                continue;\r\n              }\r\n              \r\n              // 현재 선택된 스킬을 제외한 스킬 ID 배열\r\n              const remainingSkillIds = campaignSkillInfo.skill_id\r\n                .filter((skillId) => skillId !== currentSkillId);\r\n              \r\n              // 업데이트 API 호출\r\n              await new Promise((resolve) => {\r\n                campaignSkillUpdate({\r\n                  campaign_id: campaignId,\r\n                  skill_id: remainingSkillIds\r\n                }, {\r\n                  onSuccess: () => {\r\n                    successCount++;\r\n                    resolve(null);\r\n                  },\r\n                  onError: (error) => {\r\n                    failCount++;\r\n                    // console.error(`캠페인 ID ${campaignId} 스킬 해제 실패:`, error);\r\n                    showAlert(`캠페인 ID ${campaignId} 스킬 해제 실패: ${error}`);\r\n                    resolve(null);\r\n                  }\r\n                });\r\n              });\r\n            } catch (error) {\r\n              failCount++;\r\n              // console.error(`캠페인 ID ${campaignId} 스킬 해제 오류:`, error);\r\n              showAlert(`캠페인 ID ${campaignId} 스킬 해제 오류: ${error}`);\r\n            }\r\n          }\r\n          \r\n          // 작업 완료 후 메시지 표시\r\n          if (failCount === 0) {\r\n            showAlert(`${successCount}개 캠페인에서 스킬이 성공적으로 해제되었습니다.`);\r\n          } else {\r\n            showAlert(`${successCount}개 성공, ${failCount}개 실패하였습니다.`);\r\n          }\r\n          \r\n          // 데이터 갱신\r\n          fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) });\r\n          fetchSkillCampaignList();\r\n          \r\n          // UI에서 선택된 캠페인 즉시 제거 (그리드 즉시 갱신)\r\n          const updatedCampaigns = filteredCampaigns.filter(\r\n            campaign => !selectedCampaignRows.has(campaign.campaignId)\r\n          );\r\n          setFilteredCampaigns(updatedCampaigns);\r\n          \r\n          // 선택 초기화\r\n          setSelectedCampaignRows(new Set());\r\n          \r\n          // 선택된 스킬의 캠페인 카운트 업데이트\r\n          if (selectedSkill) {\r\n            setSelectedSkill(prev => prev ? ({\r\n              ...prev,\r\n              campaignCount: prev.campaignCount - successCount\r\n            }) : prev);\r\n          }\r\n        },\r\n        onError: (error) => {\r\n          if (error.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n              ...errorMessage,\r\n              isOpen: true,\r\n              message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n              onConfirm: closeAlert,\r\n              onCancel: () => {}\r\n            });\r\n            Cookies.remove('session_key');\r\n            setTimeout(() => {\r\n              router.push('/login');\r\n            }, 1000);\r\n          } else {\r\n              showAlert(`캠페인 스킬 정보 조회 실패: ${error.message}`);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleAgentSkillUnassign = () => {\r\n    if (selectedAgentRows.size === 0) {\r\n      showAlert('스킬을 해제할 상담사을 선택해주세요.');\r\n      return;\r\n    }\r\n  \r\n    // 선택된 상담사 ID 배열 생성\r\n    const selectedAgentIds = Array.from(selectedAgentRows).map(agentId => {\r\n      const agent = filteredAgents.find(agent => agent.agentId === agentId);\r\n      return agent ? agent.agentId : '';\r\n    }).filter(id => id !== ''); // 빈 ID 필터링\r\n  \r\n    // 실제로 API 호출하기 전에 확인 메시지 표시\r\n    showConfirm(`선택한 ${selectedAgentIds.length}명의 상담사 스킬을 해제하시겠습니까?`, () => {\r\n      // 먼저 UI 업데이트 - 이 부분이 중요!\r\n      if (selectedSkill) {\r\n        // 1. 소속상담사 목록에서 선택된 상담사들 제거\r\n        const updatedAgents = filteredAgents.filter(\r\n          agent => !selectedAgentRows.has(agent.agentId)\r\n        );\r\n        setFilteredAgents(updatedAgents);\r\n  \r\n        // 2. 스킬목록에서 소속상담사 수 갱신\r\n        const newAgentCount = selectedSkill.agentCount - selectedAgentIds.length;\r\n        \r\n        // 전체 스킬 목록 업데이트\r\n        setRows(prevRows => \r\n          prevRows.map(row => \r\n            row.skillId === selectedSkill.skillId \r\n              ? { ...row, agentCount: newAgentCount } \r\n              : row\r\n          )\r\n        );\r\n        \r\n        // 선택된 스킬 정보 업데이트\r\n        setSelectedSkill({\r\n          ...selectedSkill,\r\n          agentCount: newAgentCount\r\n        });\r\n      }\r\n      \r\n      // 선택 초기화\r\n      setSelectedAgentRows(new Set());\r\n      \r\n      // API 호출\r\n      deleteAgentSkill({\r\n        skill_id: Number(selectedSkill?.skillId || 0),\r\n        agent_id: selectedAgentIds\r\n      });\r\n    });\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const handleNew = () => {\r\n    setSelectedSkill({ ...initialSkillState, skillId: generateSkillId() });\r\n    setEditableFields({\r\n      tenantId: tenant_id,\r\n      skillName: '',\r\n      description: ''\r\n    });\r\n    setSelectedCampaignRows(new Set());\r\n    setSelectedAgentRows(new Set());\r\n    setFilteredCampaigns([]);\r\n    setFilteredAgents([]);\r\n    setIsNewMode(true);\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const handleSave = () => {\r\n    if (isNewMode && (!editableFields.skillName || !editableFields.description)) {\r\n      showAlert('스킬 이름과 설명을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const skillData = {\r\n      skill_id: Number(selectedSkill?.skillId),\r\n      tenant_id: editableFields.tenantId,\r\n      skill_name: editableFields.skillName,\r\n      skill_description: editableFields.description\r\n    };\r\n\r\n    const savedSkillId = String(selectedSkill?.skillId);\r\n\r\n    if (isNewMode) {\r\n      createSkill(skillData, {\r\n        onSuccess: () => {\r\n          fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) });\r\n          setTimeout(() => {\r\n            const newSkill = rows.find(r => r.skillId === savedSkillId);\r\n            if (newSkill) {\r\n              handleSkillClick({ row: newSkill });\r\n            }\r\n          }, 300);\r\n          setIsNewMode(false);\r\n        },\r\n        onError: (error) => {\r\n          if (error.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n              ...errorMessage,\r\n              isOpen: true,\r\n              message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n              onConfirm: closeAlert,\r\n              onCancel: () => {}\r\n            });\r\n            Cookies.remove('session_key');\r\n            setTimeout(() => {\r\n              router.push('/login');\r\n            }, 1000);\r\n          } else {\r\n            showAlert(`저장 실패: ${error.message}`);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      updateSkill(skillData, {\r\n        onSuccess: () => {\r\n          fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) });\r\n        },\r\n        onError: (error) => {\r\n          if (error.message.split('||')[0] === '5') {\r\n            setAlertState({\r\n              ...errorMessage,\r\n              isOpen: true,\r\n              message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n              onConfirm: closeAlert,\r\n              onCancel: () => {}\r\n            });\r\n            Cookies.remove('session_key');\r\n            setTimeout(() => {\r\n              router.push('/login');\r\n            }, 1000);\r\n          } else {\r\n            showAlert(`수정 실패: ${error.message}`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const handleDelete = () => {\r\n    // 체크박스로 선택된 스킬이 있는 경우 다중 삭제 진행\r\n    if (selectedSkillRows.size > 0) {\r\n      // 선택된 스킬 ID 배열 생성\r\n      const selectedSkillIds = Array.from(selectedSkillRows);\r\n      \r\n      // 선택된 스킬 중 사용 중인 스킬이 있는지 확인\r\n      const inUseSkills = selectedSkillIds\r\n        .map(skillId => rows.find(row => row.skillId === skillId))\r\n        .filter(skill => skill && (skill.campaignCount > 0 || skill.agentCount > 0));\r\n      \r\n      if (inUseSkills.length > 0) {\r\n        // 사용 중인 스킬 이름들을 출력\r\n        const inUseSkillNames = inUseSkills.map(skill => skill?.skillName).join(', ');\r\n        showAlert(`다음 스킬은 사용 중이므로 삭제할 수 없습니다: ${inUseSkillNames}`);\r\n        return;\r\n      }\r\n      \r\n      // 확인 메시지\r\n      const confirmMessage = selectedSkillIds.length === 1\r\n        ? '선택한 스킬을 삭제하시겠습니까?\\n\\n※주의 : 삭제시 데이터베이스에서 완전 삭제됩니다. \\n다시 한번 확인해 주시고 삭제해주세요.'\r\n        : `선택한 ${selectedSkillIds.length}개 스킬을 삭제하시겠습니까?\\n\\n※주의 : 삭제시 데이터베이스에서 완전 삭제됩니다. \\n다시 한번 확인해 주시고 삭제해주세요.`;\r\n      \r\n      showConfirm(confirmMessage, async () => {\r\n        let successCount = 0;\r\n        let failCount = 0;\r\n        \r\n        // 각 스킬에 대해 API 호출\r\n        for (const skillId of selectedSkillIds) {\r\n          try {\r\n            await new Promise<void>((resolve, reject) => {\r\n              deleteSkill({ skill_id: Number(skillId), skill_name: editableFields.skillName}, {\r\n                onSuccess: () => {\r\n                  successCount++;\r\n                  resolve();\r\n                },\r\n                onError: (error) => {\r\n                  if (error.message.split('||')[0] === '5') {\r\n                    setAlertState({\r\n                      ...errorMessage,\r\n                      isOpen: true,\r\n                      message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n                      onConfirm: closeAlert,\r\n                      onCancel: () => {}\r\n                    });\r\n                    Cookies.remove('session_key');\r\n                    setTimeout(() => {\r\n                      router.push('/login');\r\n                    }, 1000);\r\n                  } else {\r\n                      failCount++;\r\n                      showAlert(`스킬 ID ${skillId} 삭제 실패: ${error}`);\r\n                      reject(error);\r\n                  }\r\n                }\r\n              });\r\n            });\r\n          } catch (error) {\r\n            showAlert(`스킬 ID ${skillId} 삭제 중 오류:  ${error}`);\r\n          }\r\n        }\r\n        \r\n        // 작업 완료 후 메시지 표시\r\n        if (failCount === 0) {\r\n          showAlert(`${successCount}개 스킬이 성공적으로 삭제되었습니다.`);\r\n        } else {\r\n          showAlert(`${successCount}개 삭제 성공, ${failCount}개 삭제 실패하였습니다.`);\r\n        }\r\n        \r\n        // 스킬 리스트 새로고침\r\n        fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) });\r\n        \r\n        // 체크박스 선택 초기화\r\n        setSelectedSkillRows(new Set());\r\n        \r\n        // 선택된 스킬이 삭제되었을 경우 상세 정보도 초기화\r\n        if (selectedSkill && selectedSkillIds.includes(selectedSkill.skillId)) {\r\n          setSelectedSkill(null);\r\n          setEditableFields({\r\n            tenantId: tenant_id,\r\n            skillName: '',\r\n            description: ''\r\n          });\r\n          setFilteredCampaigns([]);\r\n          setFilteredAgents([]);\r\n          setSelectedCampaignRows(new Set());\r\n          setSelectedAgentRows(new Set());\r\n        }\r\n      });\r\n    } \r\n    // 체크박스 선택이 없고 단일 로우 선택일 경우 기존 삭제 로직 사용\r\n    else if (selectedSkill) {\r\n      if (selectedSkill.campaignCount > 0 || selectedSkill.agentCount > 0) {\r\n        showAlert('사용 중인 스킬은 삭제할 수 없습니다.');\r\n        return;\r\n      }\r\n    \r\n      showConfirm('선택한 스킬을 삭제하시겠습니까?\\n\\n※주의 : 삭제시 데이터베이스에서 완전 삭제됩니다. \\n다시 한번 확인해 주시고 삭제해주세요.', () => {\r\n        deleteSkill({ skill_id: Number(selectedSkill.skillId), skill_name: editableFields.skillName}, {\r\n          onSuccess: () => {\r\n            // 스킬 리스트 새로고침\r\n            fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) });\r\n            \r\n            // 상세 정보 초기화\r\n            setSelectedSkill(null);\r\n            setEditableFields({\r\n              tenantId: tenant_id,\r\n              skillName: '',\r\n              description: ''\r\n            });\r\n            \r\n            // 관련 데이터 초기화\r\n            setFilteredCampaigns([]);\r\n            setFilteredAgents([]);\r\n            setSelectedCampaignRows(new Set());\r\n            setSelectedAgentRows(new Set());\r\n            \r\n            showAlert('스킬이 성공적으로 삭제되었습니다.');\r\n          },\r\n          onError: (error) => {\r\n            if (error.message.split('||')[0] === '5') {\r\n              setAlertState({\r\n                ...errorMessage,\r\n                isOpen: true,\r\n                message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n                onConfirm: closeAlert,\r\n                onCancel: () => {}\r\n              });\r\n              Cookies.remove('session_key');\r\n              setTimeout(() => {\r\n                router.push('/login');\r\n              }, 1000);\r\n            } else {\r\n                showAlert(`삭제 실패: ${error.message}`);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    else {\r\n      showAlert('삭제할 스킬을 선택해주세요.');\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: 'skillName' | 'description', value: string) => {\r\n    setEditableFields(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleTenantChange = (value: string) => {\r\n    const tenantId = parseInt(value, 10);\r\n    setEditableFields(prev => ({\r\n      ...prev,\r\n      tenantId\r\n    }));\r\n  };\r\n\r\n  const showAlert = (message: string) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '알림',\r\n      type: '2',\r\n      onConfirm: closeAlert,\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  const showConfirm = (message: string, onConfirm: () => void) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '확인',\r\n      type: '1',\r\n      onConfirm: () => {\r\n        onConfirm();\r\n        closeAlert();\r\n      },\r\n      onCancel: closeAlert\r\n    });\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlertState(prev => ({ ...prev, isOpen: false }));\r\n  };\r\n\r\n  // API 상태 관리\r\n  const [campaignData, setCampaignData] = useState<any>(null);\r\n  const [agentData, setAgentData] = useState<any>(null);\r\n\r\n  // API Hooks\r\n  const { mutate: fetchCounselorList, data: counselorData } = useApiForCounselorList({\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`상담사 리스트 조회 실패: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: fetchSkillList, data: skillData } = useApiForSkillList({\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`스킬 리스트 조회 실패: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: fetchSkillCampaignList } = useApiForSkillCampaignList({\r\n    onSuccess: (data) => {\r\n      setCampaignData(data);\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: fetchSkillAgentList } = useApiForSkillAgentList({\r\n    onSuccess: (data) => {\r\n      setAgentData(data);\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: fetchCampaignList } = useApiForCampaignList({\r\n    onSuccess: (data) => {\r\n      const campaigns = data.result_data.map((campaign: any) => ({\r\n        skillId: '',\r\n        campaignId: String(campaign.campaign_id),\r\n        campaignName: campaign.campaign_name,\r\n        mode: getDialModeText(campaign.dial_mode)\r\n      }));\r\n      setAllCampaigns(campaigns);\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: fetchCounselorAssignList } = useApiForCounselorAssignList({\r\n    onSuccess: (data: CounselorAssignListResponse) => {\r\n      if (data.skillAssignedCounselorList) {\r\n        const mappedAgents: AgentRow[] = data.skillAssignedCounselorList.map(counselor => ({\r\n          skillId: selectedSkill?.skillId || '',\r\n          teamId: counselor.affiliationTeamId,\r\n          teamName: counselor.affiliationTeamName,\r\n          loginId: counselor.counselorId,\r\n          agentId: counselor.counselorEmplNum,\r\n          agentName: counselor.counselorname,\r\n          consultMode: getBlendKindText(counselor.blendKind)\r\n        }));\r\n        // 소속 상담사목록 팀아이디 기준 오름차순 정렬\r\n        setFilteredAgents(mappedAgents.sort((a,b)=> Number(a.teamId) - Number(b.teamId)));\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: createSkill } = useApiForCreateSkill({\r\n    onSuccess: () => {\r\n      showAlert('스킬이 성공적으로 추가되었습니다.');\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`스킬 추가 실패: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: updateSkill } = useApiForUpdateSkill({\r\n    onSuccess: () => {\r\n      showAlert('스킬이 성공적으로 수정되었습니다.');\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`스킬 수정 실패: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { mutate: deleteSkill } = useApiForDeleteSkill({\r\n    onSuccess: () => {\r\n      // showAlert('스킬이 성공적으로 삭제되었습니다.');\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`스킬 삭제 실패: ${error.message}`);\r\n      }\r\n    }\r\n  })\r\n\r\n  const { mutate: deleteAgentSkill } = useApiForDeleteAgentSkill({\r\n    onSuccess: () => {\r\n      // API 성공 알림만 표시\r\n      showAlert('상담사 스킬이 성공적으로 해제되었습니다.');\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`상담사 스킬 해제 실패: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 캠페인스킬 조회\r\n  const { mutate: campaignSkillList } = useApiForCampaignSkill({\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`캠페인 스킬 조회 실패: ${error.message}`);\r\n      }\r\n    }\r\n  })\r\n\r\n  const { mutate: campaignSkillUpdate } = useApiForCampaignSkillUpdate({\r\n  onSuccess: () => {\r\n    showAlert('캠페인 스킬 할당이 성공적으로 완료되었습니다.');\r\n  },\r\n  onError: (error) => {\r\n    if (error.message.split('||')[0] === '5') {\r\n      setAlertState({\r\n        ...errorMessage,\r\n        isOpen: true,\r\n        message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n        onConfirm: closeAlert,\r\n        onCancel: () => {}\r\n      });\r\n      Cookies.remove('session_key');\r\n      setTimeout(() => {\r\n        router.push('/login');\r\n      }, 1000);\r\n    } else {\r\n      showAlert(`캠페인 스킬 할당 실패: ${error.message}`);\r\n    }\r\n  }\r\n  })\r\n\r\n  // 테넌트 선택시 관련 센터 정보 가져오기\r\n  const getSelectedTenantCenterName = () => {\r\n    if (!counselorData?.organizationList || !selectedSkill) return '';\r\n    \r\n    // 선택된 테넌트 ID에 해당하는 센터 이름 찾기\r\n    for (const org of counselorData.organizationList) {\r\n      const tenant = org.tenantInfo.find(t => t.tenantId === String(editableFields.tenantId));\r\n      if (tenant) {\r\n        return org.centerName;\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const isFieldDisabled = () => {\r\n    // 선택된 스킬이 없고 신규 모드도 아니면 비활성화\r\n    return !selectedSkill && !isNewMode;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (campaignData && selectedSkill) {\r\n      \r\n      // 캠페인 데이터 구조 탐색\r\n      let campaignIds: any[] = [];\r\n      \r\n      if (campaignData.result_data && Array.isArray(campaignData.result_data)) {\r\n        const skillCampaignEntry = campaignData.result_data.find(\r\n          (entry: any) => String(entry.skill_id) === selectedSkill.skillId\r\n        );\r\n        \r\n        if (skillCampaignEntry && Array.isArray(skillCampaignEntry.campaign_id)) {\r\n          campaignIds = skillCampaignEntry.campaign_id;\r\n        }\r\n      }\r\n      \r\n      // 문자열과 숫자 비교를 모두 허용하기 위한 필터링\r\n      const relatedCampaigns = allCampaigns.filter(campaign => {\r\n        const campaignIdNum = Number(campaign.campaignId);\r\n        return campaignIds.some(id => id === campaign.campaignId || id === campaignIdNum);\r\n      });\r\n      \r\n      setFilteredCampaigns(relatedCampaigns);\r\n    }\r\n  }, [campaignData, selectedSkill, allCampaigns]);\r\n\r\n  // 스킬 목록이 업데이트 될 때마다 현재 선택된 스킬의 상세 정보도 갱신하는 useEffect 추가\r\n  useEffect(() => {\r\n    if (selectedSkill && rows.length > 0) {\r\n      const updatedSkill = rows.find(row => row.skillId === selectedSkill.skillId);\r\n      if (updatedSkill) {\r\n        // 필요한 정보가 변경된 경우만 업데이트 (불필요한 리렌더링 방지)\r\n        if (updatedSkill.center !== selectedSkill.center || \r\n            updatedSkill.tenant !== selectedSkill.tenant ||\r\n            updatedSkill.skillName !== selectedSkill.skillName ||\r\n            updatedSkill.description !== selectedSkill.description) {\r\n          setSelectedSkill(updatedSkill);\r\n          setEditableFields({\r\n            tenantId: updatedSkill.tenantId,\r\n            skillName: updatedSkill.skillName,\r\n            description: updatedSkill.description\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [rows, selectedSkill]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetchCounselorList({ tenantId: tenant_id, roleId: role_id });\r\n    fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) });\r\n    fetchSkillCampaignList();\r\n    fetchSkillAgentList();\r\n    fetchCampaignList();\r\n    campaignSkillList({\r\n      session_key: '',\r\n      tenant_id: tenant_id\r\n    });\r\n  }, [tenant_id, role_id, tenants, fetchCounselorList, fetchSkillList, fetchSkillCampaignList, fetchSkillAgentList, fetchCampaignList, campaignSkillList]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      counselorData?.organizationList &&\r\n      skillData?.result_data\r\n    ) {\r\n      const tenantMap: { [tenantId: string]: { centerName: string; tenantName: string } } = {};\r\n      counselorData.organizationList.forEach(org => {\r\n        const centerName = org.centerName;\r\n        org.tenantInfo.forEach(tenant => {\r\n          tenantMap[tenant.tenantId] = {\r\n            centerName,\r\n            tenantName: tenant.tenantName\r\n          };\r\n        });\r\n      });\r\n      \r\n      const campaignResultData = (campaignData?.result_data) || [];\r\n      const agentResultData = (agentData?.result_data) || [];\r\n      \r\n      const skillRows: SkillRow[] = skillData.result_data.map(skill => {\r\n        const tenantInfo = tenantMap[String(skill.tenant_id)] || { centerName: '', tenantName: '' };\r\n        const campaignEntry = campaignResultData.find((item: any) => String(item.skill_id) === String(skill.skill_id));\r\n        const agentEntry = agentResultData.find((item: any) => String(item.skill_id) === String(skill.skill_id));\r\n        \r\n        return {\r\n          center: tenantInfo.centerName,\r\n          tenant: tenantInfo.tenantName,\r\n          tenantId: skill.tenant_id,\r\n          skillId: String(skill.skill_id),\r\n          skillName: skill.skill_name,\r\n          description: skill.skill_description,\r\n          campaignCount: campaignEntry ? campaignEntry.campaign_id.length : 0,\r\n          agentCount: agentEntry ? agentEntry.agent_id.length : 0\r\n        };\r\n      });\r\n      setRows(skillRows);\r\n    }\r\n  }, [counselorData, skillData, campaignData, agentData]);\r\n\r\n  // 키보드 이벤트 핸들러 추가\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (alertState.isOpen) {\r\n        // Enter 키: 확인 버튼 클릭\r\n        if (event.key === 'Enter') {\r\n          event.preventDefault();\r\n          alertState.onConfirm();\r\n          return;\r\n        }\r\n        \r\n        // Esc 키: 취소 버튼 클릭 (type이 '1'인 경우에만)\r\n        if (event.key === 'Escape' && alertState.type === '1') {\r\n          event.preventDefault();\r\n          alertState.onCancel();\r\n          return;\r\n        }\r\n        \r\n        // 경고창이 열려 있을 때는 다른 단축키를 처리하지 않음\r\n        return;\r\n      }\r\n      \r\n      // Ctrl + S: 저장\r\n      if (event.ctrlKey && event.key === 's') {\r\n        event.preventDefault();\r\n        handleSave();\r\n      }\r\n      \r\n      // Ctrl + D 또는 Delete: 삭제\r\n      if ((event.ctrlKey && event.key === 'd') || event.key === 'Delete') {\r\n        event.preventDefault();\r\n        handleDelete();\r\n      }\r\n      \r\n      // 아래 화살표: 신규\r\n      if (event.key === 'ArrowDown' && !event.ctrlKey && !event.shiftKey && !event.altKey) {\r\n        // 입력 필드에서는 아래 화살표가 정상 작동하도록 예외 처리\r\n        if (\r\n          document.activeElement?.tagName !== 'INPUT' && \r\n          document.activeElement?.tagName !== 'SELECT' &&\r\n          document.activeElement?.tagName !== 'TEXTAREA'\r\n        ) {\r\n          // 이벤트의 기본 동작과 전파를 모두 차단\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          handleNew();\r\n        }\r\n      }\r\n    };\r\n\r\n    // 캡처 단계에서 이벤트 리스너 등록 (이벤트 버블링보다 먼저 실행됨)\r\n    window.addEventListener('keydown', handleKeyDown, true);\r\n\r\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown, true);\r\n    };\r\n  }, [alertState, handleDelete, handleNew, handleSave]);\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <div className=\"flex gap-8\">\r\n        <div className=\"w-[800px] flex flex-col gap-3\">\r\n          {/* 스킬 목록 그리드 */}\r\n          <div>\r\n            <TitleWrap title=\"스킬 목록\" totalCount={rows.length} />\r\n            <div className=\"grid-custom-wrap h-[230px]\">\r\n              <DataGrid\r\n                columns={skillColumns}\r\n                rows={rows}\r\n                className=\"grid-custom\"\r\n                // onCellClick={handleSkillClick}\r\n                onCellClick={(props) => {\r\n                  // SelectColumn을 클릭한 경우는 제외하고 로우 선택 처리\r\n                  if (props.column.key !== SelectColumn.key) {\r\n                    handleSkillClick(props);\r\n                  }\r\n                }}\r\n                rowKeyGetter={(row) => row.skillId}\r\n                // selectedRows={selectedSkill ? new Set<string>([selectedSkill.skillId]) : new Set<string>()}\r\n                selectedRows={selectedSkillRows}\r\n                onSelectedRowsChange={handleSkillSelectionChange}\r\n                rowHeight={30}\r\n                headerRowHeight={30}\r\n                rowClass={getRowClass}\r\n                enableVirtualization={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          {/* 소속 캠페인 목록 */}\r\n          <div>\r\n            <TitleWrap \r\n              title=\"소속 캠페인 목록\" \r\n              totalCount={filteredCampaigns.length}\r\n              buttons={[\r\n                { \r\n                  label: \"선택 캠페인 스킬할당 해제\",\r\n                  onClick: handleSkillUnassign\r\n                },\r\n              ]}\r\n            />\r\n            <div className=\"grid-custom-wrap h-[200px]\">\r\n              <DataGrid\r\n                columns={campaignColumns}\r\n                rows={filteredCampaigns}\r\n                className=\"grid-custom\"\r\n                rowKeyGetter={(row) => row.campaignId}\r\n                selectedRows={selectedCampaignRows}\r\n                onSelectedRowsChange={handleCampaignSelectionChange}\r\n                rowHeight={30}\r\n                headerRowHeight={30}\r\n                enableVirtualization={false}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* 소속 상담사 목록 */}\r\n          <div>\r\n            <TitleWrap \r\n              title=\"소속 상담사 목록\" \r\n              totalCount={filteredAgents.length}\r\n              buttons={[\r\n                { \r\n                  label: \"선택 상담사 스킬할당 해제\",\r\n                  onClick: handleAgentSkillUnassign\r\n                },\r\n              ]}\r\n            />\r\n            <div className=\"grid-custom-wrap h-[200px]\">\r\n              <DataGrid\r\n                columns={agentColumns}\r\n                rows={filteredAgents}\r\n                className=\"grid-custom\"\r\n                rowKeyGetter={(row) => row.agentId}\r\n                selectedRows={selectedAgentRows}\r\n                onSelectedRowsChange={handleAgentSelectionChange}\r\n                rowHeight={30}\r\n                headerRowHeight={30}\r\n                enableVirtualization={false}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 오른쪽 상세 정보 */}\r\n        <div className=\"w-[513px]\">\r\n          <div className=\"flex flex-col gap-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label className=\"w-[8rem] min-w-[8rem]\">상담센터</Label>\r\n              <CustomInput \r\n                value={isNewMode ? getSelectedTenantCenterName() : selectedSkill?.center || ''}\r\n                className=\"w-full\"\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label className=\"w-[8rem] min-w-[8rem]\">테넌트</Label>\r\n              {isNewMode ? (\r\n                <Select \r\n                  value={editableFields.tenantId ? String(editableFields.tenantId) : ''}\r\n                  onValueChange={handleTenantChange}\r\n                >\r\n                  <SelectTrigger className=\"w-full\">\r\n                    <SelectValue placeholder=\"\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {tenants.map((tenant) => (\r\n                      <SelectItem key={tenant.tenant_id} value={String(tenant.tenant_id)}>\r\n                        {tenant.tenant_name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              ) : (\r\n                <CustomInput \r\n                  value={selectedSkill?.tenant || ''}\r\n                  className=\"w-full\"\r\n                  disabled\r\n                />\r\n              )}\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label className=\"w-[8rem] min-w-[8rem]\">스킬아이디</Label>\r\n              <CustomInput \r\n                value={selectedSkill?.skillId || ''}\r\n                className=\"w-full\"\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label className=\"w-[8rem] min-w-[8rem]\">스킬이름</Label>\r\n              <CustomInput \r\n                value={editableFields.skillName}\r\n                onChange={(e) => handleInputChange('skillName', e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()} // 비활성화 조건 추가\r\n              />\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label className=\"w-[8rem] min-w-[8rem]\">설명</Label>\r\n              <CustomInput \r\n                value={editableFields.description}\r\n                onChange={(e) => handleInputChange('description', e.target.value)}\r\n                className=\"w-full\"\r\n                disabled={isFieldDisabled()} // 비활성화 조건 추가\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end gap-2 pt-4\">\r\n            <CommonButton onClick={handleDelete}>삭제</CommonButton>\r\n            <CommonButton onClick={handleNew}>신규</CommonButton>\r\n            <CommonButton onClick={handleSave}>저장</CommonButton>\r\n          </div>\r\n          <div className=\"mt-[20px] text-sm\">\r\n            <ul className='space-y-1 notice-li'>\r\n              <li>• 스킬을 추가, 수정, 삭제할 수 있습니다.</li>\r\n              <li>• 사용 중인 스킬은 추가 및 삭제할 수 없습니다.</li>\r\n              <li>\r\n                • 기능설명<br/>\r\n                스킬 추가 = 키보드 ↓<br/>\r\n                스킬 삭제 = 키보드 Delete<br/>\r\n                체크박스를 선택하여 다중 선택 가능(다중선택은 삭제만 가능)\r\n                {/* 다중 선택 = Shift 또는 Ctrl 키를 이용하여 다중 선택 가능 */}\r\n              </li>\r\n              <li>• 단축키<br/>저장하기(Ctrl+S)<br/>삭제하기(Ctrl+D or Del)</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <CustomAlert\r\n        isOpen={alertState.isOpen}\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        onClose={alertState.onConfirm}\r\n        onCancle={alertState.onCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SkillEdit;"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AATA;;;;;;;;;;;;;;;;;;;AAgDA,MAAM,eAAe;IACnB,QAAQ;IACR,SAAS;IACT,OAAO;IACP,MAAM;AACR;AAEA,MAAM,YAAY;;IAChB,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAC1C,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD;IAC1C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IAC/C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmB;IACpE,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe,IAAI;IAClF,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe,IAAI;IAC5E,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAC5E,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACnE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAClE,wCAAwC;IACxC,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe,IAAI;IAE5E,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,kBAAkB;IAClB,MAAM,oBAAoB;QACxB,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,SAAS;QACT,WAAW;QACX,aAAa;QACb,eAAe;QACf,YAAY;IACd;IAEA,oBAAoB;IACpB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QACnD,UAAU;QACV,WAAW;QACX,aAAa;IACf;IAEA,oBAAoB;IACpB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAC3C,QAAQ;QACR,SAAS;QACT,OAAO;QACP,MAAM;QACN,SAAS;kCAAE,KAAO;;QAClB,QAAQ;kCAAE,KAAO;;IACnB;IAEA,YAAY;IACZ,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;2CAAE,IAAM;gBACjC,yJAAA,CAAA,eAAY;gBACZ;oBAAE,KAAK;oBAAU,MAAM;gBAAK;gBAC5B;oBAAE,KAAK;oBAAU,MAAM;gBAAM;gBAC7B;oBAAE,KAAK;oBAAW,MAAM;gBAAQ;gBAChC;oBAAE,KAAK;oBAAa,MAAM;gBAAO;gBACjC;oBAAE,KAAK;oBAAe,MAAM;gBAAK;gBACjC;oBAAE,KAAK;oBAAiB,MAAM;gBAAU;gBACxC;oBAAE,KAAK;oBAAc,MAAM;gBAAU;aACtC;0CAAE,EAAE;IAEL,aAAa;IACb,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;8CAAE,IAAM;gBACpC,yJAAA,CAAA,eAAY;gBACZ;oBAAE,KAAK;oBAAc,MAAM;gBAAU;gBACrC;oBAAE,KAAK;oBAAgB,MAAM;gBAAS;gBACtC;oBAAE,KAAK;oBAAQ,MAAM;gBAAS;aAC/B;6CAAE,EAAE;IAEL,aAAa;IACb,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;2CAAE,IAAM;gBACjC,yJAAA,CAAA,eAAY;gBACZ;oBAAE,KAAK;oBAAU,MAAM;gBAAO;gBAC9B;oBAAE,KAAK;oBAAY,MAAM;gBAAM;gBAC/B;oBAAE,KAAK;oBAAW,MAAM;gBAAS;gBACjC;oBAAE,KAAK;oBAAW,MAAM;gBAAS;gBACjC;oBAAE,KAAK;oBAAa,MAAM;gBAAS;gBACnC;oBAAE,KAAK;oBAAe,MAAM;gBAAO;aACpC;0CAAE,EAAE;IAEL,MAAM,mBAAmB,CAAC;QACxB,OAAQ;YACN,KAAK;gBAAK,OAAO;YACjB,KAAK;gBAAK,OAAO;YACjB,KAAK;gBAAK,OAAO;YACjB;gBAAS,OAAO;QAClB;IACF;IAEA,kBAAkB;IAClB,MAAM,kBAAkB,CAAC;QACvB,OAAQ;YACN,KAAK;gBAAG,OAAO;YACf,KAAK;gBAAG,OAAO;YACf,KAAK;gBAAG,OAAO;YACf,KAAK;gBAAG,OAAO;YACf;gBAAS,OAAO;QAClB;IACF;IAEA,MAAM,cAAc,CAAC;QACnB,OAAO,eAAe,YAAY,IAAI,OAAO,GAAG,gBAAgB;IAClE;IAEA,iBAAiB;IACjB,MAAM,kBAAkB;QACtB,0BAA0B;QAC1B,IAAI,KAAK,MAAM,KAAK,GAAG,OAAO;QAE9B,mCAAmC;QACnC,MAAM,kBAAkB,KACrB,GAAG,CAAC,CAAA,MAAO,IAAI,OAAO,EACtB,MAAM,CAAC,CAAA,KAAM,QAAQ,IAAI,CAAC,KAAM,gBAAgB;SAChD,GAAG,CAAC,CAAA,KAAM,SAAS,IAAI;QAE1B,SAAS;QACT,MAAM,aAAa,gBAAgB,MAAM,GAAG,IAAI,KAAK,GAAG,IAAI,mBAAmB;QAE/E,aAAa;QACb,OAAO,OAAO,aAAa;IAC7B;IAEA,mBAAmB;IACnB,MAAM,mBAAmB,CAAC,EAAE,GAAG,EAAqB;QAClD,iBAAiB;QACjB,wBAAwB,IAAI;QAC5B,qBAAqB,IAAI;QACzB,kBAAkB;YAChB,UAAU,IAAI,QAAQ;YACtB,WAAW,IAAI,SAAS;YACxB,aAAa,IAAI,WAAW;QAC9B;QACA,aAAa;QAEb,eAAe;QACf,MAAM,mBAAmB;YACvB,IAAI,gBAAgB,aAAa,WAAW,EAAE;gBAC5C,MAAM,qBAAqB,aAAa,WAAW,CAAC,IAAI,CACtD,CAAC,QAAe,OAAO,MAAM,QAAQ,MAAM,IAAI,OAAO;gBAExD,MAAM,cAAwB,qBAAqB,mBAAmB,WAAW,GAAG,EAAE;gBACtF,MAAM,mBAAmB,aAAa,MAAM,CAAC,CAAA,WAAY,YAAY,QAAQ,CAAC,SAAS,UAAU;gBACjG,qBAAqB;YACvB,OAAO;gBACL,4BAA4B;gBAC5B;YACF;QACF;QAEA;QAEA,WAAW;QACX,yBAAyB;YACvB,UAAU,IAAI,QAAQ;YACtB,SAAS,OAAO,IAAI,OAAO;QAC7B;IACF;IAEA,gCAAgC;IAChC,MAAM,6BAA6B,CAAC;QAClC,oCAAoC;QACpC,qBAAqB;IACvB;IAEA,MAAM,gCAAgC,CAAC;QACrC,wBAAwB;IAC1B;IAEA,MAAM,6BAA6B,CAAC;QAClC,qBAAqB;IACvB;IAEA,MAAM,sBAAsB;QAC1B,IAAI,qBAAqB,IAAI,KAAK,GAAG;YACnC,UAAU;YACV;QACF;QAEA,IAAI,CAAC,eAAe;YAClB,UAAU;YACV;QACF;QAEA,MAAM,iBAAiB,SAAS,cAAc,OAAO,EAAE;QAEvD,YAAY,8BAA8B;YACxC,mBAAmB;YACnB,MAAM,sBAAsB,MAAM,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAA;gBAC/D,MAAM,WAAW,kBAAkB,IAAI,CAAC,CAAA,IAAK,EAAE,UAAU,KAAK;gBAC9D,OAAO,WAAW,SAAS,SAAS,UAAU,EAAE,MAAM;YACxD,GAAG,MAAM,CAAC,CAAA,KAAM,OAAO;YAEvB,2BAA2B;YAC3B,kBAAkB;gBAChB,aAAa;gBACb,WAAW;YACb,GAAG;gBACD,WAAW,OAAO;oBAChB,MAAM,oBAAoB,KAAK,WAAW,IAAI,EAAE;oBAChD,sCAAsC;oBACtC,kDAAkD;oBAElD,WAAW;oBACX,IAAI,eAAe;oBACnB,IAAI,YAAY;oBAEhB,mBAAmB;oBACnB,KAAK,MAAM,cAAc,oBAAqB;wBAC5C,IAAI;4BACF,oBAAoB;4BACpB,MAAM,oBAAoB,kBAAkB,IAAI,CAC9C,CAAC,OAAS,KAAK,WAAW,KAAK;4BAGjC,IAAI,CAAC,mBAAmB;gCACtB;gCACA,4DAA4D;gCAC5D,UAAU,CAAC,OAAO,EAAE,WAAW,mBAAmB,CAAC;gCACnD;4BACF;4BAEA,0BAA0B;4BAC1B,MAAM,oBAAoB,kBAAkB,QAAQ,CACjD,MAAM,CAAC,CAAC,UAAY,YAAY;4BAEnC,cAAc;4BACd,MAAM,IAAI,QAAQ,CAAC;gCACjB,oBAAoB;oCAClB,aAAa;oCACb,UAAU;gCACZ,GAAG;oCACD,WAAW;wCACT;wCACA,QAAQ;oCACV;oCACA,SAAS,CAAC;wCACR;wCACA,0DAA0D;wCAC1D,UAAU,CAAC,OAAO,EAAE,WAAW,WAAW,EAAE,OAAO;wCACnD,QAAQ;oCACV;gCACF;4BACF;wBACF,EAAE,OAAO,OAAO;4BACd;4BACA,0DAA0D;4BAC1D,UAAU,CAAC,OAAO,EAAE,WAAW,WAAW,EAAE,OAAO;wBACrD;oBACF;oBAEA,iBAAiB;oBACjB,IAAI,cAAc,GAAG;wBACnB,UAAU,GAAG,aAAa,0BAA0B,CAAC;oBACvD,OAAO;wBACL,UAAU,GAAG,aAAa,MAAM,EAAE,UAAU,UAAU,CAAC;oBACzD;oBAEA,SAAS;oBACT,eAAe;wBAAE,iBAAiB,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,SAAS;oBAAE;oBAC1E;oBAEA,iCAAiC;oBACjC,MAAM,mBAAmB,kBAAkB,MAAM,CAC/C,CAAA,WAAY,CAAC,qBAAqB,GAAG,CAAC,SAAS,UAAU;oBAE3D,qBAAqB;oBAErB,SAAS;oBACT,wBAAwB,IAAI;oBAE5B,uBAAuB;oBACvB,IAAI,eAAe;wBACjB,iBAAiB,CAAA,OAAQ,OAAQ;gCAC/B,GAAG,IAAI;gCACP,eAAe,KAAK,aAAa,GAAG;4BACtC,IAAK;oBACP;gBACF;gBACA,SAAS,CAAC;oBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;wBACxC,cAAc;4BACZ,GAAG,YAAY;4BACf,QAAQ;4BACR,SAAS;4BACT,WAAW;4BACX,UAAU,KAAO;wBACnB;wBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;wBACf,WAAW;4BACT,OAAO,IAAI,CAAC;wBACd,GAAG;oBACL,OAAO;wBACH,UAAU,CAAC,iBAAiB,EAAE,MAAM,OAAO,EAAE;oBACjD;gBACF;YACF;QACF;IACF;IAEA,MAAM,2BAA2B;QAC/B,IAAI,kBAAkB,IAAI,KAAK,GAAG;YAChC,UAAU;YACV;QACF;QAEA,mBAAmB;QACnB,MAAM,mBAAmB,MAAM,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAA;YACzD,MAAM,QAAQ,eAAe,IAAI,CAAC,CAAA,QAAS,MAAM,OAAO,KAAK;YAC7D,OAAO,QAAQ,MAAM,OAAO,GAAG;QACjC,GAAG,MAAM,CAAC,CAAA,KAAM,OAAO,KAAK,WAAW;QAEvC,4BAA4B;QAC5B,YAAY,CAAC,IAAI,EAAE,iBAAiB,MAAM,CAAC,oBAAoB,CAAC,EAAE;YAChE,yBAAyB;YACzB,IAAI,eAAe;gBACjB,4BAA4B;gBAC5B,MAAM,gBAAgB,eAAe,MAAM,CACzC,CAAA,QAAS,CAAC,kBAAkB,GAAG,CAAC,MAAM,OAAO;gBAE/C,kBAAkB;gBAElB,uBAAuB;gBACvB,MAAM,gBAAgB,cAAc,UAAU,GAAG,iBAAiB,MAAM;gBAExE,gBAAgB;gBAChB,QAAQ,CAAA,WACN,SAAS,GAAG,CAAC,CAAA,MACX,IAAI,OAAO,KAAK,cAAc,OAAO,GACjC;4BAAE,GAAG,GAAG;4BAAE,YAAY;wBAAc,IACpC;gBAIR,iBAAiB;gBACjB,iBAAiB;oBACf,GAAG,aAAa;oBAChB,YAAY;gBACd;YACF;YAEA,SAAS;YACT,qBAAqB,IAAI;YAEzB,SAAS;YACT,iBAAiB;gBACf,UAAU,OAAO,eAAe,WAAW;gBAC3C,UAAU;YACZ;QACF;IACF;IAEA,uDAAuD;IACvD,MAAM,YAAY;QAChB,iBAAiB;YAAE,GAAG,iBAAiB;YAAE,SAAS;QAAkB;QACpE,kBAAkB;YAChB,UAAU;YACV,WAAW;YACX,aAAa;QACf;QACA,wBAAwB,IAAI;QAC5B,qBAAqB,IAAI;QACzB,qBAAqB,EAAE;QACvB,kBAAkB,EAAE;QACpB,aAAa;IACf;IAEA,uDAAuD;IACvD,MAAM,aAAa;QACjB,IAAI,aAAa,CAAC,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,WAAW,GAAG;YAC3E,UAAU;YACV;QACF;QAEA,MAAM,YAAY;YAChB,UAAU,OAAO,eAAe;YAChC,WAAW,eAAe,QAAQ;YAClC,YAAY,eAAe,SAAS;YACpC,mBAAmB,eAAe,WAAW;QAC/C;QAEA,MAAM,eAAe,OAAO,eAAe;QAE3C,IAAI,WAAW;YACb,YAAY,WAAW;gBACrB,WAAW;oBACT,eAAe;wBAAE,iBAAiB,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,SAAS;oBAAE;oBAC1E,WAAW;wBACT,MAAM,WAAW,KAAK,IAAI,CAAC,CAAA,IAAK,EAAE,OAAO,KAAK;wBAC9C,IAAI,UAAU;4BACZ,iBAAiB;gCAAE,KAAK;4BAAS;wBACnC;oBACF,GAAG;oBACH,aAAa;gBACf;gBACA,SAAS,CAAC;oBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;wBACxC,cAAc;4BACZ,GAAG,YAAY;4BACf,QAAQ;4BACR,SAAS;4BACT,WAAW;4BACX,UAAU,KAAO;wBACnB;wBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;wBACf,WAAW;4BACT,OAAO,IAAI,CAAC;wBACd,GAAG;oBACL,OAAO;wBACL,UAAU,CAAC,OAAO,EAAE,MAAM,OAAO,EAAE;oBACrC;gBACF;YACF;QACF,OAAO;YACL,YAAY,WAAW;gBACrB,WAAW;oBACT,eAAe;wBAAE,iBAAiB,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,SAAS;oBAAE;gBAC5E;gBACA,SAAS,CAAC;oBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;wBACxC,cAAc;4BACZ,GAAG,YAAY;4BACf,QAAQ;4BACR,SAAS;4BACT,WAAW;4BACX,UAAU,KAAO;wBACnB;wBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;wBACf,WAAW;4BACT,OAAO,IAAI,CAAC;wBACd,GAAG;oBACL,OAAO;wBACL,UAAU,CAAC,OAAO,EAAE,MAAM,OAAO,EAAE;oBACrC;gBACF;YACF;QACF;IACF;IAEA,uDAAuD;IACvD,MAAM,eAAe;QACnB,+BAA+B;QAC/B,IAAI,kBAAkB,IAAI,GAAG,GAAG;YAC9B,kBAAkB;YAClB,MAAM,mBAAmB,MAAM,IAAI,CAAC;YAEpC,4BAA4B;YAC5B,MAAM,cAAc,iBACjB,GAAG,CAAC,CAAA,UAAW,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,OAAO,KAAK,UAChD,MAAM,CAAC,CAAA,QAAS,SAAS,CAAC,MAAM,aAAa,GAAG,KAAK,MAAM,UAAU,GAAG,CAAC;YAE5E,IAAI,YAAY,MAAM,GAAG,GAAG;gBAC1B,mBAAmB;gBACnB,MAAM,kBAAkB,YAAY,GAAG,CAAC,CAAA,QAAS,OAAO,WAAW,IAAI,CAAC;gBACxE,UAAU,CAAC,2BAA2B,EAAE,iBAAiB;gBACzD;YACF;YAEA,SAAS;YACT,MAAM,iBAAiB,iBAAiB,MAAM,KAAK,IAC/C,8EACA,CAAC,IAAI,EAAE,iBAAiB,MAAM,CAAC,uEAAuE,CAAC;YAE3G,YAAY,gBAAgB;gBAC1B,IAAI,eAAe;gBACnB,IAAI,YAAY;gBAEhB,kBAAkB;gBAClB,KAAK,MAAM,WAAW,iBAAkB;oBACtC,IAAI;wBACF,MAAM,IAAI,QAAc,CAAC,SAAS;4BAChC,YAAY;gCAAE,UAAU,OAAO;gCAAU,YAAY,eAAe,SAAS;4BAAA,GAAG;gCAC9E,WAAW;oCACT;oCACA;gCACF;gCACA,SAAS,CAAC;oCACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;wCACxC,cAAc;4CACZ,GAAG,YAAY;4CACf,QAAQ;4CACR,SAAS;4CACT,WAAW;4CACX,UAAU,KAAO;wCACnB;wCACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;wCACf,WAAW;4CACT,OAAO,IAAI,CAAC;wCACd,GAAG;oCACL,OAAO;wCACH;wCACA,UAAU,CAAC,MAAM,EAAE,QAAQ,QAAQ,EAAE,OAAO;wCAC5C,OAAO;oCACX;gCACF;4BACF;wBACF;oBACF,EAAE,OAAO,OAAO;wBACd,UAAU,CAAC,MAAM,EAAE,QAAQ,WAAW,EAAE,OAAO;oBACjD;gBACF;gBAEA,iBAAiB;gBACjB,IAAI,cAAc,GAAG;oBACnB,UAAU,GAAG,aAAa,oBAAoB,CAAC;gBACjD,OAAO;oBACL,UAAU,GAAG,aAAa,SAAS,EAAE,UAAU,aAAa,CAAC;gBAC/D;gBAEA,cAAc;gBACd,eAAe;oBAAE,iBAAiB,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,SAAS;gBAAE;gBAE1E,cAAc;gBACd,qBAAqB,IAAI;gBAEzB,8BAA8B;gBAC9B,IAAI,iBAAiB,iBAAiB,QAAQ,CAAC,cAAc,OAAO,GAAG;oBACrE,iBAAiB;oBACjB,kBAAkB;wBAChB,UAAU;wBACV,WAAW;wBACX,aAAa;oBACf;oBACA,qBAAqB,EAAE;oBACvB,kBAAkB,EAAE;oBACpB,wBAAwB,IAAI;oBAC5B,qBAAqB,IAAI;gBAC3B;YACF;QACF,OAEK,IAAI,eAAe;YACtB,IAAI,cAAc,aAAa,GAAG,KAAK,cAAc,UAAU,GAAG,GAAG;gBACnE,UAAU;gBACV;YACF;YAEA,YAAY,6EAA6E;gBACvF,YAAY;oBAAE,UAAU,OAAO,cAAc,OAAO;oBAAG,YAAY,eAAe,SAAS;gBAAA,GAAG;oBAC5F,WAAW;wBACT,cAAc;wBACd,eAAe;4BAAE,iBAAiB,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,SAAS;wBAAE;wBAE1E,YAAY;wBACZ,iBAAiB;wBACjB,kBAAkB;4BAChB,UAAU;4BACV,WAAW;4BACX,aAAa;wBACf;wBAEA,aAAa;wBACb,qBAAqB,EAAE;wBACvB,kBAAkB,EAAE;wBACpB,wBAAwB,IAAI;wBAC5B,qBAAqB,IAAI;wBAEzB,UAAU;oBACZ;oBACA,SAAS,CAAC;wBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;4BACxC,cAAc;gCACZ,GAAG,YAAY;gCACf,QAAQ;gCACR,SAAS;gCACT,WAAW;gCACX,UAAU,KAAO;4BACnB;4BACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;4BACf,WAAW;gCACT,OAAO,IAAI,CAAC;4BACd,GAAG;wBACL,OAAO;4BACH,UAAU,CAAC,OAAO,EAAE,MAAM,OAAO,EAAE;wBACvC;oBACF;gBACF;YACF;QACF,OACK;YACH,UAAU;QACZ;IACF;IAEA,MAAM,oBAAoB,CAAC,OAAoC;QAC7D,kBAAkB,CAAA,OAAQ,CAAC;gBACzB,GAAG,IAAI;gBACP,CAAC,MAAM,EAAE;YACX,CAAC;IACH;IAEA,MAAM,qBAAqB,CAAC;QAC1B,MAAM,WAAW,SAAS,OAAO;QACjC,kBAAkB,CAAA,OAAQ,CAAC;gBACzB,GAAG,IAAI;gBACP;YACF,CAAC;IACH;IAEA,MAAM,YAAY,CAAC;QACjB,cAAc;YACZ,QAAQ;YACR;YACA,OAAO;YACP,MAAM;YACN,WAAW;YACX,UAAU,KAAO;QACnB;IACF;IAEA,MAAM,cAAc,CAAC,SAAiB;QACpC,cAAc;YACZ,QAAQ;YACR;YACA,OAAO;YACP,MAAM;YACN,WAAW;gBACT;gBACA;YACF;YACA,UAAU;QACZ;IACF;IAEA,MAAM,aAAa;QACjB,cAAc,CAAA,OAAQ,CAAC;gBAAE,GAAG,IAAI;gBAAE,QAAQ;YAAM,CAAC;IACnD;IAEA,YAAY;IACZ,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAO;IACtD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAO;IAEhD,YAAY;IACZ,MAAM,EAAE,QAAQ,kBAAkB,EAAE,MAAM,aAAa,EAAE,GAAG,CAAA,GAAA,oKAAA,CAAA,yBAAsB,AAAD,EAAE;QACjF,OAAO;gDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;gEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;4DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;2DAAG;gBACL,OAAO;oBACL,UAAU,CAAC,eAAe,EAAE,MAAM,OAAO,EAAE;gBAC7C;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,cAAc,EAAE,MAAM,SAAS,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,qBAAkB,AAAD,EAAE;QACrE,OAAO;4CAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;4DAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;wDAAW;4BACT,OAAO,IAAI,CAAC;wBACd;uDAAG;gBACL,OAAO;oBACL,UAAU,CAAC,cAAc,EAAE,MAAM,OAAO,EAAE;gBAC5C;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,sBAAsB,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,6BAA0B,AAAD,EAAE;QACpE,SAAS;oDAAE,CAAC;gBACV,gBAAgB;YAClB;;QACA,OAAO;oDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;oEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;gEAAW;4BACT,OAAO,IAAI,CAAC;wBACd;+DAAG;gBACL;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,mBAAmB,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,0BAAuB,AAAD,EAAE;QAC9D,SAAS;iDAAE,CAAC;gBACV,aAAa;YACf;;QACA,OAAO;iDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;iEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;6DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;4DAAG;gBACL;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,iBAAiB,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,wBAAqB,AAAD,EAAE;QAC1D,SAAS;+CAAE,CAAC;gBACV,MAAM,YAAY,KAAK,WAAW,CAAC,GAAG;iEAAC,CAAC,WAAkB,CAAC;4BACzD,SAAS;4BACT,YAAY,OAAO,SAAS,WAAW;4BACvC,cAAc,SAAS,aAAa;4BACpC,MAAM,gBAAgB,SAAS,SAAS;wBAC1C,CAAC;;gBACD,gBAAgB;YAClB;;QACA,OAAO;+CAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;+DAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;2DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;0DAAG;gBACL;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,wBAAwB,EAAE,GAAG,CAAA,GAAA,oKAAA,CAAA,+BAA4B,AAAD,EAAE;QACxE,SAAS;sDAAE,CAAC;gBACV,IAAI,KAAK,0BAA0B,EAAE;oBACnC,MAAM,eAA2B,KAAK,0BAA0B,CAAC,GAAG;+EAAC,CAAA,YAAa,CAAC;gCACjF,SAAS,eAAe,WAAW;gCACnC,QAAQ,UAAU,iBAAiB;gCACnC,UAAU,UAAU,mBAAmB;gCACvC,SAAS,UAAU,WAAW;gCAC9B,SAAS,UAAU,gBAAgB;gCACnC,WAAW,UAAU,aAAa;gCAClC,aAAa,iBAAiB,UAAU,SAAS;4BACnD,CAAC;;oBACD,2BAA2B;oBAC3B,kBAAkB,aAAa,IAAI;kEAAC,CAAC,GAAE,IAAK,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,MAAM;;gBAChF;YACF;;QACA,OAAO;sDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;sEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;kEAAW;4BACT,OAAO,IAAI,CAAC;wBACd;iEAAG;gBACL;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,WAAW,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAAoB,AAAD,EAAE;QACnD,SAAS;8CAAE;gBACT,UAAU;YACZ;;QACA,OAAO;8CAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;8DAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;0DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;yDAAG;gBACL,OAAO;oBACL,UAAU,CAAC,UAAU,EAAE,MAAM,OAAO,EAAE;gBACxC;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,WAAW,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAAoB,AAAD,EAAE;QACnD,SAAS;8CAAE;gBACT,UAAU;YACZ;;QACA,OAAO;8CAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;8DAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;0DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;yDAAG;gBACL,OAAO;oBACL,UAAU,CAAC,UAAU,EAAE,MAAM,OAAO,EAAE;gBACxC;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,WAAW,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAAoB,AAAD,EAAE;QACnD,SAAS;8CAAE;YACT,mCAAmC;YACrC;;QACA,OAAO;8CAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;8DAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;0DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;yDAAG;gBACL,OAAO;oBACL,UAAU,CAAC,UAAU,EAAE,MAAM,OAAO,EAAE;gBACxC;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,gBAAgB,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,4BAAyB,AAAD,EAAE;QAC7D,SAAS;mDAAE;gBACT,gBAAgB;gBAChB,UAAU;YACZ;;QACA,OAAO;mDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;mEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;+DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;8DAAG;gBACL,OAAO;oBACL,UAAU,CAAC,cAAc,EAAE,MAAM,OAAO,EAAE;gBAC5C;YACF;;IACF;IAEA,WAAW;IACX,MAAM,EAAE,QAAQ,iBAAiB,EAAE,GAAG,CAAA,GAAA,wKAAA,CAAA,yBAAsB,AAAD,EAAE;QAC3D,OAAO;gDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;gEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;4DAAW;4BACT,OAAO,IAAI,CAAC;wBACd;2DAAG;gBACL,OAAO;oBACL,UAAU,CAAC,cAAc,EAAE,MAAM,OAAO,EAAE;gBAC5C;YACF;;IACF;IAEA,MAAM,EAAE,QAAQ,mBAAmB,EAAE,GAAG,CAAA,GAAA,8KAAA,CAAA,+BAA4B,AAAD,EAAE;QACrE,SAAS;sDAAE;gBACT,UAAU;YACZ;;QACA,OAAO;sDAAE,CAAC;gBACR,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK;oBACxC,cAAc;wBACZ,GAAG,YAAY;wBACf,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;sEAAE,KAAO;;oBACnB;oBACA,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;oBACf;kEAAW;4BACT,OAAO,IAAI,CAAC;wBACd;iEAAG;gBACL,OAAO;oBACL,UAAU,CAAC,cAAc,EAAE,MAAM,OAAO,EAAE;gBAC5C;YACF;;IACA;IAEA,wBAAwB;IACxB,MAAM,8BAA8B;QAClC,IAAI,CAAC,eAAe,oBAAoB,CAAC,eAAe,OAAO;QAE/D,4BAA4B;QAC5B,KAAK,MAAM,OAAO,cAAc,gBAAgB,CAAE;YAChD,MAAM,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,OAAO,eAAe,QAAQ;YACrF,IAAI,QAAQ;gBACV,OAAO,IAAI,UAAU;YACvB;QACF;QACA,OAAO;IACT;IAEA,MAAM,kBAAkB;QACtB,6BAA6B;QAC7B,OAAO,CAAC,iBAAiB,CAAC;IAC5B;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,IAAI,gBAAgB,eAAe;gBAEjC,gBAAgB;gBAChB,IAAI,cAAqB,EAAE;gBAE3B,IAAI,aAAa,WAAW,IAAI,MAAM,OAAO,CAAC,aAAa,WAAW,GAAG;oBACvE,MAAM,qBAAqB,aAAa,WAAW,CAAC,IAAI;kEACtD,CAAC,QAAe,OAAO,MAAM,QAAQ,MAAM,cAAc,OAAO;;oBAGlE,IAAI,sBAAsB,MAAM,OAAO,CAAC,mBAAmB,WAAW,GAAG;wBACvE,cAAc,mBAAmB,WAAW;oBAC9C;gBACF;gBAEA,6BAA6B;gBAC7B,MAAM,mBAAmB,aAAa,MAAM;4DAAC,CAAA;wBAC3C,MAAM,gBAAgB,OAAO,SAAS,UAAU;wBAChD,OAAO,YAAY,IAAI;oEAAC,CAAA,KAAM,OAAO,SAAS,UAAU,IAAI,OAAO;;oBACrE;;gBAEA,qBAAqB;YACvB;QACF;8BAAG;QAAC;QAAc;QAAe;KAAa;IAE9C,wDAAwD;IACxD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,IAAI,iBAAiB,KAAK,MAAM,GAAG,GAAG;gBACpC,MAAM,eAAe,KAAK,IAAI;wDAAC,CAAA,MAAO,IAAI,OAAO,KAAK,cAAc,OAAO;;gBAC3E,IAAI,cAAc;oBAChB,sCAAsC;oBACtC,IAAI,aAAa,MAAM,KAAK,cAAc,MAAM,IAC5C,aAAa,MAAM,KAAK,cAAc,MAAM,IAC5C,aAAa,SAAS,KAAK,cAAc,SAAS,IAClD,aAAa,WAAW,KAAK,cAAc,WAAW,EAAE;wBAC1D,iBAAiB;wBACjB,kBAAkB;4BAChB,UAAU,aAAa,QAAQ;4BAC/B,WAAW,aAAa,SAAS;4BACjC,aAAa,aAAa,WAAW;wBACvC;oBACF;gBACF;YACF;QACF;8BAAG;QAAC;QAAM;KAAc;IAIxB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,mBAAmB;gBAAE,UAAU;gBAAW,QAAQ;YAAQ;YAC1D,eAAe;gBAAE,iBAAiB,QAAQ,GAAG;2CAAC,CAAA,SAAU,OAAO,SAAS;;YAAE;YAC1E;YACA;YACA;YACA,kBAAkB;gBAChB,aAAa;gBACb,WAAW;YACb;QACF;8BAAG;QAAC;QAAW;QAAS;QAAS;QAAoB;QAAgB;QAAwB;QAAqB;QAAmB;KAAkB;IAEvJ,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,IACE,eAAe,oBACf,WAAW,aACX;gBACA,MAAM,YAAgF,CAAC;gBACvF,cAAc,gBAAgB,CAAC,OAAO;2CAAC,CAAA;wBACrC,MAAM,aAAa,IAAI,UAAU;wBACjC,IAAI,UAAU,CAAC,OAAO;mDAAC,CAAA;gCACrB,SAAS,CAAC,OAAO,QAAQ,CAAC,GAAG;oCAC3B;oCACA,YAAY,OAAO,UAAU;gCAC/B;4BACF;;oBACF;;gBAEA,MAAM,qBAAqB,AAAC,cAAc,eAAgB,EAAE;gBAC5D,MAAM,kBAAkB,AAAC,WAAW,eAAgB,EAAE;gBAEtD,MAAM,YAAwB,UAAU,WAAW,CAAC,GAAG;qDAAC,CAAA;wBACtD,MAAM,aAAa,SAAS,CAAC,OAAO,MAAM,SAAS,EAAE,IAAI;4BAAE,YAAY;4BAAI,YAAY;wBAAG;wBAC1F,MAAM,gBAAgB,mBAAmB,IAAI;2EAAC,CAAC,OAAc,OAAO,KAAK,QAAQ,MAAM,OAAO,MAAM,QAAQ;;wBAC5G,MAAM,aAAa,gBAAgB,IAAI;wEAAC,CAAC,OAAc,OAAO,KAAK,QAAQ,MAAM,OAAO,MAAM,QAAQ;;wBAEtG,OAAO;4BACL,QAAQ,WAAW,UAAU;4BAC7B,QAAQ,WAAW,UAAU;4BAC7B,UAAU,MAAM,SAAS;4BACzB,SAAS,OAAO,MAAM,QAAQ;4BAC9B,WAAW,MAAM,UAAU;4BAC3B,aAAa,MAAM,iBAAiB;4BACpC,eAAe,gBAAgB,cAAc,WAAW,CAAC,MAAM,GAAG;4BAClE,YAAY,aAAa,WAAW,QAAQ,CAAC,MAAM,GAAG;wBACxD;oBACF;;gBACA,QAAQ;YACV;QACF;8BAAG;QAAC;QAAe;QAAW;QAAc;KAAU;IAEtD,iBAAiB;IACjB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,MAAM;qDAAgB,CAAC;oBACrB,IAAI,WAAW,MAAM,EAAE;wBACrB,oBAAoB;wBACpB,IAAI,MAAM,GAAG,KAAK,SAAS;4BACzB,MAAM,cAAc;4BACpB,WAAW,SAAS;4BACpB;wBACF;wBAEA,oCAAoC;wBACpC,IAAI,MAAM,GAAG,KAAK,YAAY,WAAW,IAAI,KAAK,KAAK;4BACrD,MAAM,cAAc;4BACpB,WAAW,QAAQ;4BACnB;wBACF;wBAEA,gCAAgC;wBAChC;oBACF;oBAEA,eAAe;oBACf,IAAI,MAAM,OAAO,IAAI,MAAM,GAAG,KAAK,KAAK;wBACtC,MAAM,cAAc;wBACpB;oBACF;oBAEA,yBAAyB;oBACzB,IAAI,AAAC,MAAM,OAAO,IAAI,MAAM,GAAG,KAAK,OAAQ,MAAM,GAAG,KAAK,UAAU;wBAClE,MAAM,cAAc;wBACpB;oBACF;oBAEA,aAAa;oBACb,IAAI,MAAM,GAAG,KAAK,eAAe,CAAC,MAAM,OAAO,IAAI,CAAC,MAAM,QAAQ,IAAI,CAAC,MAAM,MAAM,EAAE;wBACnF,kCAAkC;wBAClC,IACE,SAAS,aAAa,EAAE,YAAY,WACpC,SAAS,aAAa,EAAE,YAAY,YACpC,SAAS,aAAa,EAAE,YAAY,YACpC;4BACA,wBAAwB;4BACxB,MAAM,cAAc;4BACpB,MAAM,eAAe;4BACrB;wBACF;oBACF;gBACF;;YAEA,wCAAwC;YACxC,OAAO,gBAAgB,CAAC,WAAW,eAAe;YAElD,yBAAyB;YACzB;uCAAO;oBACL,OAAO,mBAAmB,CAAC,WAAW,eAAe;gBACvD;;QACF;8BAAG;QAAC;QAAY;QAAc;QAAW;KAAW;IAEpD,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CAEb,6LAAC;;kDACC,6LAAC,qJAAA,CAAA,UAAS;wCAAC,OAAM;wCAAQ,YAAY,KAAK,MAAM;;;;;;kDAChD,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC,yJAAA,CAAA,UAAQ;4CACP,SAAS;4CACT,MAAM;4CACN,WAAU;4CACV,iCAAiC;4CACjC,aAAa,CAAC;gDACZ,sCAAsC;gDACtC,IAAI,MAAM,MAAM,CAAC,GAAG,KAAK,yJAAA,CAAA,eAAY,CAAC,GAAG,EAAE;oDACzC,iBAAiB;gDACnB;4CACF;4CACA,cAAc,CAAC,MAAQ,IAAI,OAAO;4CAClC,8FAA8F;4CAC9F,cAAc;4CACd,sBAAsB;4CACtB,WAAW;4CACX,iBAAiB;4CACjB,UAAU;4CACV,sBAAsB;;;;;;;;;;;;;;;;;0CAM5B,6LAAC;;kDACC,6LAAC,qJAAA,CAAA,UAAS;wCACR,OAAM;wCACN,YAAY,kBAAkB,MAAM;wCACpC,SAAS;4CACP;gDACE,OAAO;gDACP,SAAS;4CACX;yCACD;;;;;;kDAEH,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC,yJAAA,CAAA,UAAQ;4CACP,SAAS;4CACT,MAAM;4CACN,WAAU;4CACV,cAAc,CAAC,MAAQ,IAAI,UAAU;4CACrC,cAAc;4CACd,sBAAsB;4CACtB,WAAW;4CACX,iBAAiB;4CACjB,sBAAsB;;;;;;;;;;;;;;;;;0CAM5B,6LAAC;;kDACC,6LAAC,qJAAA,CAAA,UAAS;wCACR,OAAM;wCACN,YAAY,eAAe,MAAM;wCACjC,SAAS;4CACP;gDACE,OAAO;gDACP,SAAS;4CACX;yCACD;;;;;;kDAEH,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC,yJAAA,CAAA,UAAQ;4CACP,SAAS;4CACT,MAAM;4CACN,WAAU;4CACV,cAAc,CAAC,MAAQ,IAAI,OAAO;4CAClC,cAAc;4CACd,sBAAsB;4CACtB,WAAW;4CACX,iBAAiB;4CACjB,sBAAsB;;;;;;;;;;;;;;;;;;;;;;;kCAO9B,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,oIAAA,CAAA,QAAK;gDAAC,WAAU;0DAAwB;;;;;;0DACzC,6LAAC,uJAAA,CAAA,cAAW;gDACV,OAAO,YAAY,gCAAgC,eAAe,UAAU;gDAC5E,WAAU;gDACV,QAAQ;;;;;;;;;;;;kDAGZ,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,oIAAA,CAAA,QAAK;gDAAC,WAAU;0DAAwB;;;;;;4CACxC,0BACC,6LAAC,qIAAA,CAAA,SAAM;gDACL,OAAO,eAAe,QAAQ,GAAG,OAAO,eAAe,QAAQ,IAAI;gDACnE,eAAe;;kEAEf,6LAAC,qIAAA,CAAA,gBAAa;wDAAC,WAAU;kEACvB,cAAA,6LAAC,qIAAA,CAAA,cAAW;4DAAC,aAAY;;;;;;;;;;;kEAE3B,6LAAC,qIAAA,CAAA,gBAAa;kEACX,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC,qIAAA,CAAA,aAAU;gEAAwB,OAAO,OAAO,OAAO,SAAS;0EAC9D,OAAO,WAAW;+DADJ,OAAO,SAAS;;;;;;;;;;;;;;;qEAOvC,6LAAC,uJAAA,CAAA,cAAW;gDACV,OAAO,eAAe,UAAU;gDAChC,WAAU;gDACV,QAAQ;;;;;;;;;;;;kDAId,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,oIAAA,CAAA,QAAK;gDAAC,WAAU;0DAAwB;;;;;;0DACzC,6LAAC,uJAAA,CAAA,cAAW;gDACV,OAAO,eAAe,WAAW;gDACjC,WAAU;gDACV,QAAQ;;;;;;;;;;;;kDAGZ,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,oIAAA,CAAA,QAAK;gDAAC,WAAU;0DAAwB;;;;;;0DACzC,6LAAC,uJAAA,CAAA,cAAW;gDACV,OAAO,eAAe,SAAS;gDAC/B,UAAU,CAAC,IAAM,kBAAkB,aAAa,EAAE,MAAM,CAAC,KAAK;gDAC9D,WAAU;gDACV,UAAU;;;;;;;;;;;;kDAGd,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,oIAAA,CAAA,QAAK;gDAAC,WAAU;0DAAwB;;;;;;0DACzC,6LAAC,uJAAA,CAAA,cAAW;gDACV,OAAO,eAAe,WAAW;gDACjC,UAAU,CAAC,IAAM,kBAAkB,eAAe,EAAE,MAAM,CAAC,KAAK;gDAChE,WAAU;gDACV,UAAU;;;;;;;;;;;;;;;;;;0CAIhB,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,wJAAA,CAAA,eAAY;wCAAC,SAAS;kDAAc;;;;;;kDACrC,6LAAC,wJAAA,CAAA,eAAY;wCAAC,SAAS;kDAAW;;;;;;kDAClC,6LAAC,wJAAA,CAAA,eAAY;wCAAC,SAAS;kDAAY;;;;;;;;;;;;0CAErC,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAG,WAAU;;sDACZ,6LAAC;sDAAG;;;;;;sDACJ,6LAAC;sDAAG;;;;;;sDACJ,6LAAC;;gDAAG;8DACI,6LAAC;;;;;gDAAI;8DACE,6LAAC;;;;;gDAAI;8DACA,6LAAC;;;;;gDAAI;;;;;;;sDAIzB,6LAAC;;gDAAG;8DAAK,6LAAC;;;;;gDAAI;8DAAY,6LAAC;;;;;gDAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAKvC,6LAAC,wJAAA,CAAA,UAAW;gBACV,QAAQ,WAAW,MAAM;gBACzB,SAAS,WAAW,OAAO;gBAC3B,OAAO,WAAW,KAAK;gBACvB,MAAM,WAAW,IAAI;gBACrB,SAAS,WAAW,SAAS;gBAC7B,UAAU,WAAW,QAAQ;;;;;;;;;;;;AAIrC;GAnvCM;;QAC2B,4HAAA,CAAA,eAAY;QACZ,4HAAA,CAAA,eAAY;QAW5B,qIAAA,CAAA,YAAS;QAwmBoC,oKAAA,CAAA,yBAAsB;QAoB9B,4JAAA,CAAA,qBAAkB;QAoB3B,4JAAA,CAAA,6BAA0B;QAqB7B,4JAAA,CAAA,0BAAuB;QAqBzB,4JAAA,CAAA,wBAAqB;QA2Bd,oKAAA,CAAA,+BAA4B;QAiCzC,4JAAA,CAAA,uBAAoB;QAuBpB,4JAAA,CAAA,uBAAoB;QAuBpB,4JAAA,CAAA,uBAAoB;QAuBf,4JAAA,CAAA,4BAAyB;QAyBxB,wKAAA,CAAA,yBAAsB;QAoBpB,8KAAA,CAAA,+BAA4B;;;KAr3BhE;uCAqvCS"}},
    {"offset": {"line": 7087, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7093, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/SuspendView/index.tsx"],"sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from 'react';\r\nimport DataGrid from \"react-data-grid\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/shared/CustomSelect\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { useApiForDeleteSuspendedCampaign, useApiForDeleteSuspendedSkill, useApiForSuspendedCampaignList, useApiForSuspendedSkillList } from '@/features/preferences/hooks/useApiForSuspendView';\r\nimport { useRouter } from 'next/navigation';\r\nimport Cookies from 'js-cookie';\r\nimport CustomAlert from '@/components/shared/layout/CustomAlert';\r\nimport { useApiForSkillList } from '@/features/preferences/hooks/useApiForSkill';\r\nimport { useMainStore } from '@/store';\r\n\r\ntype ViewMode = 'campaign' | 'skill';\r\n\r\ninterface BaseRow {\r\n  id: string;\r\n  release_time: string;\r\n}\r\n\r\ninterface CampaignRow extends BaseRow {\r\n  type: 'campaign';\r\n  campaign_id: string;\r\n  campaign_name: string;\r\n}\r\n\r\ninterface SkillRow extends BaseRow {\r\n  type: 'skill';\r\n  skill_id: string;\r\n  skill_name: string;\r\n}\r\n\r\ntype GridRow = CampaignRow | SkillRow;\r\n\r\nconst errorMessage = {\r\n  isOpen: false,\r\n  message: '',\r\n  title: '로그인',\r\n  type: '2',\r\n};\r\n\r\nconst SuspendView = () => {\r\n  const router = useRouter();\r\n  const { tenants, campaigns } = useMainStore();\r\n  const [viewMode, setViewMode] = useState<ViewMode>('campaign');\r\n  const [suspendedCampaigns, setSuspendedCampaigns] = useState<any[]>([]);\r\n  const [suspendedSkills, setSuspendedSkills] = useState<any[]>([]);\r\n  const [skillMasterList, setSkillMasterList] = useState<any[]>([]);\r\n  const [isSkillDataLoaded, setIsSkillDataLoaded] = useState(false);\r\n  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set());\r\n\r\n  const [alertState, setAlertState] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    title: '알림',\r\n    type: '1',\r\n    onConfirm: () => {},\r\n    onCancel: () => {}\r\n  });\r\n\r\n  const showAlert = (message: string) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '알림',\r\n      type: '2',\r\n      onConfirm: closeAlert,\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  const showConfirm = (message: string, onConfirm: () => void) => {\r\n    setAlertState({\r\n      isOpen: true,\r\n      message,\r\n      title: '확인',\r\n      type: '1',\r\n      onConfirm: () => {\r\n        onConfirm();\r\n        closeAlert();\r\n      },\r\n      onCancel: closeAlert\r\n    });\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlertState(prev => ({ ...prev, isOpen: false }));\r\n  };\r\n\r\n  // 서스팬드 캠페인 조회\r\n  const { mutate: fetchSuspendedCampaignList } = useApiForSuspendedCampaignList({\r\n    onSuccess: (data) => {\r\n      setSuspendedCampaigns(data.result_data || []);\r\n      setSelectedRows(new Set());\r\n    },\r\n    onError: (data) => {      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`캠페인 리스트 조회 실패: ${data.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 서스팬드 캠페인 삭제\r\n  const { mutate: deleteSuspendedCampaign } = useApiForDeleteSuspendedCampaign({\r\n    onSuccess: (data) => {\r\n      showAlert('삭제가 완료되었습니다.');\r\n      fetchSuspendedCampaignList();\r\n    },\r\n    onError: (data) => {      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`삭제 실패: ${data.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 서스팬드 스킬 조회\r\n  const { mutate: fetchSuspendedSkillList } = useApiForSuspendedSkillList({\r\n    onSuccess: (data) => {\r\n      setSuspendedSkills(data.result_data || []);\r\n      setSelectedRows(new Set());\r\n    },\r\n    onError: (data) => {      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`스킬 리스트 조회 실패: ${data.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 서스팬드 스킬 삭제\r\n  const { mutate: deleteSuspendedSkill } = useApiForDeleteSuspendedSkill({\r\n    onSuccess: (data) => {\r\n      showAlert('삭제가 완료되었습니다.');\r\n      fetchSuspendedSkillList();\r\n    },\r\n    onError: (data) => {      \r\n      if (data.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`삭제 실패: ${data.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 스킬 마스터 리스트 조회\r\n  const { mutate: fetchSkillList } = useApiForSkillList({\r\n    onSuccess: (data) => {\r\n      setSkillMasterList(data.result_data || []);\r\n      setIsSkillDataLoaded(true);\r\n    },\r\n    onError: (error) => {\r\n      if (error.message.split('||')[0] === '5') {\r\n        setAlertState({\r\n          ...errorMessage,\r\n          isOpen: true,\r\n          message: 'API 연결 세션이 만료되었습니다. 로그인을 다시 하셔야합니다.',\r\n          onConfirm: closeAlert,\r\n          onCancel: () => {}\r\n        });\r\n        Cookies.remove('session_key');\r\n        setTimeout(() => {\r\n          router.push('/login');\r\n        }, 1000);\r\n      } else {\r\n        showAlert(`스킬 리스트 조회 실패: ${error.message}`);\r\n      }\r\n    }\r\n  });\r\n\r\n  // 초기 렌더링 시 캠페인 모드에 필요한 API만 호출\r\n  useEffect(() => {\r\n    fetchSuspendedCampaignList();\r\n  }, []);\r\n\r\n  // viewMode가 변경될 때 필요한 API 호출\r\n  useEffect(() => {\r\n    if (viewMode === 'campaign') {\r\n      fetchSuspendedCampaignList();\r\n    } else if (viewMode === 'skill') {\r\n      fetchSuspendedSkillList();\r\n      \r\n      if (!isSkillDataLoaded) {\r\n        fetchSkillList({ tenant_id_array: tenants.map(tenant => tenant.tenant_id) ? [] : undefined });\r\n      }\r\n    }\r\n  }, [viewMode]);\r\n\r\n  // DELETE 키 이벤트 핸들러\r\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\r\n    if (event.key === 'Delete' && selectedRows.size > 0) {\r\n      event.preventDefault();\r\n      handleDeleteSelected();\r\n    }\r\n  }, [selectedRows, viewMode]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [handleKeyDown]);\r\n\r\n  const handleViewModeChange = (value: string) => {\r\n    setViewMode(value as ViewMode);\r\n    setSelectedRows(new Set());\r\n  };\r\n\r\n  const handleDeleteSelected = () => {\r\n    if (selectedRows.size === 0) return;\r\n    \r\n    if (viewMode === 'campaign') {\r\n      const selectedCampaignIds = Array.from(selectedRows).map(id => {\r\n        // 캠페인 ID 추출\r\n        const row = rows.find(r => r.id === id);\r\n        return row?.type === 'campaign' ? parseInt(row.campaign_id) : null;\r\n      }).filter(id => id !== null) as number[];\r\n      \r\n      if (selectedCampaignIds.length === 0) return;\r\n      \r\n      showConfirm(`선택한 ${selectedCampaignIds.length}개의 캠페인을 삭제하시겠습니까?`, () => {\r\n        selectedCampaignIds.forEach(id => {\r\n          deleteSuspendedCampaign(id);\r\n        });\r\n      });\r\n    } else if (viewMode === 'skill') {\r\n      const selectedSkillIds = Array.from(selectedRows).map(id => {\r\n        // 스킬 ID 추출\r\n        const row = rows.find(r => r.id === id);\r\n        return row?.type === 'skill' ? parseInt(row.skill_id) : null;\r\n      }).filter(id => id !== null) as number[];\r\n      \r\n      if (selectedSkillIds.length === 0) return;\r\n      \r\n      showConfirm(`선택한 ${selectedSkillIds.length}개의 스킬을 삭제하시겠습니까?`, () => {\r\n        selectedSkillIds.forEach(id => {\r\n          deleteSuspendedSkill(id);\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const columns = useMemo(() => {\r\n    return viewMode === 'campaign'\r\n      ? [\r\n          { key: 'campaign_id', name: '캠페인 아이디' },\r\n          { key: 'campaign_name', name: '캠페인 이름' },\r\n          { key: 'release_time', name: '해제시간' }\r\n        ]\r\n      : [\r\n          { key: 'skill_id', name: '스킬 아이디' },\r\n          { key: 'skill_name', name: '스킬 이름' },\r\n          { key: 'release_time', name: '해제시간' }\r\n        ];\r\n  }, [viewMode]);\r\n\r\n  const rows = useMemo<GridRow[]>(() => {\r\n    if (viewMode === 'campaign') {\r\n      return suspendedCampaigns.map(item => {\r\n        const campaignInfo = campaigns.find(\r\n          campaign => campaign.campaign_id === Number(item.campaign_id)\r\n        );\r\n        \r\n        return {\r\n          type: 'campaign',\r\n          id: `campaign-${item.campaign_id}`,\r\n          campaign_id: String(item.campaign_id),\r\n          campaign_name: campaignInfo ? campaignInfo.campaign_name : '',\r\n          release_time: item.suspend_time\r\n        };\r\n      });\r\n    } else {\r\n      return suspendedSkills.map(item => {\r\n        const skillInfo = skillMasterList.find(\r\n          skill => skill.skill_id === Number(item.skill_id)\r\n        );\r\n        \r\n        return {\r\n          type: 'skill',\r\n          id: `skill-${item.skill_id}`,\r\n          skill_id: String(item.skill_id),\r\n          skill_name: skillInfo ? skillInfo.skill_name : '',\r\n          release_time: item.suspend_time\r\n        };\r\n      });\r\n    }\r\n  }, [viewMode, suspendedCampaigns, suspendedSkills, campaigns, skillMasterList]);\r\n\r\n  const rowKeyGetter = (row: GridRow) => row.id;\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center space-x-4\">\r\n        <Label className=\"w-[8.5rem] min-w-[8.5rem]\">Suspend View Mode</Label>\r\n        <Select \r\n          value={viewMode} \r\n          onValueChange={handleViewModeChange}\r\n        >\r\n          <SelectTrigger className=\"w-32\">\r\n            <SelectValue placeholder=\"View Mode\" />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"campaign\">캠페인</SelectItem>\r\n            <SelectItem value=\"skill\">스킬</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      <div className=\"w-[580px]\">\r\n        <div className=\"grid-custom-wrap h-[230px]\">\r\n          <DataGrid\r\n            columns={columns}\r\n            rows={rows}\r\n            className=\"grid-custom\"\r\n            rowHeight={30}\r\n            headerRowHeight={30}\r\n            rowKeyGetter={rowKeyGetter}\r\n            selectedRows={selectedRows}\r\n            onSelectedRowsChange={setSelectedRows}\r\n            onRowsChange={() => {}}\r\n          />\r\n        </div>\r\n        {selectedRows.size > 0 && (\r\n          <div className=\"mt-2 text-sm text-gray-600\">\r\n            {selectedRows.size}개의 {viewMode === 'campaign' ? '캠페인' : '스킬'}이 선택됨. 삭제하려면 DELETE 키를 누르세요.\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <CustomAlert\r\n        isOpen={alertState.isOpen}\r\n        message={alertState.message}\r\n        title={alertState.title}\r\n        type={alertState.type}\r\n        onClose={alertState.onConfirm}\r\n        onCancle={alertState.onCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuspendView;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 7640, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7646, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Temp/work/fe_pdsw/src/app/main/comp/operation/index.tsx"],"sourcesContent":["'use client'\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport CampaignLayout from './CampaignNumberChange/CampaignLayout'\r\nimport EditDescription from './NumberEditDescription/EditDescription'\r\nimport CallLimitSetting from './CallLimitSetting'\r\nimport DistributionLimit from './DistributionLimit'\r\nimport SkillEdit from './SkillEdit'\r\n// import ConsultResultSetting from './ConsultResultSetting'\r\nimport SuspendView from './SuspendView'\r\nimport Image from 'next/image'\r\nimport { useTabStore } from '@/store'\r\n\r\nexport default function OperationBoard() {\r\n  const [openSectionId, setOpenSectionId] = useState<string>('section1')\r\n  const { activeTabId } = useTabStore()\r\n\r\n  useEffect(() => {\r\n    if (activeTabId === 8) {\r\n      setOpenSectionId('section3')\r\n    } else if (activeTabId === 9) {\r\n      setOpenSectionId('section4')\r\n    }\r\n  }, [activeTabId])\r\n\r\n  const toggleSection = (sectionId: string) => {\r\n    setOpenSectionId(openSectionId === sectionId ? '' : sectionId)\r\n  }\r\n\r\n  // 섹션 데이터를 배열로 정의\r\n  const sections = [\r\n    { id: 'section1', title: '캠페인별 발신번호 변경', component: CampaignLayout },\r\n    { id: 'section2', title: '전화번호별 설명 편집', component: EditDescription },\r\n    { id: 'section3', title: '예약콜 제한 설정', component: CallLimitSetting },\r\n    { id: 'section4', title: '분배호수 제한 설정', component: DistributionLimit },\r\n    { id: 'section5', title: '스킬편집', component: SkillEdit },\r\n    // { id: 'section6', title: '상담 결과코드 설정', component: ConsultResultSetting },\r\n    { id: 'section7', title: '서스팬드', component: SuspendView },\r\n  ]\r\n\r\n  return (\r\n    <div className=\"divide-y accordion-wrap limit-width\">\r\n      {sections.map((section) => (\r\n        <div key={section.id} className=\"accordion\">\r\n          <h2>\r\n            <button\r\n              type=\"button\"\r\n              className={`accordion-btn\r\n                ${openSectionId !== section.id ? 'border-b-0' : ''} \r\n                gap-[15px]`}\r\n              onClick={() => toggleSection(section.id)}\r\n              aria-expanded={openSectionId === section.id}\r\n            >\r\n              <div className={`transform transition-transform duration-200 ${openSectionId === section.id ? 'rotate-180' : ''}`}>\r\n                <Image \r\n                  src=\"/chevron-down.svg\"\r\n                  alt=\"chevron\"\r\n                  width={10}\r\n                  height={10}\r\n                />\r\n              </div>\r\n              <span className='text-sm'>{section.title}</span>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            className={`transition-[max-height,opacity] duration-200 ease-in-out overflow-hidden\r\n              ${openSectionId === section.id ? 'opacity-100' : 'max-h-0 opacity-0'}`}\r\n          >\r\n            <div className=\"py-[35px] px-[40px] border-t border-gray-200\">\r\n              {/* 컴포넌트를 조건부 렌더링 */}\r\n              {openSectionId === section.id && React.createElement(section.component)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AAAA;;;AAXA;;;;;;;;;;AAae,SAAS;;IACtB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC3D,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;IAElC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,IAAI,gBAAgB,GAAG;gBACrB,iBAAiB;YACnB,OAAO,IAAI,gBAAgB,GAAG;gBAC5B,iBAAiB;YACnB;QACF;mCAAG;QAAC;KAAY;IAEhB,MAAM,gBAAgB,CAAC;QACrB,iBAAiB,kBAAkB,YAAY,KAAK;IACtD;IAEA,iBAAiB;IACjB,MAAM,WAAW;QACf;YAAE,IAAI;YAAY,OAAO;YAAgB,WAAW,qLAAA,CAAA,UAAc;QAAC;QACnE;YAAE,IAAI;YAAY,OAAO;YAAe,WAAW,uLAAA,CAAA,UAAe;QAAC;QACnE;YAAE,IAAI;YAAY,OAAO;YAAa,WAAW,wKAAA,CAAA,UAAgB;QAAC;QAClE;YAAE,IAAI;YAAY,OAAO;YAAc,WAAW,yKAAA,CAAA,UAAiB;QAAC;QACpE;YAAE,IAAI;YAAY,OAAO;YAAQ,WAAW,iKAAA,CAAA,UAAS;QAAC;QACtD,4EAA4E;QAC5E;YAAE,IAAI;YAAY,OAAO;YAAQ,WAAW,mKAAA,CAAA,UAAW;QAAC;KACzD;IAED,qBACE,6LAAC;QAAI,WAAU;kBACZ,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC;gBAAqB,WAAU;;kCAC9B,6LAAC;kCACC,cAAA,6LAAC;4BACC,MAAK;4BACL,WAAW,CAAC;gBACV,EAAE,kBAAkB,QAAQ,EAAE,GAAG,eAAe,GAAG;0BACzC,CAAC;4BACb,SAAS,IAAM,cAAc,QAAQ,EAAE;4BACvC,iBAAe,kBAAkB,QAAQ,EAAE;;8CAE3C,6LAAC;oCAAI,WAAW,CAAC,4CAA4C,EAAE,kBAAkB,QAAQ,EAAE,GAAG,eAAe,IAAI;8CAC/G,cAAA,6LAAC,gIAAA,CAAA,UAAK;wCACJ,KAAI;wCACJ,KAAI;wCACJ,OAAO;wCACP,QAAQ;;;;;;;;;;;8CAGZ,6LAAC;oCAAK,WAAU;8CAAW,QAAQ,KAAK;;;;;;;;;;;;;;;;;kCAG5C,6LAAC;wBACC,WAAW,CAAC;cACV,EAAE,kBAAkB,QAAQ,EAAE,GAAG,gBAAgB,qBAAqB;kCAExE,cAAA,6LAAC;4BAAI,WAAU;sCAEZ,kBAAkB,QAAQ,EAAE,kBAAI,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,QAAQ,SAAS;;;;;;;;;;;;eA3BlE,QAAQ,EAAE;;;;;;;;;;AAkC5B;GAhEwB;;QAEE,2HAAA,CAAA,cAAW;;;KAFb"}},
    {"offset": {"line": 7814, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}